CVE: CVE-2013-0306
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2012-12-06
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2013-05-02T14:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2013-05-02T14:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  It was discovered that Django incorrectly handled a large number of forms
  when generating formsets. An attacker could use this flaw to cause Django to
  consume memory, resulting in a denial of service. This has been fixed by
  adding a default maximum number of forms of 1,000. Developers can still manually
  specify a bigger max_num.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: d7094bbce8cb838f3b40f504f198c098ff1cf727
  note: 'Added a default limit to the maximum number of forms in a formset.

    '
vccs:
- commit: aba95dcc0b5370ffac3d3b701c3ca7782ee999c1
  note: |
    This VCC was discovered automatically via archeogit.
    Removed ambiguity with regard to the max_num option of
    formsets and as a result of admin inlines.
- commit: 65b380e74ab79ee011f7556e342dd4d656b018a5
  note: |
    This VCC was discovered automatically via archeogit.
    In Django 1.3 ``FormSet`` creation behavior is modified slightly. Historically
    the class didn't make a distinction between not being passed data and being
    passed empty dictionary. This was inconsistent with behavior in other parts of
    the framework. Starting with 1.3 if you pass in empty dictionary
    the ``FormSet`` will raise a ``ValidationError``.
- commit: e061b036a54597b6a994573ea6aa2ee02ca8838e
  note: |
    This VCC was discovered automatically via archeogit.
    Ensure formsets evaluate to True even if they have no forms.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 9
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there
    were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    The bug reported for this CVE was #701186. Within its report logs, Raphaël
    Hertzog asked Thijs Kinkhorst to perform some testing before releasing the
    patches on 24 Feb 2013. It was stated that they required changes to apply
    and/or pass the test suite. This led me to believe that testing was already
    present.
  fix: true
  fix_answer: "Since Raphaël Hertzog asked Thijs Kinkhorst to perform some testing
    before \nreleasing. What was prepared also included the fixes for a previous security\nupdate
    that didn't get any DSA. On 25 Feb 2013 Thijs gave confirmation no\nproblems were
    spotted in their environment. This led me to believe that\nadditional testing
    was performed before being uploaded to security-master.\n"
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: 'It was not stated how the vulnerability was found but it was reported by
    Mozilla.

    '
  automated: false
  contest: false
  developer: false
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There has been no mention of violation. All steps taken were to avoid
    memory exhaustion. Even with the fix of having a default value for maximum
    number of forms, application developers can still manually specify the max_num
    to fit their needs.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: RHSA-2013:0670 - Security Advisory
  name: Horizon
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: aba95dcc0b5370ffac3d3b701c3ca7782ee999c1
    note: |
      This commit is interesting to me because the developer changed the maxForms.value
      from 0 to none. It makes sure to stop user for adding another if forms currently
      displayed is greater than max num. Also clarifies consistently that value of none
      puts no limit on the number of forms displayed. These fixes were added without
      putting in checks for if the system could handle unsuitably large cases. It makes
      me question how was it missed to set a high limit on the number of forms displayed.
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: 'Did not see any information that showed that the feature dealt with internationalization.

    '
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    This vulnerability deals with the use of creating formsets. A formset
    is a layer of abstraction to work with multiple forms on the same page.
    A form is a collection of elements that allow a visitor to do things
    like enter text, select options, manipulate objects or controls,
    and then send that information back to the server.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Since a remote attacker could use this flaw to their advantage just by sending
      a large number of forms to be created, the program should check that form values
      could possibly disrupt the system. The value given as an input should be always
      checked against a max in order to avoid an error.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    It was stated that the vulnerability was present due to an uncaught Overflow
    Error. This coding mistake was probably due to believing the program would
    not be given value that would overwhelm it. Setting a default value that is
    still large enough to handle most cases and allowing developers the ability
    to modify that max value to fit their needs was a smrt mitigation to the issue.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 400
CWE_note: |
  Limited resources include memory, file system storage, database connection pool
  entries, and CPU. If an attacker can trigger the allocation of these limited
  resources, but the number or size of the resources is not controlled, then the
  attacker could cause a denial of service that consumes all available resources.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
