CVE: CVE-2017-7233
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2017-04-04T17:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2017-04-04T17:59Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  Django relies on user input in some cases, such as authentication users and internationalization, to redirect the user to another web page.
  The security check for these redirects (namely django.utils.http.is_safe_url()) considered some numeric URLs (e.g. http:999999999) "safe" when they should
  not have been considered safe. If a developer relies on is_safe_url() to provide safe redirect targets and puts such a URL into a link, they could suffer from an XSS attack.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: f824655bc2c50b19d2f202d7640785caabc82787
  note:
- commit: 254326cb3682389f55f886804d2c43f7b9f23e4f
  note:
- commit: 8339277518c7d8ec280070a780915304654e3b66
  note:
vccs:
- commit: 552f03869ea7f3072b3fa19ffb6cb2d957fd8447
  note: This VCC was discovered automatically via archeogit.
- commit: 011a54315e46acdf288003566b8570440f5ac985
  note: This VCC was discovered automatically via archeogit.
- commit: a2f2a399566dd68ce7e312fff5a5ba857066797d
  note: This VCC was discovered automatically via archeogit.
- commit: ada7a4aefb9bec4c34667b511022be6057102f98
  note: This VCC was discovered automatically via archeogit.
- commit: c5544d289233f501917e25970c03ed444abbd4f0
  note: This VCC was discovered automatically via archeogit.
- commit: 255449c1ee61c14778658caae8c430fa4d76afd6
  note: This VCC was discovered automatically via archeogit.
- commit: 92053acbb9160862c3e743a99ed8ccff8d4f8fd6
  note: This VCC was discovered automatically via archeogit.
- commit: 9c195d45a64b0d2baee218e617ca3a762efc0bf5
  note: This VCC was discovered automatically via archeogit.
- commit: 78f48300567b816b3c8177c33bef1a3ea6b36987
  note: This VCC was discovered automatically via archeogit.
- commit: fc6d147a63f89795dbcdecb0559256470fff4380
  note: This VCC was discovered automatically via archeogit.
- commit: beb392b85e71fdd41209d323126181d74090fecb
  note: This VCC was discovered automatically via archeogit.
- commit: a8b70d251d238b4e6cfc7bb4296da15494f8dff3
  note: This VCC was discovered automatically via archeogit.
- commit: 770427c2896a078925abfca2317486b284d22f04
  note: This VCC was discovered automatically via archeogit.
- commit: 953badbea5a04159adbfa970f5805c0232b6a401
  note: This VCC was discovered automatically via archeogit.
- commit: 28bed24f552aa01e5b69902493f5ee2e06514522
  note: This VCC was discovered automatically via archeogit.
- commit: 382ab137312961ad62feb8109d70a5a581fe8350
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: The original test case already did exist to test this function, however,
    it did not contain code to test the specific entries that were the vulnerability.
  fix: true
  fix_answer: The original test case was ammended with additional code to test for
    the vulnerability.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: This vulnerability was internally discovered and then fixed by Tim Graham.
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: I did not see any mention that there was a violation of any specification.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: The is_safe_url() function is in the package of django.utils.http.
  name: http utils
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 770427c2896a078925abfca2317486b284d22f04
    note: This commit fixes a security vulnerability of similar type to the vulnerability
      in this CVE. The commit is updating the is_safe_url() function to reject URL's
      starting with control characters, which is also an input sanitization problem.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: true
  note: The django project website directly mentions that this feature includes internationalization.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: The feature was involving URL's, which would be web communication, but not
    inter-process communication.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: Better input sanitization would have prevented this vulnerability.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: true
    note: The complex input in the form of URL's should have been tested better.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "I believe that this mistake was a coding mistake because it was a specific
    edge case of input that was untested and thus led to the vulnerability. \nThis
    is evident in the mitigation as the developer fixed the edge case and updated
    the test case to test for the previous vulnerable input.\n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 183
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Unsafe-URLS's
CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:N
