CVE: CVE-2013-1664
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2013-02-13
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2013-04-03'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "XML libraries for Python versions 3.4, 3.3, 3.2, 3.1, 2.7 and 2.6 allowed
  \nhostile attackers to make use of Denial-of-Service or DOS vulnerabilites via\nan
  XML Entity Expansion or XEE attack. An XML Entity, also known as XML bombs\nis a
  DOS attack, that expands expontially until it has exhausted a server's \nallocated
  resources. According to fortify.com, an attack can crash a servers\nresources by
  nesting recurrent entity resolutions. This attack was used \nagainst various open
  source development stacks including Django. \n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: d19a27066b2247102e65412aa66917aff0091112
  note: "This commit disables the XML Deseriaization feature as a security fix to\nprevent
    entity expansion and network DOS vulnerabilities \n"
- commit: 1c60d07ba23e0350351c278ad28d0bd5aa410b40
  note: "This commit disables the XML Deseriaization feature as a security fix to\nprevent
    entity expansion and network DOS vulnerabilities. It also adds an \nadditional
    parameter to pulldom.parse function.\n"
vccs:
- commit: 4ea7a11659b8a0ab07b0d2e847975f7324664f10
  note: This VCC creates a serializer, that serializes Django Objects
- commit: c9032ab07f3694f3ae7da9b0017b764248ce28c9
  note: This creats a JSON Serializer
- commit: 953badbea5a04159adbfa970f5805c0232b6a401
  note: Unicode branch is Merged
- commit: ff60c5f9de3e8690d1e86f3e9e3f7248a15397c8
  note: This VCC was discovered automatically via archeogit.
- commit: ea07351799ea71084c1279ad9f5dab1f81362c4b
  note: Fixes a filed argument issue in the JSON serializer
- commit: eedf16d12b675c50d0b0bab60ba8ad2e30a9921e
  note: Avoids the use of flush
- commit: 7ccf9978adab5c0846b13f804f1bab25436e2564
  note: This VCC was discovered automatically via archeogit.
- commit: ac64e91a0cadc57f4bc5cd5d66955832320ca7a1
  note: This VCC was discovered automatically via archeogit.
- commit: a33fb695e37c921d2bc0ffe3b011ad830f4bea56
  note: This VCC was discovered automatically via archeogit.
- commit: 7019123d21f202bfce54ad30eb33ae9f4b3bcef9
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: true
  fix: true
  fix_answer: true
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    Was found by a Yahoo! employee when DOS was plaguing Nova keystone servers
    https://bugs.launchpad.net/nova/+bug/1100282
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: 'There was a violation in XML standards that are used.

    '
  answer: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: xmlbomb_20130219.patch
  name:
  - xml_parsers
  - NodeFilter
  - ElementTree
  - xml_sax_handler
  - expatreader
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: true
  note: 'In the source code, they add and XML Parser that checks unicode and ASCII

    '
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: 'There were no OS/IPC related operations in the code

    '
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: true
    note: 'Frameworks are inherent security hazards as they are not written by you.

      '
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: "The inputs were modified by HTML tags. The inputs were not sanitized.
      \nThis means that the XML expansions were perfomed on the URL inputs.\n"
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: true
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "There was no implementation of automated XML recognition. According to
    \nDolph Mathews, who worked on the Nova project for Yahoo noticed this. \nhttps://bugs.launchpad.net/nova/+bug/1100282.\n\"The
    attached patch completely ignores XML entities, comments, and \nprocessing instructions
    (Mathews).\" \n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 776
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS:
