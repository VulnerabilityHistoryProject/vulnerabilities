CVE: CVE-2016-2048
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2016-01-24
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2016-02-08T19:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2016-02-08'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "When Django's ModelAdmin objects were configured to enable \"save_as\",
  \nthis allows a user with \"change\" but not \"add\" permission\nto illegitimately
  create new ModelAdmin objects using the \n\"Save as new\" option when editing existing
  ModelAdmin objects.\n\nThis stemmed from the \"Save as new\" form submitting under
  change permissions,\neven though it is really an add action.\n\nNote that \"save_as\"
  was disabled by default, decreasing the number\nof users potentially affected by
  the issue.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: adbca5e4db42542575734b8e5d26961c8ada7265
  note: |
    This commit moved the "Save as new" special case to be before the add check
    in changeform_view. This ensures that add permission is checked.
vccs:
- commit: 390001ce52802a7fa1fceeabfb646e6b32911fb9
  note: "From 1.7.X onward, this commit introduced retrieving the add privalage value\nfor
    permission check in change_form based on the presence of object_id.\nWhile this
    did not cause the add-skipping issue until changes in 1.9.X,\nit obscured the
    permissions check, as a developer using the \nchangeform_view method would be
    unlikely to notice that add permissions \nwere determined by whether the form
    was submitting an object (id) to act upon.\n"
- commit: '0894643e40327e48397573b7844585618200442b'
  note: |
    This commit removed the call to the add_view in the event of "Save as new" logic in
    changeform_view, thus removing an add permissions check, under the erroneous
    assumption that "Save as new" is a change action and not an add action.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: 'There were unit tests for the "Save as new" operation, but none testing
    add privalage for that operation.

    '
  fix: true
  fix_answer: "The fix added \"test_change_view_save_as_new\" to tests/admin_views/tests.py
    to cover this case. \n"
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: "Myk Willis created a fix commit for this issue on 2016-01-24 and then
    reported it to the Django team.\nThe team then created a bug report, patched Myk's
    commit into 1.9.X, and issued a blog post for the \nissue all on 2016-02-01. \n\nPresumably
    Myk discovered the issue on his own, and took initiative to solve the issue, \nas
    Myk only has one commit in the git history, and no mention of the circumstances
    of his\ndiscovery of the issue was made.\n"
  date: 2016-01-24
  automated: false
  contest: false
  developer: false
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There is no mention of any specifications in the bug report,
    security advisory, or the commit message.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: |
    This error occured in the django/contrib/admin package,
    as part of options handling for ModelAdmin.
  name: Admin
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  answer: "I did not find any commits relating to this vulnerability, \nthough one
    might consider my first VCC something of an interesting commit,\nas it set the
    stage for the poor maintainability of that add permissions-check,\nwhich undoubtedly
    asisted the second VCC I listed.\n\nThere were many changes to options.py during
    this two year time, appoximately 4-10 a month,\nthough each change tended to be
    small and not related to this issue.\n\nHowever, most of them were just preventing
    crashes or errors from things like\nmissing information, or deprecating certain
    fields.\n"
  commits:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: "The visibility and permissions checking of the button that allows \n\"Save
    as new\" functionality does not consult localization.\n"
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: 'This is an improper permissions handling issue.

    '
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      An (arguably extraneous) permissions check for the add permission was removed,
      causing the issue when the other add check was not performed due to the call
      possesing an object_id.
  least_privilege:
    applies: true
    note: 'The "Save as new" operation was being accidentally afforded the add privilage.

      '
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "I believe this issue came about due to poor maintability in detecting\nwhether
    the add permission needed to be checked in ModelAdmin.changeform_view(),\ncausing
    an issue when a later fix removed the second add check without considering\nthe
    functionality of the first add check.\n\nSpecifically this poor maintainability
    comes from the boolean representing whether\nan add-check should be done being
    based on the \"object_id\" parameter, which hides\nthe fact that parameters are
    determining whether an add permissions check is being made.\n\nAdditionally contributing
    to the poor maintainability, is that the \"Save as new\" operation\nwas originally
    being handled in a \"!add\" condition. Meaning that the operation was not being\nconsidered
    as \"should have an add check\" until it decided it was a change operation,\ndetected
    it was the \"Save as new\" change operation, and implicitly declared another\nadd
    check necessary (by processing \"Save as new\" through the add view).\n\nThe fix
    looks proper, moving the check for \"Save as new\" to before the add = object_id,\nand
    setting the objct_id to null (thus causing add to be true), \nand adding unit
    tests for this case. This will increase maintability, \nas well as solve the issue.\n\nHowever,
    I wish they had made add an input to the method, \ninstead of being derived from
    object_id.\n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 284
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Wrong Permission Designation
CVSS: AV:N/AC:M/Au:S/C:P/I:P/A:P
