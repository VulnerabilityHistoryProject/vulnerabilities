CVE: CVE-2016-9013
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2016-10-25
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2016-12-09T20:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2016-12-09'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  Django has the built in ability to generate a TEST database to be able to
  create test tables and accounts to run unit tests againt so that it
  doesn't mess up the actual live database you are using. While you were
  able to specify a password, if you didn't, it would use a hardcoded one
  instead. Therefore, if you ended up passing the `keepdb` flag when testing
  anyone who looked on the repo and found that hardcoded password
  could then gain access to your database server using the default
  credentials. This was only applicable when using an Oracle database.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo: https://github.com/django/django
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 34e10720d81b8d407aa14d763b6a7fe8f13b4f2e
  note: Cherry pick for 1.10.x branch
- commit: 4844d86c7728c1a5a3bbce4ad336a8d32304072b
  note: Cherry pick for 1.9.x branch
- commit: 70f99952965a430daf69eeb9947079aae535d2d0
  note: Cherry pick for 1.8.x branch
vccs:
- commit: abd7e48af78bbe6ec31359c7826757d7166e55d6
  note: |
    This VCC was discovered automatically via archeogit. This one is
    doing some changes in terms of how it connects and switches it database
    cursor between the main database and the test database.
- commit: ac64e91a0cadc57f4bc5cd5d66955832320ca7a1
  note: |
    This VCC was discovered automatically via archeogit. This merges in a branch
    and tests for Oracle database which includes the hardcoded database
    password in question.
- commit: 41afae4ce906838fc87d63962104cfb47991f68b
  note: |
    This VCC was discovered automatically via archeogit. Refactoring the test
    database settings. This also includes how the test database properties
    are stored and prefixed.
- commit: ff60c5f9de3e8690d1e86f3e9e3f7248a15397c8
  note: |
    This VCC was discovered automatically via archeogit. This was a large
    feature patch to bring in multiple database support including Oracle
    database which did include refactoring and moving around
    the password that was used/created in the test database.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: false
  code_answer: |
    There were no tests for this previously since there would be no point of
    testing a hardcoded value against another hardcoded value.
  fix: false
  fix_answer: |
    There were no tests added since it's a very discrete task of making it a
    hardcoded random value. Therefore, there is no point if checking the
    random value agains the random value as long as it's random.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    While it's unclear exactly how they discovered it (by accident or on
    purpose), it does appear to come from a single developer without indication
    of being automated or part of a contest. Developer was Marti Raudsepp who
    gave initial report, as he is called out
    in the blog post at
    https://www.djangoproject.com/weblog/2016/nov/01/security-releases/
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There is no indication that there was a violation of a specification in the
    blog post or the commit message. Furthermore, since this is usually fine
    to hardcode a password for a test database, it would have been fine if
    there wasn't an option to keep it around after testing.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: |
    There exists a similar problem where the Oracle database had an open bug
    with user creation no a test database at
    https://code.djangoproject.com/ticket/31153 which had Database layer
    as the component.
  name: Database layer
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: ac64e91a0cadc57f4bc5cd5d66955832320ca7a1
    note: |
      This is the first merge that brings in the Oracle database work with
      the hardcoded password. This was probably a first red flag that there is
      a hardcoded password somewhere, but they failed to put it together
      that there was also a feature that allowed you to keep around the
      database if you wanted.
  - commit: ff60c5f9de3e8690d1e86f3e9e3f7248a15397c8
    note: |
      This VCC was discovered automatically via archeogit. This was a large
      feature patch to bring in multiple database support including Oracle
      database which did include refactoring and moving around
      the password that was used/created in the test database.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    While passwords need to be i18n compliant, this was an issue regardless of
    the local as it still had to be a random string for the password.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: Does not apply.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Having a randomized password that can't be looked up online
      would be an extra layer of complexity a malicious hacker would have to
      deal with. They first need to find a Django website that uses an Oracle
      database that has opted to keep around their test database AND
      didn't supply their own password. Adding this is an additional layer
      of security.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    This would be primarily a design mistake as it wasn't a fumble
    in that actual coding and execution of writing code, but rather a
    collison of "features" the developers thought were in the best intention
    of it's users that they failed to see how they would work when used
    together. It's often helpful to keep around a test database for analysis
    and it's also nice to not have to enforce a password be inputted by the
    developer to get the tests running. However, the lesson to be learned here
    would be when you're adding a new feature, especially a security based on,
    look through the exisiting features of that component and how the new
    feature would mesh and/or create unforessen complications with exisiting
    features.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 798
CWE_note: |
  Since this had to do with a hard coded password, this is the closest
  and very accurate CWE that notes the use of hard-coded credentials
  in an application. It is also noted here:
  https://nvd.nist.gov/vuln/detail/CVE-2016-9013
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Oracle Test Password
CVSS: AV:N/AC:L/Au:N/C:P/I:P/A:P
