CVE: CVE-2014-0483
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces
  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2014-08-14
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-08-26T14:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2014-08-26'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
  Your target audience is people just like you before you took any course in
  security
description: "The Django admin interface allowed for remote authenticated users to
  open up \na popup with information on relationships between data models obtained
  using \na to_field parameter. There was no check in place to verify that the field
  \nbeing used actually represented a relationship, meaning that sensitive data \nthat
  should be hidden could be accessed in this way.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 027bd348642007617518379f8b02546abacaa6e0
  note: "1.4\nThis commit as well as the one below this updated exceptions \nand
    even some whole new \"try/Catch\" statements. to handle the exception. \nthis
    was even described in a release document that was added in this commit\nThey checked
    to see if they were allowed to access a field and then verified that the admin
    relationship does not exist\n"
- commit: 2a446c896e7c814661fb9c4f212b071b2a7fa446
  note: |
    1.5
    Shares a lot of the same code that 1.4 but has a few additional fields moved around much more than 1.4
- commit: f7c494f2506250b8cb5923714360a3642ed63e0f
  note: |
    1.6
    A lot different from the previous two as the exceptions handed when you first look thing changed.
    They even have an options.py folder that checks
    There are official classes dedicated to invalid field inputs called "DisallowedModelAdminToField"
    that gets the related models to verify the relationship through different try catch blocks. Even in the main they have
    additional steps to verify the relationships
- commit: 2b31342cdf14fc20e07c43d258f1e7334ad664a6
  note: |
    1.7
    Similar to 1.6 although they remove a few ways where they set the "to_field" equal to a post in 1.7 but no mention of it in 1.6.
    They even add a whole new test to the admin_views to verify whether or not admins have control of things that are controlled or not.
vccs:
- commit: 732198ed5c2a127249970e0cd4218d093a38e9a2
  note: 'This ticket does model comparing without the proper exception handling which
    technically both attempts a fix but doesnt prevent the issue from happenning in
    the long run.

    '
- commit: b5f0aff922fe963a4df0d3449d8fe55a6acd950d
  note: 'This fix corrects an issue where infinite migrations using certain arguments
    with a corrected search handling

    '
- commit: ae7d9bfad2c92ebe30ce8ca0a145eba4504312f1
  note: 'This added logging messages to the admin account. adding more information
    for the admin to see which relates to what the vulnerability reveals.

    '
- commit: 3c51962cabc9537221b86c667aac5ffaa1469660
  note: 'This was specific to 1.6. They updated tests for their options to retrieve
    permisions with the proper arguments.

    '
- commit: d818e0c9b2b88276cc499974f9eee893170bf0a8
  note: 'Added code from an outside project in 2013 (they start to write out the
    field handling before running into the problem)

    '
- commit: 4ad1eb1c14b629cf5bcfd253ed40e875f1bddd47
  note: 'Added validation to admin class

    '
- commit: 75d2da797e100442d3573dfa7ae490972cea32d8
  note: 'This fix was for 1.7. This fixed a few syntax errors, added to the admin
    view tests and aded a quote before redirecting from some of the admin functionality.

    '
- commit: 390001ce52802a7fa1fceeabfb646e6b32911fb9
  note: 'This was specific to 17.x. This was a small fix to a delayed detection

    '
- commit: 5268d71f18d12c362d74010210309c1cec8e8a1a
  note: 'This was specific to 17.x. This was an addition to some methods and to track
    for reports.

    '
- commit: f51eab796d087439eedcb768cdd312517780940e
  note: 'This was a fix to use a method instead of hard coding things

    '
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For code: and fix: - your answer should be boolean.
    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code
    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: Because there were tests in many of the git blames before the vulnerability
    was initially discovered in both related and unrelated sections.
  fix: true
  fix_answer: This was fixed because the github shows unit tests that check for that
    specific vulnerability in the fix hashes.
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The automated, contest, and developer flags can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: "I could not find a bug report or any specific discussion of when this\nvulnerability
    was discovered. The best I could find was that in the page\nannouncing the vulnerability
    to the public after it was fixed, a developer\nnamed Collin Anderson was credited
    for discovering it. I searched for \ninstances of his name on the Django github
    project around the August 2014 \ntimeframe, but could not find anything relating
    to this vulnerability\nthere until the security fix was committed.\n"
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.
    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.
    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: Although its deduced that elevation of privilege is one of the things
    that came into mind. There is no mention of a specific violation of the examples
    provided in any of the commits aside from "Security Alert"
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?
    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.
    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.
    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)
    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: "Both the CVE writeup description \nhttps://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0483
    and the\nstatement where the vulnerability was disclosed\nhttps://www.djangoproject.com/weblog/2014/aug/20/security/\nmention
    the administrative interface django.contrib.admin as being the \nsource of the
    vulnerability. Furthermore, the files that were touched in\nthe fixing commits,
    excluding the unit tests and updated text files, were\ndjango/contrib/admin/exceptions.py,
    django/contrib/admin/options.py, and \ndjango/contrib/admin/views/main.py\n"
  name: Admin
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 2a446c896e7c814661fb9c4f212b071b2a7fa446
    note: 'This is interesting because of how much similar it is to 1.4 but does
      things in a slightly more condenced manner such as reducing a response statement
      so its not the username thats tested but the id

      '
  - commit: d228c1192ed59ab0114d9eba82ac99df611652d2
    note: 'This was hilarious because of "Suspicious activity" being monitored by
      weird naming conventions and a lot of "suspicious"-like logic to monitor it
      all.

      '
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: 'This vulnerability was not related to translation, typography, text, etc.

    '
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    The admin popup feature did not involve signals, messages, std I/O, the
    clipboard, or creation of a file.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: "DiD applies because, as mentioned in\nhttps://www.djangoproject.com/weblog/2014/aug/20/security/\nthere
      were layers of security already in place for this popup feature.\nUsers needed
      to have permission to view information about a particular\nmodel. The problem
      was that there was not a further layer of security to\nverify that parts of
      the model which should not be visible regardless \ncould not be accessed.\n"
  least_privilege:
    applies: true
    note: 'Elevation of Privelege of problems

      '
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: "Attempting to use the admin popup for related features is a form of user\ninput
      since the user is choosing a field that they want to see the \nrelations for.
      The reason that this was a vulnerability was because the\nsystem did not verify
      that what the user asked to see should be visible\nor not.\n"
  security_by_obscurity:
    applies: true
    note: As the django site stated; they completely removed names involving ints
      to avoid certain filename conflicts via the disk and using specific string inputs
      to avoid conflicting filenames
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    There was a few design mistakes with different aspects of the code as well as a lot of code miscommunication between each version
    For instance 1.6 and 1.7 were very condenced in terms of classes and had the same vulnerability but 1.4 and 1.5 had the vulnerability and was a mess altogether, making the vulnerability more exploitable and tougher to fix.
    To also add, communication was also not their strong suit because 90% of the vccs found didnt even indicate nor show anything about which version of this code is being worked on which was very fustrating to follow.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.
  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.
  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 280
CWE_note: "As attackers seek out the relationship mishandling when a relationship
  cannot be found, \nthey take that opening and use it to exploit the system and use
  the sensitive data to their liking \n"
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Link from the underworld
CVSS: AV:N/AC:M/Au:S/C:P/I:N/A:N
