CVE: CVE-2014-0474
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2014-04-20
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-04-23T15:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2014-04-23T15:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "While logic was being implemented the developer missed an edge case.
  \nThe error came from MySQL type casting where mixing types can causes \nunexpected
  results to be returned\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: aa80f498de6d687e613860933ac58433ab71ea4b
  note:
- commit: 985434fb1d6bf2335bf96c6ebf91c3674f1f399f
  note:
- commit: 5f0829a27e85d89ad8c433f5c6a7a7d17c9e9292
  note:
- commit: 34526c2f56b863c2103655a0893ac801667e86ea
  note:
vccs:
- commit: ce3c281090320172d22e8a6057250d103c93438e
  note: This VCC was discovered automatically via archeogit.
- commit: 5f9fe6d403dcee757778fb2c800e7866cca4b185
  note: This VCC was discovered automatically via archeogit.
- commit: e0c3dd3318f6f4895554521c6bf69676635b1937
  note: This VCC was discovered automatically via archeogit.
- commit: 980fa8b827485616c597a39ec975735c412fd59d
  note: This VCC was discovered automatically via archeogit.
- commit: 5bd63663a9754ef783aa21402f534fe6ed45ef57
  note: This VCC was discovered automatically via archeogit.
- commit: 4ac1de31cd02248b8847f7c119e205bf6e34559e
  note: This VCC was discovered automatically via archeogit.
- commit: 823bac36db2e4679d03fdc36e318da779767cac6
  note: This VCC was discovered automatically via archeogit.
- commit: 392d992f8295f96632179e01e790465cc9c8d3ec
  note: This VCC was discovered automatically via archeogit.
- commit: 121d2e36785dc0ce8e7d1c48883fc7b719b21afc
  note: This VCC was discovered automatically via archeogit.
- commit: a34b718192b4356a5ab39ac49d0e927d8a425a9c
  note: This VCC was discovered automatically via archeogit.
- commit: 3524c74f0bc4d88c8c0643c97ef51970b6aef220
  note: This VCC was discovered automatically via archeogit.
- commit: 45fab74561a2b339cde922c196ab3ccf998bad10
  note: This VCC was discovered automatically via archeogit.
- commit: '028bbd15cad0e48d2b679b986e90c6af0f7e28a0'
  note: This VCC was discovered automatically via archeogit.
- commit: 210d0489c5daad56b806f8165f9fe09fb3c2a019
  note: This VCC was discovered automatically via archeogit.
- commit: 212ee65be782240554749f25bbd3772240d56fff
  note: This VCC was discovered automatically via archeogit.
- commit: 0423e0796a75db8226e2032083ce6c674da337dc
  note: This VCC was discovered automatically via archeogit.
- commit: 31e6d58d46894ca35080b4eab7967e4c6aae82d4
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: 'the code lacked good testing but was already tested before fixed

    '
  fix: true
  fix_answer: 'the fix involved updating and improving unit tests

    '
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    There was no evidence to where this was found. I looked on the original report where
    the bug was first mentioned. It was a individual who I could not confirm or deny works
    for Google
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: 'There was an edge case that was not covered with the implementation

    '
  answer: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: 'i saw this in the git repo

    '
  name: model
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: aa80f498de6d687e613860933ac58433ab71ea4b
    note: |
      I find this commit interesting because this is one of the main solutions
      to the problem. The problem fixed with this commit is a simple edge case.
  - commit: ce3c281090320172d22e8a6057250d103c93438e
    note: |
      This is the commit the caused the problem mentioned in the above interesting
      commit. I am also including this because it is important to remember to
      do basic edge cases in your functions.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, Unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: 'this is a mysql type problem with IP addresses being queried

    '
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: 'this appears to be involved with setting up database communication with the
    back end.

    '
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      in this case the developer was assuming the input type
      and this led to a type cast issue.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Mis communications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    this appears simply like a developer missed a edge case when developing
    this portion of the application. This could be linked to a testing and
    QA problem.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 704
CWE_note: 'since this input was not checked there was an incorrect type error

  '
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:L/Au:N/C:C/I:C/A:C
