CVE: CVE-2014-3730
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-05-16T15:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2014-05-16'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "A critical vulnerability that can be initiated remotely and with no\nform
  of authentication required for a successful exploitation, was found in Django. \nPeter
  Kuma and Gavin Wahl found that the django.util.http.is_safe_url function does not
  properly validate URLs, \nwhich allows remote attackers to conduct open redirect
  attacks via a malformed URL, \nas demonstrated by \"http:\\\\\\djangoproject.com.\"\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo: https://github.com/django/django/
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 7feb54bbae3f637ab3c4dd4831d4385964f574df
  note: Added additional checks in is_safe_url to account for flexible parsing. 5-12-2014
- commit: ad32c218850ad40972dcef57beb460f8c979dd6d
  note: Added additional checks in is_safe_url to account for flexible parsing. 5-12-2014
- commit: 601107524523bca02376a0ddc1a06c6fdb8f22f3
  note: Added additional checks in is_safe_url to account for flexible parsing. 5-12-2014
- commit: e7b0cace455c2da24492660636bfd48c45a19cdf
  note: Added additional checks in is_safe_url to account for flexible parsing. 5-12-2014
vccs:
- commit: 751888ece3c970e208d9d77f21a35464c9122835
  note: Fixed logout view to use the 'next' GET parameter correctly as described
    in the docs, while only allowing redirection to the same host. 13-2-2011
- commit: 6e748b5db4ea6db78ce389f474c2fb78ee3976ed
  note: Tightened the security check for "next" redirects after login. 3-1-2010
- commit: e74edb4d53b089ec57ec4830eeba98607283a092
  note: Auth.views.login now allows for login redirections for different schemes
    with the same host (or no host even, e.g. 'https:///login/'). 11-27-2010
- commit: ec67af0bd609c412b76eaa4cc89968a2a8e5ad6a
  note: Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S. 8-13-2013
- commit: b2ae0a63aeec741f1e51bac9a95a27fd635f9652
  note: Ensured that redirects can't be poisoned by malicious users. 11-17-2012
- commit: 6072e108e2738dbde7c2ad976a45745551859a20
  note: Input validation and tests for base36 conversion utils. 2-15-2012
- commit: 1a274ccd6bc1afbdac80344c9b6e5810c1162b5f
  note: Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S. 8-13-2013
- commit: fce1fa0f7fb984d4e76eb81ffc3cb9826046c3b5
  note: Ensured that redirects can't be poisoned by malicious users. 11-17-2012
- commit: b3ee80a0cf0e60876f03b797d2bdc69505dbdfcb
  note: Fixed parse_http_date docstring and moved related tests. Unrelated.
- commit: 79594b40c087c19fecc72af042c835b11a519b78
  note: Fixed is_safe_url() to reject URLs that use a scheme other than HTTP/S. 8-13-2013
- commit: 4f4e9243e4cf585e32a882804084853108ef94c0
  note: Unrelated to vulnerability.
- commit: a2f2a399566dd68ce7e312fff5a5ba857066797d
  note: Ensured that redirects can't be poisoned by malicious users. This is where
    the vulnerability is created. 11-17-2012
- commit: ae3535169af804352517b7fea94a42a1c9c4b762
  note: Fixes is_safe_url() to reject URLs that use a scheme other than HTTP/S. 8-13-2013
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: false
  code_answer: There were unit tests but not for the method the vulnerability existed
    in, see a2f2a399566dd68ce7e312fff5a5ba857066797d.
  fix: true
  fix_answer: New test cases were added for the corresponding fix, see 7feb54bbae3f637ab3c4dd4831d4385964f574df.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: Peter Kuma and Gavin Wahl reported the issue to Django.
  automated: false
  contest: false
  developer: false
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: There was no mention of a specification being followed.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: The vulnerability was located in a http utility function whose responsibilities
    lie in performing http related actions, therefore it is the http subsystem.
  name: http
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: a2f2a399566dd68ce7e312fff5a5ba857066797d
    note: "This commit is interesting because this is where the vulnerability is
      introduced. \nIt appears that the author just wanted to implement a simple validation
      function for the URL and did not think of every consideration, and\nin doing
      so introduced a vulnerability. Additionally it can be seen that no unit tests
      were implemented with this initial commit. If the author\nhad implemented unit
      tests for this method, would the vulnerability have existed?\n"
  - commit: 1a274ccd6bc1afbdac80344c9b6e5810c1162b5f
    note: |
      This commit is interesting because it was about fixing a different vulnerability having to do with rejecting incorrect schemes,
      and unit tests still were not implemented for the function. The developers of this function were able to find a different vulnerability but
      did not take the time to think about how else the function might be vulnerable, and did not unit test either.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: It had nothing to do with internationalization, it has to do with a lack
    of sanitization in URLs.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: The affected subsystem could send http messages, however that is not inter-process.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability can be exploited by sending in an input that wasn't validated.
      The developer should have accounted for more than just the two cases they initially validated for.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "This vulnerability was brought on by carelessness, the author of the is_safe_url
    function wrote it out of neccesity without putting \nany real thought into the
    consequences of the function. The first mistake the original author made was not
    writing unit tests for the function.\nIf unit tests were implemented I feel as
    though the author may have thought of additional cases to test and in doing so
    found the vulnerability the\nfunction was open to. Additionally if unit tests
    had been in place for the function, then different developers down the line would
    have been forced\nto write their own tests for the function and in doing so may
    have also discovered the vulnerability. One interesting note is that it appears
    a second\nvulnerability was found in this function as well, and that fix still
    did not result in unit tests, which was a mistep to be sure. If there had been
    a \nrequirement for unit testing alongside a more thoughtful design from the original
    author, this vulnerability would have never became an issue. \nThe lesson to be
    learned here is that even a simple function like a validation check can open you
    to many different forms of attack, and should be \nconsidered when you are designing
    any piece of software large or small.\n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 20
CWE_note: "The vulnerability can be classified as CWE-20 because \nthe function is_safe_url
  does not validate or incorrectly validates input that can affect the control flow
  or data flow of the program.\n"
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: URL Is Not Safe
CVSS: AV:N/AC:M/Au:N/C:N/I:P/A:N
