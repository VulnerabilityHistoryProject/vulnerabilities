CVE: CVE-2011-4137
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2011-09-11
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2011-10-19T10:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2011-10-19T10:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A method called verify_exits uses a python library that calls the arbitrary URL
  without a timeout. This can be a security threat as someone can cause denial of
  service by simply passing a url into the verify_exists which is associated with
  a slow response or a large amount of data sent.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs:
- 737366
- 641405
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 7268f8af86186518821d775c530d5558fd726930
  note: This commit sets the verify_exists to false so that it does not lead to possibility
    of DOS attack
- commit: 1a76dbefdfc60e2d5954c0ba614c3d054ba9c3f0
  note: removed deprecated test cases which relied on verify_exists functionality
vccs:
- commit: 2f9853b2dc90f30317e0374396f08e3d142844d2
  note: This VCC was discovered automatically via archeogit.
- commit: 471596fc1afcb9c6258d317c619eaf5fd394e797
  note: This VCC was discovered automatically via archeogit.
- commit: e258d9a10b92ef581556d9f265d7798d28b3330d
  note: This VCC was discovered automatically via archeogit.
- commit: 24e0b56dcb92febdaf9ea83b394d7866c7c956a9
  note: This VCC was discovered automatically via archeogit.
- commit: bd123104272606465dd0391f0c3650388b0fb45c
  note: Associated with unit test. This VCC was discovered automatically via archeogit.
- commit: 8bafde1229fdebb48383449de9bcadde06451816
  note: Associated with unit test. This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: Yes it is clear it is unit tested as there are unit tests that target
    the refactoring
  fix: true
  fix_answer: I can see that additional methods were created such as test_correct_url_with_redirect()
    and old ones were removed as they were testing deprecated code.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: Paul McMillan, Mozilla and the Django core team discovered the vulnerability
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: I have checked commits and bug reports. It only states that the vulnerability
    leads to a denial of service attack. No mention of specification. https://bugzilla.redhat.com/show_bug.cgi?id=737366
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: it is called the models system. I know this as I referred to the source
    code as well as on their webblog which announced their vulnerability https://www.djangoproject.com/weblog
  name: models
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  answer: Seems like there wasn't much talk about the verify_exists functionality
    between the vcc and the fix up until about a month before when Chris Beaven noticed
    some tests failing within the fields class. Having seen that url_fields was finicky
    as it returned a value error, led them to further investigate the verify exists
    flag within url_fields
  commits:
  - commit: 470c70f876b2fc9c7783a45589f7bfd1c4356078
    note: Chris Beaven notes that the URLFields method fails on some urls in python
      2.7
  - commit: fe88584589922c1a0e068f18c82fe1b17e437fcd
    note: Chris Beaven again testing for URLField.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: no this error was not associated with internationalization, as the method
    would not fail due to some faults in internationalization, but instead the mishandling
    of timeouts in the library
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: there was no inter process communication involved in the feature. It was just
    verifying that the url existed
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: they relied on an external library to do the work of verifying a url existed.
      They should have taken precaution to timeout if the library did not return back
      anything within a certain time limit. So even if the library was flawed, the
      program would not be open to a threat.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: this one definitely applies. Don't trust that the user is going to supply
      a url that is safe. Have a check that sees how system handles malicous url.
      Classic case of not modeling abuse cases.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: In my opinion this was due to a lack of misuse/abuse cases when creating
    functionality for verify_exists. It's is important to assume situations that are
    not intended but can happen. In this case, a user could easily pass in a url that
    will take a long time to load which can cause denial of service because the verify_exists
    does not timeout. I noticed they had created tests for url does not exist or one
    that exceeds max_char. This goes hand in hand with exhaustive testing. Test, all
    edge cases, not just the simple ones or happy path. If they had done this, they
    could have detected the flaw in the code from the time the VCC commit occured.
    Another thing is relying on external libraries. If you are using a different library,
    you should understand its capabilities and limitations. In this case, if they
    had passed a timeout parameter then the vulnerability could be avoided. Simply
    not reading documentation for such a case can introduce alot of security risks,
    so always understand the tools and libraries you use.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 400
CWE_note: Uncontrolled resource consumption. This is applicable because the url library
  didn't have a timeout so the url could potentially send large amounts of data causing
  resource to be consumed.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
