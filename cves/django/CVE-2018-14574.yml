CVE: CVE-2018-14574
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2018-08-03T17:29Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2018-08-03'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  There is a vulnerability that causes Open redirects in the django middleware.
  This vulnerability occurs when certain settings are enabled and the URL pattern
  accepts paths ending in slash. This allows attackers to create maliciously crafted
  URLs that can lead to redirects to other sites.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: c4e5ff7fdb5fce447675e90291fd33fddd052b3c
  note:
- commit: 6fffc3c6d420e44f4029d5643f38d00a39b08525
  note:
- commit: d6eaee092709aad477a9894598496c6deec532ff
  note:
vccs:
- commit: 434d309ef6dbecbfd2b322d3a1da78aa5cb05fa8
  note: This VCC was discovered automatically via archeogit.
- commit: 5f3a689f71dedced29b77763617244845aa8b99a
  note: This VCC was discovered automatically via archeogit.
- commit: 16411b8400ad08f90c236bb2e18f65c655f903f8
  note: This VCC was discovered automatically via archeogit.
- commit: 48d57788ee56811fa77cd37b9edf40535f82d87e
  note: This VCC was discovered automatically via archeogit.
- commit: 26ff2be787d3c1fad2df4a009fa05b4c11b8cf30
  note: This VCC was discovered automatically via archeogit.
- commit: 24acca413977422681ca16b42fe9a6d763df2121
  note: This VCC was discovered automatically via archeogit.
- commit: 182f98c4c77dcb0262360438a1ab01a80684a7a4
  note: This VCC was discovered automatically via archeogit.
- commit: 929684d6ee0efb5afad51dc584489d0437d2451b
  note: This VCC was discovered automatically via archeogit.
- commit: afd040d4d3a06fe92e3080870b2ff2095ce86a75
  note: This VCC was discovered automatically via archeogit.
- commit: 89616f0c790376867ba31ada27554f40bfeb228e
  note: This VCC was discovered automatically via archeogit.
- commit: 30b568226f86f268628ac40890a8fa40c4db0b97
  note: This VCC was discovered automatically via archeogit.
- commit: a9fd740d22bc4fed5fdb280c036618000ee13df1
  note: This VCC was discovered automatically via archeogit.
- commit: 89b9e6e5d68297e7fe10baea6abcd96e24de0e09
  note: This VCC was discovered automatically via archeogit.
- commit: 0e212a705e6b2e49a246b16286036c40ec2ac4f8
  note: This VCC was discovered automatically via archeogit.
- commit: 92053acbb9160862c3e743a99ed8ccff8d4f8fd6
  note: This VCC was discovered automatically via archeogit.
- commit: 20d39325ca1da57a709f3ba38299dc7b0fc4bdfb
  note: This VCC was discovered automatically via archeogit.
- commit: a840710e1e38bc9e55412bb36eca92eff94ebd2c
  note: This VCC was discovered automatically via archeogit.
- commit: 2a55063dcc698e5541105649b0df6d13988e8cc4
  note: This VCC was discovered automatically via archeogit.
- commit: 8fd44b2551b9cca765b216a31306f9c6935f1492
  note: This VCC was discovered automatically via archeogit.
- commit: 11f10b70f3cb21c7a7f859e417adee104758221b
  note: This VCC was discovered automatically via archeogit.
- commit: b3ee80a0cf0e60876f03b797d2bdc69505dbdfcb
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: This file had unit tests; however, no unit tests were created to catch
    this edge case
  fix: true
  fix_answer: The patch includes a new unit test to include testing the vulnerability
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    This appears to be a bug discovered by a django developer. Django has stopped
    creating Trac Tickets for their security issues, so it is difficult to figure out
    when and how this vulnerability was discovered.
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: 'There is no indication that this violated a set requirement

    '
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: 'This was the Component mentioned in the ticket that caused the issue.

    '
  name: middleware
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 434d309ef6dbecbfd2b322d3a1da78aa5cb05fa8
    note: |
      This appears to be the commit where the bug was introduced on April 27th 2015.
      This is an optimization #24720. When checking if the middleware should add a slash
      to a URL, it doubles the url resolution overhead. The solution was to move this check until
      later in the process
  - commit: f46a838efc9482c9c7834a83a152b57a56888fff
    note: |
      This was a change that occurred in November of 2016. This was a small change
      to how the the Append Slash works on urls with a trailing slash. This showed that
      the process was still being looked at; however, this did not uncover a security issue
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: This vulnerability did not involve any i18n
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: This vulnerability did not involve any ipc
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Part of the issue that caused this security vulnerability eliminated some input validation.
      This caused sections down the line that assumed the url had already been validated to redirect
      off site.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I would say that this is a mistake in the Requirements of the project. This
    bug was introduced via an attempted optimization. This optimization seemingly
    eliminated an important portion of the url validation. With a stronger understanding and
    set of requirements, the removed validation would not have been removed. In addition, this shows
    some of the issues of an open source project. The person who reported the initial
    optimization opportunity was also the person who committed the optimization and thus
    bug. If there was some more oversite or code reviews this bug may have been caught

    The solution was created in a way to allow the optimization to stay in place, while
    also eliminating the bug. This was done by adding input validation and checking for
    a specific scenario. This also included an additional test to check for this edge case
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 601
CWE_note: Open Redirect
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:N
