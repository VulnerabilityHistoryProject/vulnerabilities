CVE: CVE-2015-0220
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2014-11-18
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2015-01-16T16:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2015-01-16T16:59Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  Django provided a method in an attempt to combat issues with urls to prove
  they are safe, but it failed in this instance as this CVE allowed malicious
  users to manipulate urls (opening up cross-site scripting vulnerabilities) via
  changing the leading whitespace before the url's actual location. Once
  changed, the method would fail to catch urls that were unsafe due to the
  whitespace, and the url would be processed in the system.

  Essentially, when the method was run with a string like "\nthiswebsite.com"
  the is_safe method would return true (as accepted input). But that whitespace
  could allow a bad actor to do something along the lines of
  "\n BAD_CODE thiswebsite.com" and it would still say its safe even though its
  not.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 4c241f1b710da6419d9dca160e80b23b82db7758
  note:
- commit: 72e0b033662faa11bb7f516f18a132728aa0ae28
  note:
- commit: de67dedc771ad2edec15c1d00c083a1a084e1e89
  note:
vccs:
- commit: b2ae0a63aeec741f1e51bac9a95a27fd635f9652
  note: This VCC was discovered automatically via archeogit.
- commit: 7feb54bbae3f637ab3c4dd4831d4385964f574df
  note: This VCC was discovered automatically via archeogit.
- commit: 6072e108e2738dbde7c2ad976a45745551859a20
  note: This VCC was discovered automatically via archeogit.
- commit: a2f2a399566dd68ce7e312fff5a5ba857066797d
  note: This VCC was discovered automatically via archeogit.
- commit: 601107524523bca02376a0ddc1a06c6fdb8f22f3
  note: This VCC was discovered automatically via archeogit.
- commit: e7b0cace455c2da24492660636bfd48c45a19cdf
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    File /tests/regressiontests/utils/http.py includes base tests for the
    method to attempt to identifiy cross-site scripting attacks and block them
    via the method the CVE targets. Before this, no whitespace was considered.
  fix: true
  fix_answer: |
    File /tests/regressiontests/utils/http.py has line adjustments for the
    method to attempt to identifiy cross-site scripting attacks and block them
    via the method the CVE targets. This now has an additional test that has
    leading whitespace to the url before the check.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    Mikko Ohtamaa found the CVE in testing urls entered by a user for an
    application he was building. He found that leading whitespace before the
    urls allowed him to get a 'true' response from the method, leading to an
    potential for someone to complete a cross-site scripting attack if the
    developer relies upon this method and the leading whitespace cause
    unintended issues with verifying the url. This was reported on the official
    Django bug reporter on their website.
  automated: false
  contest: false
  developer: false
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    In my investigation I found no trace of a violation in the specification
    for either RFC, protocol, or requirements. It appears this method is only
    used for the internal location of the url, so there were little to no
    specifications on how the method was supposed to perform in terms of
    requirements or protocols.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: |
    The subsystem name comes from the path of the file. It appears that django
    uses a high level folder called django for their project, then uses
    multiple high-level subsystems to separate where the function is coming
    from. Within those subsystems are more subsystems with greater details
    for specifics of the Django framework. Since this was an http issue,
    it is located in the http subsystem under the utils subsystem. It appears
    all the methods here are, as the name suggests, utilities for http-based
    interactions in the Django library.
  name: http
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 4f6fffc1dc429f1ad428ecf8e6620739e8837450
    note: |
      It appears this commit is also targeting urls, specifically about
      underscores in headers.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    As this was whitespace in a url, general python language standards dictate
    to account for whitespace in input and is not added specifically to allow
    others to use the system. For example, in general when handling input, if
    someone enters " scott" in a name field, you often want to remove the
    leading space so their name appears as just "scott". This isn't verbal/
    spoken language specific, but a general python/programming language format.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    As this error was due to improper string sanitization, the CVE was not
    caused by or affected by the use of inter-process communication.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      Input should never be natively trusted, and in this case was never
      properly being verified.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: true
    note: |
      It appears the developers here only implemented a solution to the issue
      (removing leading and trailing whitespace) when it was necessary, rather
      than when it should've been there by default.
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    I believe the vulnerability was the result of a coding mistake. Generally,
    it is generally considered good practice in many languages, including
    python, to remove leading and trailing whitespace from strings. The fix
    for this vulnerability was to simply do just that via a method in python
    known as strip. This was addded to the string of the input url and was
    directly avoidable if proper coding standards of handling input strings
    were followed.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 354
CWE_note: |
  The method improperly approves the checksum (url) when leading whitespace
  is present.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Spacing Out on URLs
CVSS: AV:N/AC:M/Au:N/C:N/I:P/A:N
