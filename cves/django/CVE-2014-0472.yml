CVE: CVE-2014-0472
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2013-12-19
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-04-23T15:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2014-04-23T15:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  Django is a web framework that allows you to create Python classes/functions
  to process certain urls. To convert between the string of the url the user
  types in on their browser to the function/class that should handle the
  request, the Django urlresolver's reverse function needs to lookup the
  correct function/class. If A malicious hacker was able to insert malicious
  code into the application, they could use this inherent trust of the system
  to then look up the malicious code and run it using "dotted Python path",
  or in other words, path traversal.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo: https://github.com/django/django
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: c1a8c420fe4b27fb2caf5e46d23b5712fc0ac535
  note: This is a cherry-pick of the fix for Django 1.4.x
- commit: 2a5bcb69f42b84464b24b5c835dca6467b6aa7f1
  note: This is a cherry-pick of the fix for Django 1.5.x
- commit: 4352a50871e239ebcdf64eee6f0b88e714015c1b
  note: This is a cherry-pick of the fix for Django 1.6.x
- commit: 546740544d7f69254a67b06a3fc7fa0c43512958
  note: This is a cherry-pick of the fix for Django 1.7.x
vccs:
- commit: 8d48eaa064c88533be5082e3f45638fbd48491d8
  note: |
    This VCC was discovered automatically via archeogit. This one is laying
    the groundwork that will be part of the fix. It is starting to 'populate' the
    available url patterns that can be used in the app as defined by the
    developer, but they don't actually use them when looking up the
    view to render dynamically.
- commit: a63a83e5d88cd1696d1c40e89f254f69116c6800
  note: |
    This VCC was discovered automatically via archeogit. This one may have
    some interesting aspects to look into that are beyond my knowledge of the
    project. It's noted that this was a rewrite of the reverse URL parsing,
    which states it fixes a lot of little bugs. It removes the line that caused
    the problem in this CVE, which is good so they didn't have to fix it in
    multiple places, but it appears to be a byproduct of the refactor.
- commit: d7e81275242a8439768367059701baa00a9be996
  note: |
    This VCC was discovered automatically via archeogit. Tests on the
    url reverse module but not related to issue. Next one as well.
- commit: c01098e9cbd572eb2af97b938a7149e187561009
  note: |
    This VCC was discovered automatically via archeogit. This one did
    some work on _get_url_patterns. This might have been a good red flag as to
    why they weren't checking this function for when the user passed in a
    URL they wanted to visit. While this is getting the valid URL's instead of
    the valid views, it was a very subtle hint that they were checking some
    developer-defined parts of the application.
- commit: b4cdf4d111e2a536abddeb38d029e71bb0d41ddb
  note: |
    This VCC was discovered automatically via archeogit. This is doing
    work around the problem area if the returned view is callable or not, but
    not that the returned view is legit or not.
- commit: 5f5f1d913bbe25dd9a33a2759144160e1473c12a
  note: |
    This VCC was discovered automatically via archeogit. This is first
    location it may appear the problem happened, but this was a refactor
    of moving where the function lived.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    Yes this part of the code was unit tested. However, this 'edge' case wasn't
    tested since they failed to see this as a potential attack vector and
    therefore didn't test for it. However, there was still able testing for
    this module and subsystems.
  fix: true
  fix_answer: |
    They updated their tests to account for this attack vector, ensuring
    that view that weren't predefined by the developer were not executed
    at runtime to prevent arbitrary code execution.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    While it's unclear exactly how they discovered it (by accident or on
    purpose), it does appear to come from a single developer without indication
    of being automated or part of a contest. Developer was Benjamin Bach who
    gave initial report and started a patch, as he is called out
    in the blog post https://www.djangoproject.com/weblog/2014/apr/21/security/
    and git message on github
    https://github.com/django/django/commit/8b93b31487d6d3b0fcbbd0498991ea0db9088054#diff-9175699ac06dc9232104ec6e5ed9ce42R359
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: 'No indication of specification violation.

    '
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: |
    Found in a similar bug that happened because of this bug at
    https://code.djangoproject.com/ticket/22486, they were apart of the
    Core (URL's) component.
  name: Core URLs
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 8d48eaa064c88533be5082e3f45638fbd48491d8
    note: |
      This one is starting to lay down the idea of checking within the application
      for items that may be okay to reference as part of dynamically looking up
      URL's. In other words, they had the idea in their head when developing that
      while dealing with URL's, they should look at what was already defined the
      application statically before assuming they are okay at runtime. This would
      have been helpful for this type of issue.
  - commit: b4cdf4d111e2a536abddeb38d029e71bb0d41ddb
    note: |
      This is doing work around the bad line of code to check if the view that
      they found for this URL is callable. They were in the right mindset of doing
      validation checks on what they found (ex. that it's callable), but
      they still failed to check the integrity of that view that they found
      and if it's authorized to be running in the first place.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    While urls need to be i18n compliant, this was an issue regardless of the
    local as it still had to check the application predefined views to see
    if the found view was authorized to be called or not.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: Does not apply.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The system should be secure so that someone can't put arbitrary code
      in the system to begin with. However, it helps that they would need
      to hardcode their bad code to be accepted into the application then
      restart the python runtime to pickup the new config changes.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Usually URL's lead to other valid URL's. If a malicious actor leads
      to a malicious URL that leads to arbitrary code, we need to do more
      validation on what is inputted.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The biggest mistake was inherent trust of the system within any part of the
    server. So any runnable view that the Django application could access
    on the server could be run, whether intentionally or on accident. By
    using lessons that we learned in class about limiting the sandbox of
    the application and ensuring that you only run code within the bounds
    of the application path, it limits the attack vector by only running
    code that is within the code sandbox and therefore what the Developer
    intended to have run. It's more a design mistake than anything since
    it almost would never make sense to want to run Django view code
    outside the context of the application folder.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 94
CWE_note: |
  Closest one found after searching online. It's
  not necessarily code injection as the input doesn't contain the
  code, but it points to arbitrary code thta the developer didn't intend to
  have run. Additionally,
  https://nvd.nist.gov/vuln/detail/CVE-2014-0472 said it was CWE-94.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Arbitrary View Execution
CVSS: AV:N/AC:H/Au:N/C:P/I:P/A:P
