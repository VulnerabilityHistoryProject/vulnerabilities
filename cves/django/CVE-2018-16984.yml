CVE: CVE-2018-16984
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2018-10-02T18:29Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2018-10-02T18:29Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "There was a vulnerability in Django that caused the read-only password
  \nwidget that was used to obfuscate passwords to not work correctly for admin\nusers
  that had 'view only' permissions for users. As a result, those users\nwere able
  to see the entirety of arbitrary users' hashed passwords. If the \npassword hashes
  are weak, this could lead to user passwords and accounts \nbeing compromised.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: c4bd5b597e0aa2432e4c867b86650f18af117851
  note: "Fixed CVE-2018-16984 -- Fixed password hash disclosure to admin \n\"view
    \ only\" users.\n"
vccs:
- commit: f88c2f16e84703cff225e162297a6bcedebe8910
  note: This VCC was discovered automatically via archeogit.
- commit: 0207bdd2d4157c542c981264c86706b78ca246e9
  note: This VCC was discovered automatically via archeogit.
- commit: bcd9482a2019158f4580c24cd50ee8bfae9b2739
  note: This VCC was discovered automatically via archeogit.
- commit: b52c73008a9d67e9ddbb841872dc15cdd3d6ee01
  note: This VCC was discovered automatically via archeogit.
- commit: 3e8d8bb094b9f765d94ac033b9135bcb81b816d2
  note: This VCC was discovered automatically via archeogit.
- commit: 718a5ba1a1a77374c26b134ded46dab13776d1a1
  note: This VCC was discovered automatically via archeogit.
- commit: dce820ff70f00e974afd3e6e310aa825bc55319f
  note: This VCC was discovered automatically via archeogit.
- commit: dcee1dfc798bbf4602a35fb73f6acade9f5fd630
  note: This VCC was discovered automatically via archeogit.
- commit: 9e7f86b890a71bcc86ec7bcd9ee0c05801b5e807
  note: This VCC was discovered automatically via archeogit.
- commit: dde6288fbe97c7053e67b613fec3366f3c298cf4
  note: This VCC was discovered automatically via archeogit.
- commit: ede59ef6f39ff8a6443c2b24df0208ef6ec41ee0
  note: This VCC was discovered automatically via archeogit.
- commit: 0ed7d155635da9f79d4dd67e4889087d3673c6da
  note: This VCC was discovered automatically via archeogit.
- commit: fdf20093e0f8cd064673aa1597c20727ed4dd2a0
  note: This VCC was discovered automatically via archeogit.
- commit: 726ded5708e4e8767e69a6f6f6a039e75667ce03
  note: This VCC was discovered automatically via archeogit.
- commit: cf7894be88f6c27680ef80796b883f6e3b709b8b
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 12
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if were unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: "Yes, there were existing tests relating to authentication in \ntests/auth_tests/test_views.py
    There were also several existing tests that \nused the response from 'auth_test_admin:auth_user_change'
    to test various \nthings.\n"
  fix: true
  fix_answer: |
    Yes, a new unit test test_view_user_password_is_readonly was added to test
    and verify that the fix was working as expected.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    In the security disclosure located here
    https://www.djangoproject.com/weblog/2018/oct/01/security-release/
    a person named Phithon Gong is credited with reporting the issue. I
    searched for any bug reports or pull requests mentioning their name,
    but could not find any. They also were not in the list of contributors
    on Django's github repository. I was able to find this page here
    https://hackerone.com/phithon which seems to be a page from the same
    person and has an entry for Django from around the same time that this
    vulnerability was fixed, however it is marked as an 'undisclosed report'
  automated: false
  contest: false
  developer: false
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There were no mentions of specifications in the advisory, commit messages,
    or the CVE page.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: "I chose admin because according to the write up in the vulnerability\nadvisory,
    this issue was specific to admin users. \n"
  name: Admin
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The feature was not related to translation, typography, or anything else
    relevant to internationalization.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: 'The feature did not use any of the mentioned IPC categories.

    '
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: true
    note: |
      I believe that least privilege could apply here because the vulnerability
      was caused by admin users with view-only access being able to see hashed
      passwords. If there is no reason for the admin to be able to see the
      hashed password, then there isn't much point in them being able to see
      the obscured password either. It might be better if the password
      information was simply never sent to the view in any form.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies: true
    note: "The fact that the passwords that were exposed were hashed shows that the
      \ndevelopers at least had security by obscurity in mind.\n"
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: "This seems to have been a design issue with the 'user change form' screen
    \nthat admins have access to. Specifically, the view contains and displays \nmore
    information than is strictly necessary. If the admin does not have a \nreason
    to need to see the password of a user, then it would be better to \nnever send
    the password data to the view, whether it is hashed, obscured, or \notherwise.
    I am not sure how airtight the fix actually is. Part of it \ninvolved adding a
    hard-coded global variable, read_only=true, to the \nReadOnlyPasswordHashWidget
    class.\n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: CWE-522
CWE_note: "CWE-522 Insufficiently Protected Credentials was specifically mentioned
  on \nthis page https://nvd.nist.gov/vuln/detail/CVE-2018-16984 which was linked\nto
  from here https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16984\n"
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:L/Au:S/C:P/I:N/A:N
