CVE: CVE-2015-5964
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2015-07-09
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2015-08-24T14:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2015-08-24'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: Site running on Django could be crashed by a denial of service attack,
  by accessing a logout page without the proper credentials. This would result in
  denial of service by allowing a malicious actor to create an arbitrary number of
  empty sessions on the server, which could eventually cause a crash.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 2eb86b01d7b59be06076f6179a454d0fd0afaff6
  note: Adds unit testing to ensure this is fixed
- commit: 2f5485346ee6f84b4e52068c04e043092daf55f7
  note: Stops a new session from being created on logout
- commit: 575f59f9bc7c59a5e41a081d1f5f55fc859c5012
  note: Stops a new session from being created on logout
vccs:
- commit: 1101467ce0756272a54f4c7bc65c4c335a94111b
  note: This VCC was discovered automatically via archeogit.
- commit: 393c0e24223c701edeb8ce7dc9d0f852f0c081ad
  note: This VCC was discovered automatically via archeogit.
- commit: 31ec68c5d939ee63852709163750a0516aaa2619
  note: This VCC was discovered automatically via archeogit.
- commit: 0d48087a53c84eb109f6c85472530899dfc94fc8
  note: This VCC was discovered automatically via archeogit.
- commit: 5e8efa9a6032f9c4278199ab354c3ff742387263
  note: This VCC was discovered automatically via archeogit.
- commit: 8d4f79a799136edf8190c357e3e0497d7db3ad77
  note: This VCC was discovered automatically via archeogit.
- commit: '07889c13a63eeb3e8a73f1e02a21227def3ae548'
  note: This VCC was discovered automatically via archeogit.
- commit: c651b08f3981cb9c1e4631563675730a3577e0a9
  note: This VCC was discovered automatically via archeogit.
- commit: 26b61aa8131c2bce21be22aa4d00720d6c1326ad
  note: This VCC was discovered automatically via archeogit.
- commit: 44e6ce655291ea3bd5ff47c09754ef0fb998f36f
  note: This VCC was discovered automatically via archeogit.
- commit: a10fcbdb8b36e12fb839c7e760f047568877e9da
  note: This VCC was discovered automatically via archeogit.
- commit: 8c442f21dc7079a880eb626d20b84fc090563dff
  note: This VCC was discovered automatically via archeogit.
- commit: aeda55e6bffc3cfbf53698af398a19c1a0f02d46
  note: This VCC was discovered automatically via archeogit.
- commit: 5eece23296c481fc2f8b896b7d41e71bebe6114e
  note: This VCC was discovered automatically via archeogit.
- commit: 02a1b9a93e2ec7cc3bb87f2d38529b36eca65701
  note: This VCC was discovered automatically via archeogit.
- commit: 4d975b4f882eb2a68da02e069aa1debb99073497
  note: This VCC was discovered automatically via archeogit.
- commit: c817f2f5449058c2787298d984167bf590ca7967
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: Unit tests cover the affected code, but they were insufficent
  fix: true
  fix_answer: Unit test was added to ensure the fix was implemented properly, by
    ensuring no new records are created.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: Discovered and reported by Lin Hua Cheng and Eric Peterson, seemed to be
    independent reviewers that emailed the Django security team.
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: Not exactly, it falls under cwe-399, but it's not a spec violation
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: It's mentioned in the official release fixing the vulnerability, and it's
    where the empty session was being created.
  name: middleware
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 2e47f3e401c29bc2ba5ab794d483cb0820855fb9
    note: Interesting commit, because it seems to address a similar problem to this
      one, dealing with extra sessions being created on session load.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: This doens't have anything to do with the actual data being sent to the application,
    but just a way of accessing it in the first place.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: The communication involved wasn't interprocess, but just client-server, and
    it primarily related to a way to maliiously access the server.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: having a secondary system keep track of memory being allocated could have
      automatically fixed this vulnerability.
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: true
    note: if you deleted your own session token, this could trigger
  secure_by_default:
    applies:
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: Lack of thorough red teaming on part of the developers. This sort of thing
    might have been discovered if they intentionaly tried to break their software
    more.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 399
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: Attack is in Session
CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
