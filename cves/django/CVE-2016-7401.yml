CVE: CVE-2016-7401
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2016-10-03T18:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2016-10-03T18:59Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: "The cookie parsing code in Django when used on a site with Google Analytics
  \nallows remote attackers to bypass CSRF protection by setting arbitrary cookies.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt: 1000.0
  announced: 2016-09-26
  url: https://gist.github.com/nuthanmunaiah/fe6a7e8e3cc4dbae84dc
reviews: []
bugs:
- 93182
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: d1bc980db1c0fffd6d60677e62f70beadb9fe64a
  note: |
    The fix was to parse the cookies in a different manner checking
    for any invalid strings. Tests were added and updated.
- commit: 6118ab7d0676f0d622278e5be215f14fb5410b6a
  note: |
    The fix was to parse the cookies in a different manner checking
    for any invalid strings. Tests were added and updated.
vccs:
- commit: b4066d7d2149782cd694b98d1a6ed5c7ee885f55
  note: Moved cookie code out of __init__.py into request, response and utils.
- commit: 42c31f6bf036efd93c0311bc1f524b1553c20489
  note: Merged the CompatCookie and SimpleCookie classes.
- commit: '088f7170779b98547d9862603387afee77b964a8'
  note: Added the CompatCookie class to fix a bug when passing SimpleCookie.
- commit: 2659429df46d0d79ad7a93d50d0ccdab45b55b53
  note: "The original VCC modified how cookies were being passed in order to fix a
    \nbug that was preventing cookies from being passed through load.\n"
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 7
unit_tested:
  question: "Were automated unit tests involved in this vulnerability?\nWas the original
    code unit tested, or not unit tested? Did the fix involve\nimproving the automated
    tests?\n\nFor code: and fix: - your answer should be boolean.\n\nFor the code_answer
    below, look not only at the fix but the surrounding\ncode near the fix in related
    directories and determine if and was there were \nunit tests involved for this
    subsystem. The code\n\nFor the fix_answer below, check if the fix for the vulnerability
    involves\nadding or improving an automated test to ensure this doesn't happen
    again.\n"
  code: true
  code_answer: "There were unit tests for cookies originally, but they failed to catch
    this \nvulnerablility as they were not checking for this specific edge case and
    were \nnot checking for some invalid characters.\n"
  fix: true
  fix_answer: "The original unit tests were updated and three more unit tests were
    added to \nhelp ensure this doesn't happen again.\n"
discovered:
  question: "How was this vulnerability discovered?\n\nGo to the bug report and read
    the conversation to find out how this was\noriginally found. Answer in longform
    below in \"answer\", fill in the date in\nYYYY-MM-DD, and then determine if the
    vulnerability was found by a Google\nemployee (you can tell from their email address).
    If it's clear that the\nvulenrability was discovered by a contest, fill in the
    name there.\n\nThe automated, contest, and developer flags can be true, false,
    or nil.\n\nIf there is no evidence as to how this vulnerability was found, then
    please \nexplain where you looked.\n"
  answer: "Only information that could be found in the CVE and bug reports was the
    \ndevelopers name, Sergey Bobrov.\n"
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: "Nothing was found that indicated a specification or protocol was \nviolated
    in any of the bug reports, security reports, or commit\nmessages looked at.\n"
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: Cookie logic as seen in /django/http/cookie.py
  name: http
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: b4066d7d2149782cd694b98d1a6ed5c7ee885f55
    note: |
      Moved cookie code out of __init__.py back to where it was originally
      located. Curious to know why it was moved in the first place.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: There was nothing to show internationalization was an issue.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: There was not IPC communication for this vulnerability.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: true
    note: "Through bypassing CSRF protection attackers could access data that they
      \nshouldn't have been able to. \n"
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: "The cookies inputted should not have been trusted as it was and should
      have \nbeen checked/sanitized originally.\n"
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: "The main mistake that was made was that the input from the cookie was \nsimply
    trusted rather than being validated. Now that the cookie is \nvalidated and harmful
    characters are removed the risk has been mitigated.\n"
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 352
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:L/Au:N/C:N/I:P/A:N
