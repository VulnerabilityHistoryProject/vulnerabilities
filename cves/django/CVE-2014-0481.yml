CVE: CVE-2014-0481
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2014-08-03
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2014-08-26T14:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2014-08-26'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: There was a vulnerability in the file upload system in the way it handled
  uploading files when the file name already existed in the system. The behavior was
  that an underscore and a number would be appended, and the number would increment
  until the new file had a unique name. There was a denial of service when someone
  uploaded a group of files with the same name, as it contiunally incremented the
  count.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 30042d475bf084c6723c6217a21598d9247a9c41
  note: Fix for version 1.4.x
- commit: 26cd48e166ac4d84317c8ee6d63ac52a87e8da99
  note: Fix for version 1.5.x
- commit: dd0c3f4ee1a30c1a1e6055061c6ba6e58c6b54d1
  note: Fix for version 1.6.x
- commit: 3123f8452cf49071be9110e277eea60ba0032216
  note: Fix for version 1.7.x
vccs:
- commit: a08267bf6ad365f523c5c3c71ba995a3251f3a9e
  note: This VCC was discovered automatically via archeogit. This removed import-time
    dependencies, such as locks, file and file_move_safe
- commit: '090ff642043a2ca7d69e475f721eab4d68f6572b'
  note: This VCC was discovered automatically via archeogit. Escape special characters
    when querying for URL of an uploaded file.
- commit: 5366aa96fef0ce55fc425cf273c7debe74d99305
  note: This VCC was discovered automatically via archeogit. Generated sequential
    numbers after the underscore.
- commit: 59507753c7f098e98000459b2371becf0da18ff7
  note: This VCC was discovered automatically via archeogit. Generated the underscore
    in file names.
- commit: d228c1192ed59ab0114d9eba82ac99df611652d2
  note: This VCC was discovered automatically via archeogit.
- commit: f368c25f10f3dd3031f16b147dd814ba098884f5
  note: This VCC was discovered automatically via archeogit.
- commit: 35db9d58d691d90b0c33e18b613067609d9e638f
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: In "tests/file_storage/tests.py", there were related test cases for
    storage such as checking for race conditions when saving files, but the vulnerability
    was not tested.
  fix: true
  fix_answer: The unit tests that were added in the fix checks worst case behavior
    and logic for the exploited function. There were also checks for the number of
    times a function is called.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: The reporter, David Wilson, reported the findings. Though the original
    documentation of the bug report cannot be reached, the ticket created to do the
    work states that the test suite discovered the bug. Because Django's unit tests
    didn't detect it, I would guess that a developer from a team whose product uses
    Django discovered it.
  automated: true
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: This vulnerability came about from lack of testing rather than as
    a violation of a specification. If it didn't handle a file whose name existed
    already then I'd consider that a violation of a specification.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: The source code is under a directory titled 'files', while the tests for
    this code is under a directory called 'file_storage'.
  name:
  - files
  - file_storage
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 59507753c7f098e98000459b2371becf0da18ff7
    note: I found it interesting that the work from this commit is from a ticket
      that was reported due to file upload failures. This point, in addition to what
      could be argued as a change in functionality, would trigger some idea of testing.
      The field in the ticket, "needs test" was also marked no.
  - commit: 5366aa96fef0ce55fc425cf273c7debe74d99305
    note: The work done in this commit was for a ticket that interestingly had "needs
      test" set to yes. It appears that a test case was added to tests/modeltests/files/models.py,
      but it doesn't appear to be in the current code base. The test was uploaded
      to the thread on the ticket in May, 2009 so this may have been avoidable or
      at least caught earlier (the unit test that was submitted in the pull request
      associated with this ticket was slightly different than the one that was uploaded
      to the thread, and tested upload of three files versus the ten that the unused
      test case had).
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: The vulnerability pertains to file uploads rather than the accessbility of
    text.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: File upload doesn't involve inter-process communication.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
  dos:
    applies: true
    note: Not only was the vulnerability a denial of service, one of the things discussed
      in class for this type of vulnerability is black box testing, which there should
      have been more testing to have possibly prevented this from happening.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: It appears that miscommunication happened. The pull request that was submitted
    and is on GitHub contains code that is different than what someone had posted
    in the thread of the conversation of the ticket. It looks like the team had decided
    to hold off on the changes, and when the changes happened, it was almost a year
    later. This, in addition to the lack of sufficient testing, are the mistakes that
    I would say contributed the most to the vulnerability.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 646
CWE_note: The time it took to generate a new name for a large group of uploaded files
  by incrementing an appended string was the reason why the denial of service happened.
  Though it doesn't exactly follow what is described in the CWE, it is the handling
  and reliance on the file name that was the issue. The NVD lists CWE-399, resource
  management error, for this vulnerability.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname: 1File 2File RedFile BlueFile
CVSS: AV:N/AC:M/Au:N/C:N/I:N/A:P
