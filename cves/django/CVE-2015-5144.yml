CVE: CVE-2015-5144
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that the
  CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2015-06-29
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date. A good
  source for this is Chrome's Stable Release Channel
  (https://chromereleases.googleblog.com/).
  Please enter your date in YYYY-MM-DD format.
announced_date: 2015-06-29
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2015-07-14'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security.
description: "The vulnerability was in Django's built in validators, which are callables
  that \ntake in an input value and raises a ValidationError if the input does not
  meet the\nspecified criteria. The validators described in the vulnerability report
  was the\nfollowing - EmailValidator, URLValidator, the validate_ip4_address \n(validator
  for ip4 addresses), and the validate_slug validator (which validates the \npart
  of a url that is used when accessing a resource). \n\nThe specified validators above
  did not prohibit newline characters due to the\nusage of $ instead of \\Z in the
  regular expressions. Due to this, there was the\npossibility of header injections
  which would allow HTTP response splitting attacks\nvia a newline character since
  the validators accepted newlines in the input.\n"
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: []
repo:
fixes_vcc_instructions: |
  Please put the commit hash in "commit" below (see my example in
  CVE-2011-3092.yml). Fixes and VCCs follow the same format.
fixes:
- commit: 574dd5e0b0fbb877ae5827b1603d298edc9bb2a0
  note: Security fix for Django version 1.8 that prevents newlines from being accepted
    in some validators.
- commit: ae49b4d994656bc037513dcd064cb9ce5bb85649
  note: Security fix for Django version 1.7 that prevents newlines from being accepted
    in some validators.
- commit: 1ba1cdce7d58e6740fe51955d945b56ae51d072a
  note: Security fix for Django version 1.4 that prevents newlines from being accepted
    in some validators.
vccs:
- commit: 4e2e8f39d19d79a59c2696b2c40cb619a54fa745
  note: This VCC was discovered automatically via archeogit. adds email validator
    and error code
- commit: 2e65d56156b622e2393dee1af66e9c799a51924f
  note: This VCC was discovered automatically via archeogit. adds url validator improvement
- commit: 2f121dfe635b3f497fe1fe03bc8eb97cdf5083b3
  note: This VCC was discovered automatically via archeogit.
- commit: 98f13762d7e18c0ba12044eed56e9198ca056c66
  note: This VCC was discovered automatically via archeogit.
- commit: 1f8bb95cc2286a882e0f7a4692f77b285d811d11
  note: This VCC was discovered automatically via archeogit.
- commit: 4cfbde71a33973cb8c8da406b2523dfc742358e7
  note: This VCC was discovered automatically via archeogit.
- commit: 11b7b9ad0040cbe78d17514373475ee41179d3fa
  note: This VCC was discovered automatically via archeogit.
- commit: 66436ad171d8c442037bb03e9bc1a0f99e194ac8
  note: This VCC was discovered automatically via archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    There were unit tests specifically for the validators, but they were more focused on
    validating the different input values or updating validators with more input variations.
  fix: true
  fix_answer: |
    From looking at the code, it is clear that the code was tested and they added multiple tests
    for fixing this vulnerability.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please explain where you looked.
  answer: |
    Sjoerd Job Postmus discovered that the builtin validator components accepted user-supplied newline
    characters.
  automated: false
  contest: false
  developer: true
discoverable:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: There is no mention of a violation of a specification.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Most systems don't have a formal list of their subsystems, but you can
    usually infer them from path names, bug report tags, or other key words
    used. A single source file is not what we mean by a subsystem. In Django,
    the "Component" field on the bug report is useful. But there may be other
    subsystems involved.

    Your subsystem name(s) should not have any dots or slashes in them. Only
    alphanumerics, whitespace, _, - and @.Feel free to add multiple using a YAML
    array.

    In the answer field, explain where you saw these words.
    In the name field, a subsystem name (or an array of names)

    e.g. clipboard, model, view, controller, mod_dav, ui, authentication
  answer: |
    The vulerability belongs in the validation subsystem since the components it affects are all
    built-in validators of Django and validate the input rather than authenticating the user input
    data.
  name: validation
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
  commits:
  - commit: 4cfbde71a33973cb8c8da406b2523dfc742358e7
    note: |
      This commit involved fixing an issue in the emailValidator to reject a trailing dot.
      I just thought this was interesting because the vulerability fixed here and this vulerability
      both fall under XSS vulerabilities. It seems evident that there has been input tests judging by
      the test data mentioned in the commit, yet none of them seemed to have found this vulnerability.
      It was a developer that ended up discovering the vulernability.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The feature impacted by the vulnerability was validators which do not really have to do with
    internationalization.
sandbox:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: This feature does not use any IPC messages since it's only about the validators
    of the inputs.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Attackers are able to access information or cause denial of service by getting past
      validators in the form of a normal input.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Coding mistakes were made attributing to this vulnerability. If the
    developer caught the mistake early on when they created and tested the
    validators, this mistake would not have been made.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 20
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, use that. Must be under 30 characters.
  Optional.
nickname:
CVSS: AV:N/AC:M/Au:N/C:N/I:P/A:N
