CVE: CVE-2013-4394
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces
  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. 
  Set the version number that you were given in the instructions. 
   
  This will enable additional editorial checks on this file to make sure you 
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated. 
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.
  Please enter your date in YYYY-MM-DD format.
reported_date: 2012-10-12
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.
  This is not the same as published date in the NVD - that is below.
  Please enter your date in YYYY-MM-DD format.
announced_date: 2013-10-28
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2013-10-28
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
  Your target audience is people just like you before you took any course in
  security
description:
  A function within systemd existed for selecting keyboard locales.
  When accessed by the administrative authentication function
  to change a particular privilege, it could be 
  intercepted to allow all local users in the group the ability
  to elevate their privilege through the usage of vectors.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs and/or pull requests are involved in this vulnerability? 
  For systemd, this is typically their GitHub issues, but could also include 
  bugs from other databases. Put a URL instead of a single number.
bugs: 
- https://bugzilla.redhat.com/show_bug.cgi?id=862324
- https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=725357
fixes_instructions: |
  Please put the commit hash in "commit" below.
  This must be a git commit hash from the systemd source repo, a  40-character 
  hexademical string/
  Place any notes you would like to make in the notes field.
fixes:
- commit: 0b507b17a760b21e33fc52ff377db6aa5086c680
  note: Based on patch mentioned in https://cgit.freedesktop.org/systemd/systemd/commit/?id=0b507b17a760b21e33fc52ff377db6aa5086c680
- commit: 8d789b905dba8aebd30238520b6ad52fb866af95
  note:
    Based on patch mentioned in https://cgit.freedesktop.org/systemd/systemd/commit/?id=8d789b905dba8aebd30238520b6ad52fb866af95
vcc_instructions: |
  The vulnerability-contributing commits.
  These are found by our tools by traversing the Git Blame history, where we 
  determine which commit(s) introduced the functionality. 
  Look up these VCC commits and verify that they are not simple refactorings, 
  and that they are, in fact introducing the vulnerability into the system. 
  Often, introducing the file or function is where the VCC is, but VCCs can be 
  anything. 
  Place any notes you would like to make in the notes field.
vccs:
- commit: 7640a5de1b3ffe6547200ad204d14e4f067caf4f
  :note: Refactoring and additions to code - unrelated to problem
- commit: 1dfa7e79a60de680086b1d93fcc3629b463f58bd
  :note: Discovered automatically by archeogit.
- commit: 1822350db15b089f094a6dbd2469842ab42c1d87
  :note: Introduced the method that deals with variable vc_keymap. Introduces the problem to system.
- commit: d200735e13c52dcfe36c0e066f9f6c2fbfb85a9c
  :note: Discovered automatically by archeogit.
- commit: 89f134406af6a4b4c7493f624a89dcd654b48e81
  :note: uses the state of the keymap to access more functionality - furthering the problem
- commit: 6091827530d6dd43479d6709fb6e9f745c11e900
  :note: Discovered automatically by archeogit.
- commit: 25ea79fe0756c3c46a16c0c19bf3380a30382a1c
  :note: Discovered automatically by archeogit.
- commit: 825c6fe5eb362437aa46faa52b683a62eede9a13
  :note: Discovered automatically by archeogit.
- commit: 87d2c1ff6a7375f03476767e6f59454bcc5cd04b
  :note: Discovered automatically by archeogit.
- commit: 4b8772bf5f2887aa2bdb74efa2f5dfd40fff946d
  :note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.
  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 13
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    For code: and fix: - your answer should be boolean.
    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.
    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: false
  code_answer:
    In the commits within the timeframe, it is apparent
    that there are automated unit tests being created and conducted. Most of which
    are related to the parent function where the problem stems from but nothing
    that tests or fixes the actual CVE.

  fix: false
  fix_answer:
    There is no evidence to suggest that the current and previous tests
    regarding keymap utils exist to test against an override like
    the CVE promoted. 

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The automated, contest, and developer flags can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: 
    The vulnerability was discovered on or before 2012-10-02 by Florian Weimer,
    Red Hat Security Team.
  automated: false 
  contest: false
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.
    Examples for true answers: SQL injection, XSS, buffer overflow
    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.
    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.
    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
    As described in the bug note by Jan Lieskovsky
    (https://bugzilla.redhat.com/show_bug.cgi?id=862324#c0)
    This was found by performing sanitization of provided X keyboard
    (XKB) layouts. There was not proper filters made for the layout.
    Once passed through it can use injection to commit the violation.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.
    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * pull request
      * mailing lists
      * anything else
    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: No mention in any of the listed places.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in? These are subsystems WITHIN systemd
    Two areas to look:
      - Bug labels
      - Directory names
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. 
    Example systemd subsystems are:
      * fsck
      * apparmor
      * fstab
      * sd-daemon
    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/
    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
    - pkla
    - xkb
    - vconsole
  note:  Seems to mostly be based around xkb
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Use this to specify any commits you think are notable in some way, and
    explain why in the note.
  commits:
  - commit: 1822350db15b089f094a6dbd2469842ab42c1d87
    note:
      This is the commit that introduced the method and problem to the
      system. Interesting to see how much went into the method.
  - commit: 89f134406af6a4b4c7493f624a89dcd654b48e81
    note:
      This uses the state of the keymap which is introduced to the
      above commit. Quite possible that this could further complications.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?
    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.
    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note:
    This feature uses X Keyboard Extension (XKB)
    to introduce locales for different
    regional keyboard types/makes/models/languages to the system. 
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides? 
    A sandboxing feature is one that allows files, users, or other features 
    limited access. Vulnerabilities that violate sandboxes are usually based on 
    access control, checking privileges incorrectly, path traversal, and the 
    like.
    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note:
    This vulnerability was introduced through the means of 
    vectors and injection
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.
    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note:
    Directly - most likely not. But if the person can elevate their
    privileges through these means than perhaps it may be used to do so.
discussion:
  question: |
    Was there any discussion surrounding this?
    A discussion can include debates, disputes, or polite talk about how to 
    resolve uncertainty.
    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?
    Just because you see multiple comments doesn't mean it's a discussion. 
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)
    Check the bugs reports, pull requests, and mailing lists archives.
    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false
    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security: false
  any_discussion: false
  note:
    There was no real discussion regarding this problem
    it was noticed, and fixed quite fast. The only real mention
    for this problem was that it was addressed in the newest
    version of Fedora.
    https://bugzilla.redhat.com/show_bug.cgi?id=862324#c12
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for 
    another's work?
    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request
    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: false
  note:
    I did not see anyone commenting on how the problem
    was fixed or any vouching. 
stacktrace:
  question: |
    Are there any stacktraces in the bug reports? 
    Secondly, if there is a stacktrace, is the fix in the same file that the 
    stacktrace points to? 
    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.
    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
  note: None of the bug reports had stacktraces
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?
    A "forgotten check" can mean many things. It often manifests as the fix 
    inserting an entire if-statement or a conditional to an existing 
    if-statement. Or a call to a method that checks something.
    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value
    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: The problem was solved by removing an entire conditional statement
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of 
    operations?
    This means the fix involves moving code around or changing the order of 
    how things are done. 
    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: The fix involved removing code
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note:
      There should always be checks for 
      vectorized inputs and introduce sanitizations for instances such as this.
      Distrust all input going in especially with a system such as this. 
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: true
    note:
      It is debatable whether the conditional for checking was actually
      required or not. Considering the fix was to remove
      the check (removing the conditional) it may have never been required to get
      the functionality required. 
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    There can, and usually are, many mistakes behind a vulnerability.
    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn’t consider the 
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design
    These are grey areas, of course. But do your best to analyze the mistakes 
    according to this framework.
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
    The main mistake made was one of execution and how input is handled.
    This specific type is a planning error. An assumption is that there was 
    originally no reason to check for input at this stage in development
    considering the choices were to pick keyboard locales. Along with this, it
    is believed that the team may have not expected vectors to be used to gain
    access to the system further within this location.

    One thing to consider as well, is the lack of unit tests.
    It is evident that tests for the function exist but there
    are no checks or assertions for vectors at this level.

    The fix is interesting as it was the deletion of a small code block.
    It proves that simplicity can have large impacts on bigger
    projects such as systemd. Both good and bad.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.
  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.
  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE: 159
CWE_note:
  Involves not properlyfiltering, removing, quoting or managing 
  special elements (vectors)
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname: Keybord Locale Injection
