CVE: CVE-2020-1712
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. 

  Set the version number that you were given in the instructions. 
   
  This will enable additional editorial checks on this file to make sure you 
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated. 
curation_level: 1
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2020-01-23
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: 2020-02-05
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2020-03-31
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A heap use-after-free vulnerability was found in systemd,
  where asynchronous Polkit, a component for controlling system-wide privileges in Unix-like functioning systems,
  queries are performed while handling dbus messages. Dbus messages is a message-oriented middleware mechanism
  that lets intercommunication between multiple processes running concurrently on the same machine.
  A local unprivileged attacker can abuse this flaw to accident systemd services or
  potentially effect code and raise their privileges by forwarding particularly crafted dbus messages.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs and/or pull requests are involved in this vulnerability? 

  For systemd, this is typically their GitHub issues, but could also include 
  bugs from other databases. Put a URL instead of a single number.
bugs: https://bugzilla.redhat.com/show_bug.cgi?id=1794578
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character 
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit: 1068447e6954dc6ce52f099ed174c442cb89ed54
  note: This CVE has 4 commits related to it 637486261528e8aa3da9f26a4487dc254f4b7abb
- commit: 637486261528e8aa3da9f26a4487dc254f4b7abb
  note: Please check out this commit, which may lead to 4 more.
- commit: bc130b6858327b382b07b3985cf48e2aa9016b2d
  note:
- commit: ea0d0ede03c6f18dbc5036c5e9cccf97e415ccc2
  note:
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we 
  determine which commit(s) introduced the functionality. 

  Look up these VCC commits and verify that they are not simple refactorings, 
  and that they are, in fact introducing the vulnerability into the system. 
  Often, introducing the file or function is where the VCC is, but VCCs can be 
  anything. 

  Place any notes you would like to make in the notes field.
vccs:
- commit: f8f3f9263e51db180bd78a5f3b152aefd25427ee
  :note: Discovered automatically by archeogit.
- commit: 2b4a65b66813b01aa56e6f11643017d3fef55b06
  :note: Discovered automatically by archeogit.
- commit: 7a77d2a41cb651adc3bbbee39dc73acacdfe1d60
  :note: Discovered automatically by archeogit.
- commit: c4e48030cf299b56668b1cd360c4ec93e7f97b20
  :note: Discovered automatically by archeogit.
- commit: de1c301ed165eb4d04a0c9d4babe97912b5233bb
  :note: Discovered automatically by archeogit.
- commit: 766c580959336be16f7c724b158f8e8fbaba2e9a
  :note: Discovered automatically by archeogit.
- commit: f7fce3454c221fd1fff51528d028576d1cb1c7b6
  :note: Discovered automatically by archeogit.
- commit: 19befb2d5fc087f96e40ddc432b2cc9385666209
  :note: Discovered automatically by archeogit.
- commit: caa829849d6ac9f6e173f585f732054358311ae1
  :note: Discovered automatically by archeogit.
- commit: 269e4d2d6b75329ae39a71ebe2c14500e03cda95
  :note: Discovered automatically by archeogit.
- commit: 7f56982289275ce84e20f0554475864953e6aaab
  :note: Discovered automatically by archeogit.
- commit: f4425c72c7395ec93ae00052916a66e2f60f200b
  :note: Discovered automatically by archeogit.
- commit: 95f82ae9d774f3508ce89dcbdd0714ef7385df59
  :note: Discovered automatically by archeogit.
- commit: 20d4b10116f0eb2c5a1cd974d09049eb59a0d157
  :note: Discovered automatically by archeogit.
- commit: 5c1163273569809742c164260cfd9f096520cb82
  :note: Discovered automatically by archeogit.
- commit: 1068447e6954dc6ce52f099ed174c442cb89ed54
  :note: Discovered automatically by archeogit.
- commit: 637486261528e8aa3da9f26a4487dc254f4b7abb
  :note: Discovered automatically by archeogit.
- commit: 5c23128daba7236a6080383b2a5649033cfef85c
  :note: Discovered automatically by archeogit.
- commit: f00ded93e04af7a6a1d4502f7a0b87d65cf0cdb7
  :note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    There is a set of unit tests, but it did not seem to catch this vulnerability.
  fix: true
  fix_answer: |
    The commit that contained the issue fix had also included updated unit tests to catch
    any other similar vulnerabilities.
    File with updated unit tests ->
    https://github.com/systemd/systemd/blob/ea0d0ede03c6f18dbc5036c5e9cccf97e415ccc2/src/shared/bus-polkit.c
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: Was found by a Tavis Ormandy (Google Project Zero)
  automated: false
  contest: false
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    This seemed to be an issue with how the dBus was written and could have not been
    found through a fuzzer.
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * pull request
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: No mention of above specifications in bug report.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in? These are subsystems WITHIN systemd

    Two areas to look:
      - Bug labels
      - Directory names

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. 

    Example systemd subsystems are:
      * fsck
      * apparmor
      * fstab
      * sd-daemon

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok

  name:
    - polkit
    - dbus
  note: |
    Described as a polkit issue that affected the dbus system as well.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.
  commits:
  - commit: bc130b6858327b382b07b3985cf48e2aa9016b2d
    note: renamed a typo in a function. This commit was interesting because it is always fun to see how long a misnamed method
      lasts in a codebase.
  - commit: 1068447e6954dc6ce52f099ed174c442cb89ed54
    note: introduce API for re-enqueuing incoming messages. This commit was interesting because the fix allowed for
      better debugging.
  - commit: 637486261528e8aa3da9f26a4487dc254f4b7abb
    note: when authorizing via PK let's re-resolve callback/userdata instead of caching it. This commit was interesting
      because although it was related to the bug, it was actually updating the code overall.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: None of above are relevant for this issue.
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides? 

    A sandboxing feature is one that allows files, users, or other features 
    limited access. Vulnerabilities that violate sandboxes are usually based on 
    access control, checking privileges incorrectly, path traversal, and the 
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: polkit is a subsystem that provides sandboxing-like functionality
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: The buginvolved dBus which is a middleware for communicating with concurrent processes.
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to 
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion. 
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.

  discussed_as_security: false
  any_discussion: false
  note: |
    There were discussions purely about reporting and updates on the status of the
    fixing of the bug, but no debates or disputes.
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for 
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: true
  note: There most likely was a pull request for the submitting the fix which usually requires
    the approval of another member of the repo.
stacktrace:
  question: |
    Are there any stacktraces in the bug reports? 

    Secondly, if there is a stacktrace, is the fix in the same file that the 
    stacktrace points to? 

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
  note: No stacktraces were presented in bug report
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix 
    inserting an entire if-statement or a conditional to an existing 
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: It seemed the solution was more complicated than just adding an additional check. There was additional checks
    added, but new functions were added to simplify code and add new functionality.
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of 
    operations?

    This means the fix involves moving code around or changing the order of 
    how things are done. 

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: No order of operations fixes were in the commits.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies: true
    note: |
      Specially crafted dbus messages could be used to elevate privileges.
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn’t consider the 
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes 
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer: |
    This was mostly a maintainability/design flaw. It seems the queue functionality
    was forgetting additional authorization that must have been forgotten about until 
    the vulnerability 
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE: CWE-763
CWE_note: involves the use-after-free vulnerability which causes this bug
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname: Fancy dBus Crash
