CVE: CVE-2013-2134

security_bulletin: S2-015

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 20

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2013-06-05

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2014-09-04

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  By using wildcard matching (using a generic case that will match if a specific case is not provided),
  an attacker can execute (inject) Java code that is not in the source code.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: 01e6b251b4db78bfb7971033652e81d1af4cb3e0
    note: Action names' whitelisting
  - commit: 54e5c912ebd9a1599bfcf7a719da17c28127bbe3
    note: Removes double evaluation of parsed expression
vccs:
  - commit: 34af1cd8a212b366565c4d1888dc5f2504efd000
    note: Double evaluation of parsed expression

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    After using grep to look through some of the struts source code,
    it didn't look like there were much automated unit tests in the code before the fix,
    and even after the fix, there didn't seem to be much automated testing.
    It was mostly just some standard cases that were written up in a main function.
  code: false
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    Jon Passki from Coverity Security Research Laboratory reported directly to security@struts.a.o ,
    Original blog post is unavailable, but if assumed to be on the same day as the report then the date is as follows
  date: 2013-06-05
  automated: false
  apache: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Struts 2.0.0 - Struts 2.3.14.2, dispatcher, mapper
  name:
    - dispatcher
    - mapper

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    There were many commits between the VCC and fix(es) and most of them were uninteresting,
    however I came across a few that were similar to the one below,
    and they were focused on creating a RegexFieldValidator,
    which is something that they similarly used for their fix.
  commits:
    - commit: 9d10ca7a9b347f7f8d62ae7cfb490b78ffcce947
      note: Just a reference to the RegexFieldValidator.
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: The solution to this vulnerability was to not trust input and to not only check it against regex but also check it against a whitelist.
  security_by_obscurity:
    applies: true
    note: |
      It wasn't obvious that you could exploit this type of feature,
      and is not readily provided to the public, which is the obscurity,
      but obiously it would not have been useful to allow attackers to inject their own code in.
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: true
    note: It's possible that the developer working on this code base just assumed that the code would be default secure and went about developing it in a way that allowed for the vulnerability to occur.
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    I think that the mistake that was made here was the lack of consideration for unsanitized inputs.
    If there was consideration for the fact that a wildcard action would allow for attackers to send in unsanitized and unmonitored inputs,
    the developers would have coded more defensively to begin with.
    So in short it was a design mistake to allow this layer of code to be directly interacting with inputs that were not sanitized.
    In the design phase, a defense layer where inputs could get sanitized before being sent to the rest of the code should have been brought up.
