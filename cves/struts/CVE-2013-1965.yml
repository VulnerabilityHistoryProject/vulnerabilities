CVE: CVE-2013-1965

security_bulletin: S2-012

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: OGNL Injection via Double-Eval

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 917

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2013-05-22

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2013-05-22

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability was in the XWork core library of Struts 2. OGNL code--an expression
  language which can get and set fields and call methods in Java--could be injected
  as a parameter name.  Although this was partially handled in earlier bug fixes
  (S2-003, S2-005, and S2-009), these fixes did not account for a specific case in
  which the parameter name could still be evaluated as OGNL code during a redirect,
  a sort of double-evaluation.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: [S2-012]
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: 7e6f641ebb142663cbd1653dc49bed725edf7f56
    note: Eliminates double evaluation by disabling OGNL evaluation by default
  - commit:
    note:
vccs:
  - commit: 0c543aef318341ca9bd482e15f1637497b8a4dfd
    note: Move XWork core under Struts 2
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit: cc6edbb49a31e06b7fbf3b2a9e97f898e677e9b5
    note: Security fix for S2-009
  - commit: 3008f2609e59c9aba7ead68c7be6fdcb075520f6
    note: Updated accepted parameters
  - commit: 0c367776762b25c567b415ac4c2b0e48042cf34f
    note: Updated accepted parameter names
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 10

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    Looking at the codebase, it is clear that the vulnerable code is tested, but
    no test changes were made for the fix.
  code: true
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This was discovered by Xgc Kxlzx, a third-party security developer. It is unstated
    on the CVE page and bug reports how the vulnerability was discovered.
  date: 2013-05-22
  automated: false
  apache: false
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on bug reports, comments, and commit messages.
  name: xwork-core

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    Only one commit touched the main file in question and was interesting. Other commits
    made minor changes to logging and exception handling.
  commits:
    - commit: cc6edbb49a31e06b7fbf3b2a9e97f898e677e9b5
      note: |
        This commit was the primary attempt to solve this issue prior to the final fix.
        It added code to check if a tree is an OGNL eval statement, but, ultimately, it
        did not cover the case which caused this vulnerability.

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      The eventual fix for this vulnerability was simply to disable OGNL evaluation
      by default because sanitizing the parameter names was not sufficient. This
      a two-layered security system for this vulnerability.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Even when you expect input to be dirty and try to sanitize it, creative
      cases may still exploit it. Even sanitized input is sometimes untrustworthy,
      such as the parameter names in question.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      The eventual fix for this vulnerability was simply to disable OGNL evaluation
      by default, making the most secure option the automatic one.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The problem which caused this vulnerability was one of design. The conclusion
    eventually reached was that OGNL evaluation in XWork core simply cannot easily
    be implemented in a secure manner. After multiple attempts to sanitize input,
    the solution was to just disable OGNL evaluation by default.

    Additionally, the multiple attempts at fixes show that testing may not have
    been thorough enough to push those fixes to production. New edge cases kept
    popping up and requiring small adjustments until this final solution was
    reached.
