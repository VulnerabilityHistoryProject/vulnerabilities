CVE: CVE-2012-4386

security_bulletin: S2-010

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Session Attribute CSRF

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 103

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2012-08-03

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2012-08-31

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The validation which checks tokens in Struts was insufficient, allowing
  a malicious user to craft a CSRF attack by adding a token of their choosing
  to the URL. This token would then be saved to the system without any error
  checking.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: 1081c52be93abfd2f33ba8453c676e3edcedec8b
    note: Decoupled token names from sesson attribute names
  - commit:
    note:
vccs:
  - commit: c01d3a92db7f71f751a0522912d24bcf4a94a1b0
    note: Initial import of WebWork 2
  - commit: f0d11d7c1db988741727ad23d5a30a7acac5325f
    note: FreeMarkerResult renders temp page

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 6

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    There are unit tests for this module but they did not appear to provide any
    benefit to finding this vulnerability. The vulnerability was introduced by
    code written in 2006 and 2009, yet the vulnerability lay dormant until
    mid-2012. The unit tests were updated after the fix was implemented, but
    no new tests were added. The changes modified the tests to input test
    values in the format used by the updated code.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    All evidence indicates that the vulnerability was discovered by Rene Gielen;
    he issued the commit to fix the bug, and created the August third security
    bulletin covering this issue.
  date: 2012-08-03
  automated: false
  apache: true
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    This vulnerability existed in the Interceptor module.
  name: interceptor

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer:
  commits:
    - commit: 32bc45dc42e57f4b488d147d687627017ed9626d
      note: |
        This commit claims to "fix" the ExecuteAndWaitInterceptor, but
        this doesn't fix CVE-2012-4386. It appears that another bug
        entirely was addressed by this commit claiming to "fix" the
        entire class.
    - commit: 05cca5c546e39626dc155bc558112911bb165561
      note: |
        This commit adds code to make the ExecuteAndWaitInterceptor aware
        of session tokens. It is unclear what difference this makes, as the
        original code already makes use of session tokens, but this adds
        another usage of Struts' session tokens to the class.

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
        This lesson is failed simply because the program failed to fully validate
        EVERY input. The token names are considered to be parameters manipulated
        only by the system itself, so it is reasonable that (somewhat arbitrarily,
        because a user can simply edit them in a browser's URL bar) a developer
        might fail to validate them.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: true
    note: |
        HTTP URIs are incredibly complex, as it is a nonstandard language. It is
        reasonable (but still bad) for a developer to write software which fails
        to fully account for all valid URIs, and filter URIs which are malicious or
        incorrect.

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The thing that stuck out to me about this vulnerability is that the attack
    vector does not come from a user parameter. The attack occurs when a user
    takes a value set by the developer (the name of a URL query parameter) and
    hijacks it, setting it to a new, specially-crafted value which creates a
    Cross-Site Request Forgery. It is important to note that even though the
    developer chooses query parameter names, these can be modified with a few simple
    keystrokes in a browser's address bar, and so should also be validated.
