CVE: CVE-2016-4465

security_bulletin: S2-041

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 626

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2016-05-02

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-05-02

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  In APACHE Struts 2, there is the potential for a denial of service attack due to
  an unhandled exception. The vulnerability occurs in the built-in URL validator, 
  when an attacker chooses to input a null value for the URL field, it will 
  cause the server process to overload and crash due to the unhandled exception. 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: eccc31ebce5430f9e91b9684c63eaaf885e603f9
    note: Improved validation RegEx. Struts 2.3.X
  - commit: a0fdca138feec2c2e94eb75ca1f8b76678b4d152
    note: Improved validation RegEx. Struts 2.5.X
vccs:
  - commit: 31be88afa28fb9b1e9854d0d7673ab9b979cf9be
    note: Introduced vulnerable Regex.
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability? 
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 5

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    It does look like there were unit tests that tested this URL regex validation, 
    as there was an assert changed to check for new functionality. 
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    I could not find any evidence as to how the vulnerability was found. I checked the CVE
    itself, which had no comments. I then went to each individual link on the CVE page, and
    only one link had any coversation about the vulnerability. In this link, the bugzilla.redhat
    link, there was a man named Adam Mari≈° who made the report stating that the vulnerability 
    existed and nothing else. However this was over a month after the vulnerability was filed 
    on the CVE website, so he could not have been the one to discover it.
  date:
  automated:
  apache:
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    This vulnerability existed inside of the java source code's validator subsystem. It
    is inside of a directory of multiple validators, and it is inside of a URL validator that 
    checks to make sure the URLs being entered are correct.
  name: /core/.../validator/validators/

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    When I tried to check for all commits on the impacted files between the VCC and fixes,
    there were only 2. One of them had information about dropping a deprecated API, and
    the other had to do with outside packages into struts. Neither of these I found very 
    "interesting".
  commits:
    - commit:
      note:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      This is a classic case of distrust input. The vulnerability existed due to 
      an input not being properly sanitized, thus allowing a denial of service attack
      to be possible.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The input that allowed for this vulnerability is immensely complex. There is a 
      very large number of combinations that make up valid URLs, and the URLValidator class
      needed to have an incredibly complicated regular expression to handle improper input.

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    This was definitely a coding mistake. Whoever created the regular expression to attempt
    to sanitize the input for URLs just forgot (or wasn't able) to check for all possible 
    improper inputs. The CWE recommended mitigation for this vulnerability is to sanitize 
    all incoming input strings so that they do not allow null bytes and/or null characters 
    to get through. The trouble with this originally is due to the very complex nature of possible
    valid URLs, meaning that creating a regular expression to check for all improper URLs is a 
    fairly daunting task. To prevent this issue in similiar situations in the future, I would 
    recommend to create a list of all blacklisted symbols, phrases, and/or possible malicious
    inputs, then test each one against the created regex to verify it sanitizes the input correctly.
