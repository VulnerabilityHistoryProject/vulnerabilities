CVE: CVE-2017-9793

security_bulletin: S2-051

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: RESTless

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: CWE-20

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2017-06-21

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2017-09-05

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability is located in the REST Plugin of Apache Struts, which provides
  the ability to interface with other web applications. The REST Plugin is using an
  outdated XStream library (provides serializing objects to XML) that is vulnerable
  to DoS. The DoS is achieved through a crafted XML payload. This vulnerability affects
  Apache Struts versions 2.3.7 to 2.3.33 and 2.5 to 2.5.12. See CVE-2018-1327 and CVE-2017-9805
  for similar vulnerabilities.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: 677ccebe83d159d7c0a2274af703a7cc752a04b3
    note: Update xstream lib Struts 2.3.X
  - commit: 287e3bc8cbd66fdda04b075bc96362bfd3e2dce9
    note: Adds new methods and marks current as deprecated 2.3.X
  - commit: 2776b34b44808f2a4ce2c6fee3c2f3a586bc55b0
    note: Adds abstract layer to handle API change 2.3.X
  - commit: 103e3b174e497bbe7058919f12b9f48a0ddf6de3
    note: Updates flow to handle new API 2.3.X
  - commit: 6dd6e5cfb7b5e020abffe7e8091bd63fe97c10af
    note: Defines allowed classes per action 2.3.X
  - commit: 8216ec1c4d2d1f558558b2464bbcdcd1efe86bc7
    note: Update xstream lib Struts 2.5.X
  - commit: 2f690cfe6260ccdf3aa617baf65a4b836c49cf65
    note: Adds new methods and marks current as deprecated 2.5.X
  - commit: 3bd072ca053aed787f3a16865266d8832fcd18b0
    note: Adds abstract layer to handle API change 2.5.X
  - commit: a64da53d5770c5404ee5eb390b826f5733171f5f
    note: Updates flow to handle new API 2.5.X
vccs:
  - commit: 6229ad7a4726717bf594e9b4e4afa90e1e028829
    note: Moved Rest plugin into trunk

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 1

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: No unit tests were involved in the fix for this vulnerability.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer:
    This vulnerability was reported by two employees from Huawei Technologies, Huijun Chen and Xiaolong Zhu,
    who reported several different DoS vulnerabities found in multiple Apache Products.
  date: 2017-09-05
  automated:
  apache: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Dependencies XML
  name: ./pom.xml

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer:
    The highlighted commit was very important to the fix because it implemented an abstract layer that would
    facilitate any API changes or version updates without a lot of overhead. It is clearly seen through the
    following commits that the workload to address any other depencies update was much more seamless. Thus, this
    commit was crucial in order to correct these types of vulnerabilities way more efficiently.
  commits:
    - commit: 2776b34b44808f2a4ce2c6fee3c2f3a586bc55b0
      note: Adds abstract layer to handle API change 2.3.X

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note:
      Since this vulnerability is exploited by a DoS attack using malicious request with specially
      crafted XML payload that takes advantage of one of the program's plugin dependencies, its clear that
      this vulnerability correlates with the concept of distrustful input.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer:
    This vulnerability was exploited due to an outdated library dependency that
    the REST Plugin on this application utilizes. The ideal scenario to avoid this sort
    of vulnerability is to restrict the use of third party dependencies, this can be mitigated
    by either redesigning the architecture of the plugin or attempting to design an internal library
    that was thorougly tested before production. It is always important to be wary of third-party
    dependencies which are constantly targeted by attackers, especially for open source software like Struts.
    In addition, if trust boundaries were implemented where the application would validate input that affects
    critical system functions, and deny anything that is not trustful this type of vulnerability could have
    been avoided.
