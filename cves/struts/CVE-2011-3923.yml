CVE: CVE-2011-3923
security_bulletin: S2-009
nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: OGNL Remote Code Execution
CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 94
curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1
reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2012-01-22
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2012-01-20
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  Apache Struts' ParameterInterceptor class did not properly handle specific 
  user supplied inputs from HTTP requests. The improper handling of requests 
  allowed for a remote user to bypass security measures, and perform an exploit of 
  this vulnerability by using OGNL (Object-Graph Navigation Language) expressions 
  to modify server-side resources and potentially run arbitrary Java code on the 
  target system.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: cc6edbb49a31e06b7fbf3b2a9e97f898e677e9b5
    note: |
      Implemented the fixes outlined in the security bulletin (S2-009). Several 
      xwork2 changes were made to fix the issue.
  - commit:
    note:
vccs:
  - commit: 0c543aef318341ca9bd482e15f1637497b8a4dfd
    note: Moved XWork core under struts 2
  - commit:
    note:
incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:
upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    The fix that was committed for the vulnerability shows 32 insertions for a
    test class. Although the commit URL 404s when trying to reach the page, 
    with the amount of additions, I'd assume a new test was written and others 
    were modified.
  code: true
  fix: true
discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    A member of the Google Security team was the first to report the issue and made 
    a post on Blogger detailing the vulnerability and how to recreate it.
  date: 2012-01-22
  automated: false
  apache: false
  contest: false
subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based on the paths of the changed files in the fixing commit
  name: xwork2
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    Between the VCCS and the committed fix there was typical development and maintenance on
    on the Struts project. Significant changes such as prepping for new releases (Commit 133ca637f),
    upgrading to a new DTD version (Commit 970251ff9), and the moving of plugins into the trunk 
    branch (Commit 26f25f1d5) took place in the time between the VCCS and the committed fix.
  commits:
    - commit:
      note:
    - commit:
      note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Since the HTTP paramaters were not being properly escaped, OLGN function calls
      able to be made. If the inputs were being validated/sanitized, this would've been
      avoided entirely.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The vulnerability is centered around OGLN, and injecting OGLN function calls into
      TTP requests within a struts application. OGLN itself is a complex language
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    I feel as if the mistakes that were made that led to this vulnerability
    were based in coding. The developers simply forgot to handle an edge case,
    which was the presence of parentheses to construct and make OGLN 
    calls. The chosen CWE for this vulnerability (CWE-94) marks input validation
    and testing as a couple of the possible mitigations, and in the case of this
    CVE, the struts development team were already doing both, just not to the 
    degree that was required to handle this vulnerability. Tests existed for this
    area of the code and some other characters were also blacklisted from requests,
    just not the characters that were needed to fully elminiate the possbility of
    malicious OGLN code execution.
