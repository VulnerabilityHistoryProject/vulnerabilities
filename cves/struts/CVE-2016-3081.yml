CVE: CVE-2016-3081

security_bulletin: S2-032

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 77

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2016-04-22

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-04-22

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A remote user is able to execute arbitrary code on a targeted system. This is
  possible when Dynamic Method Invocation is enabled and performed through 
  "method: prefix". This provides an attacker the ability to pass a malicious
  expression into user input to gain access to the system due to the lack of 
  sanitization. In this case, dynamic method invocation is when HTTP parameters
  are prefixed with "method:". In other words, an attacker can specify what method
  the system should execute specified in the URL. This vulnerability is classified 
  as high severity and can be solved by disabling dynamic method invocation when possible.

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: c48007cccc4a8007005eec782902c1f38e683438
    note: Blocked chained expressions 2.3.28.x
  - commit: 47da9c9f52bab960ff745e06adb3a32917698c9e
    note: Blocked chained expressions 2.3.24.x
  - commit: 98eb21ae8528dd5fdc3f76ed9ade897a1c679131
    note: Blocked chained expressions 2.3.20.x
vccs:
  - commit: c01d3a92db7f71f751a0522912d24bcf4a94a1b0
    note: Initial import of WebWork 2
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    I can see that there were tests made in the three fix commit hashes in the
    Java file, OgnlUtilTest.
  code: true
  fix:

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    The vulnerability was first reported by Nike Zheng at dbappsecurity.com.cn. I'm not 
    sure if this is how Zheng discovered the vulnerability, but a Metasploit module exploits
    the vulnerability through remote code execution. Metasploit is a penetration testing
    platform that finds, exploits, and validates vulnerabilities.
  date: 2016-04-15
  automated:
  apache: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: The OGNL system for Apache Struts, an expression language for Java
  name: core/src/main/java/com/opensymphony/xwork2/ognl

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    When I looked at the commits between the VCC and fixes, I noticed that there's
    many commits that have "prepare for next development iteration" and "prepare
    release STRUTS_2_3_xx". It's a constant cycle of that with another commit in
    between that makes changes to a number of files.  
  commits:
    - commit: 94c44626588cbafc39507550ea37fab2b679d7d1
      note: One of the prepare for next development iteration commits
    - commit: 8a59ed02c958db9213f0e54d816882a902891761
      note: The "prepare release STRUTS_2_3_xx" commit associated with the one mentioned above

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Based on the definition of remote code execution, a way to protect against it is to fix
      the holes that allow an attacker to gain access. Having multiple layers of defense
      in the system prevents an attacker from being able to elevate their privileges and gain
      control.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability occurs due to the lack of input validation allowing an attacker
      to submit malicious expressions to the system. Having input validation/sanitization
      can help prevent an attacker from gaining access to the system to execute arbitrary
      code.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    I think this vulnerability is the result of a design mistake. This vulnerability
    occurs when attackers execute a command that gives them a capability that they 
    otherwise would not have. An attacker submits a malicious expression to the system,
    and if successful, could execute arbitrary code through dynamic method invocation.
    For this particular problem, disabling dynamic method invocation will solve the
    problem. In general, a mitigation is to assume that all input is malicious and use 
    an "accept known good" input strategy. Reject input that does not conform to specifications,
    or modify it into something that does.
