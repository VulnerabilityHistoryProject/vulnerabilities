CVE: CVE-2016-3090

security_bulletin: S2-027

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: OGNL Injection

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 94

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-03-22

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This type of attack is specifically targeting the flexible nature of Expression
  Languages to inject and execute arbitrary code on a system.  Expression Language
  is a scripting like language that allows you to access java methods in a similar
  way that you would normally, i.e. with the "." syntax.  Apache has made an
  Expression Language that is mainly meant to access data within an object using
  getters and setters called OGNL (Object Graph Navigation Language).  OGNL is
  built off of a framework called ANTLR which is a parser that can help you create
  simple languages.
  The issue with OGNL and other such Expression Languages is that they are very
  flexible and are prone to injection attacks.  The place these types of languages
  are used most often is in templating languages like JSP. JSP allows you to use
  OGNL to access internal object data that can be injected in the HTML created by
  JSP.
  Typically, this isn't an issue for injection attacks, becaues user input does
  not affect the templating languages (or anything else using Expression Languages),
  however it is possible for a developer to evaluate OGNL with some user provided
  variables through string concatenation.  If this is done, the sanitization of the
  input becomes very complicated and hard to determine what should actually be sanitized
  because the precise sanitization depends on the project.
  Although it is hard to find an example of the type of injection used in this vulerability,
  it has to do with the underlying ANTLR framework.
  OGNL is a very exploitable language if it is not used carefully, and it even played
  into the equifax breach (CVE-2017-5638).

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: f420f28466cb82915defc4e12466b298c275abaf
    note: Improved regex
  - commit:
    note:
vccs:
  - commit: 5649ff1ac5a04389e3a1c8aa47ad7673a66ed48f
    note: Initial permissive regex
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability? 
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    The original code was unit tested, however there were several test cases missing
    from the unit tests that could be exploited.  The fix also updated these unit tests
    to include the new test cases.  A unit test was also created that automatically
    combines different elements of the input that should be sanitized to allow for more
    robust testing.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
    This vulnerability was discovered by the Huawei PSIRT Team, a branch of Huawei dedicated
    to finding security vulnerabilities.  There is not much information associated with the
    discovery of this vulnerability, other than the team reported the vulnerability to Apache.
  date:
  automated:
  apache:
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: |
    The XWork2 subsystem is basically the core of the struts framework, it is what controlls
    the actions flow of the system and follows the structure of the command design pattern.
    OGNL is used in this subsystem for type conversion and property validation, however none
    of the OGNL used by apache has any user input associated.  This issue is strictly if a
    developer using the framework uses the OGNL features themselves.
  name: XWork2

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    There were no commits to the file where the fix occured between the VCC and the fix.
    In the VCC, the list of sanitized regular expressions was combined into a single one.
    This may be slightly faster, however it makes the list much less readable and harder
    to maintain.
    Technically, this vulnerability has existed since Struts 2.0 due to it being a design
    flaw.  See the mistakes section for more information.
  commits:
    - commit:
      note:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies: true
    note: |
      This vulnerability would not exist if there was not a way to go around the
      struts framework and access the OGNL framework directly.  OGNL is very
      vulnerable on its own so Struts should do as much as it can to secury any
      input being passed to it.
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The method that is in question should not trust anything passed to it.  There
      is evidence that this was taken into account, but was not thought out as fully
      as it should have been.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The inputs to a system depend on the specific implementation, but the more complex
      the inputs, the more likely there is to be a vulnerability related to this one.

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    This issue that is presented is mainly an issue due to adding more classes / sensitive
    information in the future without remembering to update the list of sanitized inputs
    for a method that access this information based on inputs.  This is overall, a design
    mistake.  The list of sensitive data should not be updated separately and isntead should
    be maintained when the senstive data is added.
    A way to do this might be through the use of annotations, the list of sanitized data can
    be automatically determined based off of annotated fields of the object being accessed.
    This could be a great feature of OGNL, ignoring any fields (or getters/setters) that are
    annotated with a certain annotation, then the issue of sanitization might not even be
    an issue.  This may however not fix the issue since it is hard to know exactly what type
    of input caused this vulnerability in the first place, this is just based off of the new
    unit tests added in the fix.
