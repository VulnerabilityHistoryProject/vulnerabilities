CVE: CVE-2015-5209

security_bulletin: S2-026
# https://nvd.nist.gov/vuln/detail/CVE-2015-5209
# https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5209

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Remote Manipulation of Struts

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 470

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2015-09-06
# https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=61317918

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The Struts server was not performing adequate input validation on request
  parameters.  This allowed a remote user to create a request referencing a
  object that represents the root of the execution context.
  
  A remote user could use this root object to bypass security restrictions 
  and perform remote code execution on the Struts server.  This includes 
  modifying the internal state of the target application, affecting container 
  settings, or altering user sessions.

# https://cwiki.apache.org/confluence/display/WW/S2-026

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:

bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: f420f28466cb82915defc4e12466b298c275abaf
    note: Updated regex
  - commit:
    note:
vccs:
  - commit: 5649ff1ac5a04389e3a1c8aa47ad7673a66ed48f
    note: Initial regex
  - commit:
    note:

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability? 
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit:
    note:
  - commit:
    note:
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    Automated unit tests were used to test the original input validation for the
    project.  However, the vulnerable parameter ('top'), was not being tested
    against in the unit test or being filtered out by the regular expression 
    used for input validation.  The fix for the vulnerability involved adding
    unit tests to check that vulnerable parameter ('top').

  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: |
      It appears that the bug report for this vulnerability was never
      disclosed; only the security bulletin afterward.  There is no issue in the
      Apache Jira that is related to this vulnerability.  The initial date of
      discovery and the method of discovery/how it was discovered is never
      disclosed.  It appears that the Struts project has a private mailing list
      for security concerns, so it's likely it was reported there and not
      disclosed publicly until the Struts team did themselves.
  date:
  automated: false
  apache: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Based off of the package name of changed files in the bugfix commit.
  name: xwork2

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: |
    Initially, the only changes between the VCC and the vulnerability bugfix were 
    the changing of logging utilities from an internal utility to log4j and
    removing the String and Pattern type declarations from the HashSet 
    constructors 
    (com.opensymphony.xwork2.security.DefaultExcludedPatternsChecker, 
    line 52 and lines 56-57).  
    
    The commit before the bugfix involved merging the xwork packages into struts.
    Then on the bugfix, the vulnerability was fixed and xwork was placed back into 
    its original package.
  commits:
    - commit:
      note:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The vulnerability was exposed because the input validation used did not
      account for a critical property that provides universal access to the 
      application.  Specifically, their blacklist regex did not check for that
      property in the input, and trusted that the user would not attempt to 
      access this parameter.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      Struts directly maps request parameters and their values to their
      cooresponding field in the Action class model using Java reflection.
      Since any value can be used for the field name or value (other than a
      reserved Java word, because the class would not compile), the input 
      validation cannot easily be whitelist-based without putting siginificant 
      restrictions on the naming and convention of Action classes' fields.  
      This results in a large variety and complexity of input that cannot be 
      validated easily, resulting in vulnerabilities such as this one.

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    The mistake made that led to this vulnerability was likely a requirements 
    misunderstanding or omission, as the actual code for input validation
    appears to work as expected. Since the processing of request parameters 
    allows for access to critical application state, a cleverly-made request 
    could access and modify this state.  The fix made for this vulnerability
    looks proper, and has additional unit tests to check for that specific
    vulnerability.
    
    In the future, this could be prevented by designing the system to only allow
    reflection from HTTP parameters on those explicitly specified in the code,
    require parameters to conform to a framework-defined whitelisted format, or
    have a well-defined blacklist that contains all critical objects that could
    be accessed.

    As of now, the project is performing both input validation as well as 
    attack surface validation by knowing to check both request parameters as 
    well as cookies.
