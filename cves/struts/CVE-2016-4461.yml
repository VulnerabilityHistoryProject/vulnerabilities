CVE: CVE-2016-4461

security_bulletin: S2-036

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Forced Double OGNL Evaluation

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 20

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2016-05-02

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-06-17


description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Struts-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Struts would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  This vulnerability stems from improper input validation within Apache Struts
  in relation to OGNL, more formally known as Object Graph Navigation Language.
  OGNL is an expression language used to access and mutate Java Object properties,
  as well as interact with other forms of metadata.
  In this instance, OGNL's expression evaluation operator "%{}" can be used to force
  double evaluation of a Struts data object attribute. Double evaluation is when an expression string is
  evaluated as code such that its output is also evaluated as code. Without a defined base case, this
  process can recurse indefinitely.
  With respect to Apache Struts, a malicious actor can provide a string containing "%{}" that,
  when evaluated at a later point in time, forces double evaluation. In the event a malicious actor
  encodes program instructions within their provided string input, this vulnerability allows for
  arbitrary code execution within the system.
  It is important to note that this vulnerability stems from an incomplete solution to a prior issue
  in Apache version 2.3.28, classified as S2-029 in Apache's wiki (CVE-2016-0785). 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the SVN commit number in "commit" below, and any notes about how this
  was discovered in the "note" field.
fixes:
  - commit: 9ac863b339a3513dabd417f4be8a802418a997ba
    note: Introduces more restrictive SMI (Strict Method Invocation) - ActionConfig.java
  - commit: 016b8eedd5ca47fce95e2a16069e640e3842906d
    note: Adds additional blocked classes - struts-default.xml
  - commit: f238cf4f1091be19fbcfd086b042c86a1bcaa7fc
    note: Uses isSequence flag to block chained expressions - OgnlUtil.java
  - commit: 27ca165ddbf81c84bafbd083b99a18d89cc49ca7
    note: Throws away methods that don't match pattern for allowed actions - DefaultActionMapper.java
  - commit: 9b34a28190b71f73c26564ce06139aa4e4861e18
    note: Disallow dot (.) in action name - DefaultActionMapper.java
  - commit: 7da4ef39023bb5d86509d65565a04b533e8b4c55
    note: Introduces new callMethod() function to execute actions (cherry pick commit b28b78) - DefaultActionInvocation.java, OgnlUtil.java
vccs:
  - commit: f54afdc3f441dc48d012aebd3cbbdcd542811cee
    note: Initial implementaiton for allowed methods when executing OGNL actions. Probable root cause component of predecessor vulnerability CVE-2016-0785 due to lackluster input sanitization.
  - commit: 61a7ee296161bbfa61e90871649598a2e4a680a2 
    note: Sign of early efforts to mitigate double evaluation by disabling the evaluation expression altogether. This underscores issues with OGNL's evaluation expression during S2-029. 
  - commit: 15857a69e7baf3675804495a5954cd0756ac8364
    note: Enables expression evaluation and storage without input validation 

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fixes for the same issue before and after
  this CVE below.
previous_fixes:
  - commit: 4271682d2b944e9022e4e4c499df43e0ce7e58fd
    note: Restores excluded classes to structs-default.xml, reverting prior change that allowed these classes.
  - commit: 23a0c9eb643c41f800dc43159672dd31a6159472
    note: Fixes SMI with ActionConfigMatcher (WW-4596) for stricter action execution
future_fixes:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: Fixes either introduced new tests or refactored legacy tests to account for changes.
  code: true
  fix: true

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Apache
    employee (you can tell from their email address). If it's clear that the
    vulnerability was discovered by a contest, fill in the name there.
    The "automated" flag can be true, false, or nil.
    The "apache" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you may
    leave the entries blank except for "answer". Write down where you looked in "answer".
  answer: Reported by Alvaro Munoz (alvaro.munoz@hpe.com) 
  date: 2016-05-02
  automated: false
  apache: false
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged. Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: Action Config, Struts Default Config, OGNL Util class, Default Action Invocation
  name: ognl

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this section
    by explaining what happened between the VCCs and the fix.
  answer: the following are interesting due to ther role in preventing this vulnerability from reoccuring.
  commits:
    - commit: 02b207fca529627f3a34660de86b51444461a7d2
      note: Allows developers to redefine regex used to match allowed methods when SMI is disabled.
    - commit: 6da61ffdd7577ebaa43ced8189cc971519950b0b
      note: Turn on SMI by default
    - commit: bb9df6c7d3d499d09d6406397aacb12e455d2852
      note: Improved logging to assist with tracking allowed methods
    - commit: 0d92fd0ee5d4c23aabe7bf3c2ef1b30ff3e5c00d
      note: Add allowed methods to ActionBuilder to assist with mitigating illegal expressions
    - commit: dd3b80f2be6feb72de808087edcf7914e9d5bb6b
      note: Add GlobalAllowedMethods getter to PackageConfig and modified getActionConfig method in ConventionUnknownHandler
    - commit: 1afb48aa765a96a9d183bb4ac249bfcc8f7daf3a
      note: Adds more informative messages when method is not allowed, addresses WW-4640
    - commit: a0fdca138feec2c2e94eb75ca1f8b76678b4d152
      note: Improves validation RegEx for URLs
    - commit: bb22c585b5b52967fab033dba02cd244cd5b5b7a
      note: Apache Struts version 2.3.29 RELEASE

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: Lack of input sanitizaiton beyond initial input collection shows lack of defense in depth.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies: true
    note: Failure to consider ramifications of expression evaluation syntax such as "%{}"
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: Lack of overall input sanitization for expression evaluations
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: Failure to consider malicious use of forced expression evaluations using OGNL "%{}" syntax.
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: Nature of forced double evaluation is a result of the complexity of inputs offered by OGNL's syntax

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those in the software
    engineering industry would find interesting.
  answer: |
    Overall, this vulnerability stems from failure to consider the security principle of "secure by default".
    Failure to consider malicious use of the OGNL language, especially when forcing expression evaluations 
    using "%{}" syntax, shows that adequate threat modeling was not done in preparation for integrating with this feature.
    Likewise, failure to account for potential malicious inputs when executing expressions signifies a lack of
    consideration for the increased attack surface that results from complex inputs.
    Considering the predecessor issue "S2-029" was supposed to be fixed in the version 2.3.28 release, the
    fact that the same issue re-appeared as "S2-036" proves a lack of understanding in regards to the core issue.
