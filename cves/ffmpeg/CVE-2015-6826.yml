CVE: CVE-2015-6826
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2015-09-06T02:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2015-09-06T02:59Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A user could pass a carefully crafted RealVideo file (RealVideo being a video
  file format) to FFmpeg and, because some fields of a certain struct were not
  initialized, the user could cause a crash, leading to a denial of service 
  attack due to invalid pointer access.

  It has been theorized (but never tested in practice) that depending on how
  the input file was crafted, there could be other consequences of exploiting
  the vulnerability.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 3197c0aa87a3b7190e17d49e6fbc7b554e4b3f0a
  note: Original fix commit for v2.8
- commit: 05684cee424a6e440c6757d224a748a2ffe87dde
  note: Backport of fix to v2.7.2
- commit: 620b3e680c388af7dd4a2ef2eb9544dc9cbdc092
  note: Backport of fix to v2.6.4
- commit: 8696762b9a3b66b7dac4bd7b8022a4ba0f72153a
  note: Backport of fix to v2.5.8
- commit: 24f1698758f0bd2ed5968cde35ce96ad58ba4c8d
  note: Backport of fix to v2.4.11
vccs:
- commit: 2bd730010da24d035639586bb13862abe36cc1b8
  note: |
    This commit removes all the code that was initializing (or freeing) the
    struct fields in the function in question and does not include a
    replacement, leaving the initialization/allocation state of the fields
    undetermined. Interestingly, a helper function for freeing these exact
    fields was added in the same commit - and even used in other parts of the
    code - but not used here.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    While the file in question was under fairly active development by 
    multiple developers during the three years between the VCC and fixes, the
    function in question was not substantially updated, and there were no
    breaking changes to the file as a whole. Therefore, the lifetime of the
    vulnerability was rather uneventful as far as the file is concerned.

    The project as a whole made some substantial moves during this period,
    however. Some points of note would be the release of version 2.0 in 2013,
    the discovery that their issue tracker was susceptible to the notorious
    OpenSSL vulnerability Heartbleed in 2014, and having to change server
    hosts for their project right before the push of the fixes. Also, soon
    after the fixes, Michael Niedermayer (also the committer of the fixes)
    resigned as leader of the project; it would be reasonable to assume that
    there was some inner conflict on his part in the months leading up to his
    resignation.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: No unit or regression tests were found.
  fix: false
  fix_answer: No unit or regression tests were found.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    No evidence of the discovery was found after looking through every
    discoverable reference to the CVE, every discoverable security advisory,
    and the development IRC logs from July 2015 up to the push of the original
    fix commit.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Since the vulnerability was exploitable by a specifically crafted file,
    it's reasonable to assume that a fuzzer could have discovered the file.

    Also, given that multiple fields in a struct were left uninitialized,
    compiler warnings may have revealed them if configured to do so.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    No specification violations are mentioned in the relevant commit messages
    or security advisories for package updates.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: The CVE itself specifies a function in this library.
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The vulnerability was in an audio-video decoder, which is agnostic to
    internationalization concerns.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    The vulnerability is in a decoder that runs as part of a larger transcoding
    or playing process, so its I/O is intra-process.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Especially given that there were theoretically additional unidentified
      exploits of this vulnerability, applying Defense in Depth would have
      helped to avoid further manipulation of the system as a whole if the
      vulnerability was indeed exploited.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      According to the CVE itself, Distrust Input applies here because input
      validation could have caught the manipulated file and kept it from
      crashing the system.

      This report comes to the conclusion that the core issue was not input
      validation but rather field initialization (see the 'mistakes' and 'CWE'
      sections). Nevertheless, distrusting input could have been a possible
      mitigation.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerability was likely caused by a lack of understanding of the
    system coupled with a lack of robust regression testing, which would have
    potentially caught the vulnerability the moment it was introduced.

    The function in question was stripped of a lot of its functionality in the
    VCC, but nothing equivalent to the stripped functionality was reintroduced.
    A greater understanding of the system as a whole would likely have revealed
    that there was a possible thread of execution that did not initialize or
    free the struct fields anywhere else.

    It is also interesting to note that the fix did not suggest a sufficient
    understanding of the code, either. The VCC itself included a helper
    function that appears to do exactly what the fix accomplished, but the
    helper function was not used in either the VCC or the fix within the
    function in question.

    The CVE is classified as an input validation vulnerability, but the fix
    does not include any improved input validation. However, the fix appears
    to have resolved the core issue in spite of this: it fixed the improper
    pointer access case in the uninitialized struct fields instead of
    introducing input validation to simply avoid the case.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 457
CWE_note: |
  The CVE is officially classified as a CWE-20 (input validation)
  vulnerability, but in this case any input validation to catch this
  vulnerability would just have been compensating for the field initialization
  issues. CWE-457 (use of uninitialized variables) seems to be more
  representative of the core issue, so this report disagrees with the CVE here.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:


CVSS: AV:N/AC:L/Au:N/C:P/I:P/A:P
