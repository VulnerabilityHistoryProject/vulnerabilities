CVE: CVE-2013-2277
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2013-02-21
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2013-02-27T16:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2013-02-27T16:55Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  This vulenrability was in h264_ps.c that does not validate the relationship 
  between the depths of luma and chroma. H.264 is the codec that is widely used
  with penetration in streaming video markets, broadcast, etc. Codec is a device
  or program that compresses data to enable faster transmission and decompresses
  received data. In video, luma represents the brightness of the pixel and 
  chroma represents the color information. They are typically paired up. The 
  existing check in libavcodec in FFmpeg before 1.1.3 is not validating if the
  depths of luma and chroma do not match. 

  The way this could be exploited is that an attacker can cause a denial of
  service due to out-of-bounds array access. At best, the application will
  crash. At worst, there will be unspecified impacts through crafted H.264 data.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: bdeb61ccc67911cfc5e20c7cfb1312d0501ca90a
  note: 'Fix in the most recent version.'
- commit: ''
  note: ''
vccs:
- commit: e162733dcd217baa9e478818727fdda5cca28d03
  note: Identified by archeogit,
- commit: 889fce8e306f15a223d13f8c0dbb211ec4b52fd0
  note: Identified by SZZUnleashed
- commit: ''
  note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    The lifetime of this vulnerability was about 2 years. It went through big
    changes as there were lines of code that handles the input cases. Some of
    the examples from the commits include decoding of images when compression
    changes, out-of-bounds array access, buffer overflow, etc.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: |
    It is not clear that the code was unit tested in the source code.
  fix: false
  fix_answer: |
    It is not clear that the fixed code was unit tested in source code.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    It is not clear how the vulnerability was discovered by looking at the 
    commit message and the code change in the commit. 

    One possibility might be that there was a crash due to out of array
    accesses. Also there might have been a developer who faced an error and had
    to look for required specification for the depths of luma and chroma.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    It is plausible that a fully automated tool can discover this vulnerability.
    This type of vulnerability can be found through a tool like fuzzer in that
    the depths of luma and chroma can be printed out to validate if they match
    through fuzzer. It also can be discovered from the compiler warnings when
    the application crashes due to invalid values handling which can be 
    resulted in out-of-bounds array access.

    SQL Injection, XSS, and buffer overflow can be used to discover this
    vulnerability by inputting the mismatched depths of luma and chroma which
    will clearly show that there is a mismatch for the values that should be
    matched in order for the application to work properly.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    It is a violation of requirements specification in that the code does not
    validate if the depths of luma and chroma match or not which is a crucial
    measure for the application to work properly without a denial of service
    due to application crash.
  answer: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: |
    Git commands like git show and git log display the files that were fixed.
    From those commands using commit hashes, it is clear that the subsystems
    are avcodec.
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits: 
  - commit: 2e988fd689642899927707a084bf40dc1326dc90
    note: |
      In the commit message for this commit, it says "Use a safer check for
      encrypted streams". This commit is to protect its users' credential by
      checking if the stream is encrypted or not. 
  - commit: fbcc584d3abba475c49091ea304222a92b626026
    note: |
      This commit is aiming to avoid out-of-buffer access and crashes with too
      big values by using named options and adding missing checks on matrix
      zise values. It is handling the input validation in order to avoid errors
      that can cause from not properly checking the input values. 
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: true
  note: |
    internationalization is involved in this vulnerability since the video
    related service is used all over the world and it is possible that this
    vulnerability can cause denial of service which blocks people to use the
    system. 
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    IPC is involved in this vulnerability since if the depths of luma and
    chroma do not match, it might cause a video to not show what it is supposed
    to be showing such as colors of pixel. It will block the ipc to correctly
    output what it is intended to be displaying. 
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      As this vulnerability is about not checking the variables specifically,
      Distrust Input concept is necessary for not handling inputs properly. The
      code is supposed to check all the specific variables that are used in 
      order for the system to work as intended.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Lack of specification led to this vulnerability when checking the depths of
    luma and chroma. Lack of understanding might also apply to this
    vulnerability since the developer of this original code did not come to
    take care of illegal bit depth value handling for luma and chroma. 
    Input Validation can help mitigating this vulnerability by having developers
    assume that all inputs are malicious so that they can reject inputs that are
    not specified and sufficiently handled.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: Other
CWE_note: |
  This vulnerability is classified as CWE-Other because it only uses a subset of
  CWE for mapping instead of entire CWE, and the weakness type is not covered 
  by that subset.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.

nickname: Luma and Chroma Mismatched

CVSS: AV:N/AC:L/Au:N/C:P/I:P/A:P
