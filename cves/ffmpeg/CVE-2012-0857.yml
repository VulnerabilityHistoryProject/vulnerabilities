CVE: CVE-2012-0857
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2012-08-20
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.
announced_date: 2012-08-20T19:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2012-08-20T19:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A library function #get_qcx(..., int n, ...), in libavcodec, is responsible
  for decoding the quantization parameters for a jpeg2000 / "J2K" datastream.
  In simple terms, these byte-for-byte parameters specify how to compress the
  image. Note the fix was likely just responding to a warning, as no code flows
  (in the code at the time) would have permitted this overflow to occur.

  The parameter of interest in this vulnerability is "n". This variable is the
  length of the quantiziation parameter that was last read in merely adding a
  check if n was greater than 96 (larger than the bounds of the array it reads
  values into), then this overflow would occur. However, due to the fact that
  "n" is constrained by "bytestream2_get_be16u"'s return value, it can only
  range from 1 to 16, depending on the bitlength of the input. Overall, it would
  seem this was not truly a vulnerability to begin with, but rather something
  that could have become a vulnerability in the future.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
  - commit: 282bb02839b1ce73963c8e3ee46804f1ade8b12a
    note: ''
  - commit: ''
    note: ''
vccs:
  - commit: 83654c7b1b598add9041c7add6b77478eb91177f
    note: Identified by archeogit,Identified by SZZUnleashed
  - commit: ''
    note: ''
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    VCC Date: Mon May 23 23:13:34 2011 +0200
    Fix Date: Sat Dec 24 06:17:12 2011 +0100
    Lifetime: ~7 months

    All maintenance code committed were signed by a single developer
    (michaelni@gmx.at), which were added to fix code initially made by
    (rukhsana.afroz@gmail.com). Many of these signed commits did not have an
    attributed author, meaning we're left to assume the signer is responsible
    for these commits (we can't know who else made them!). The initial code was
    introduced as "shouldn't be left to rot" on another repository,
    and from there received nothing but bugfix commits (sometimes addressing
    the same issue) up until the final resolving commit. The project itself was
    largely undergoing frequent changes after the initial 0.5.0 release (where
    their beta versioning started taking off).
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: |
    No automated unit/regression tests nearby (possibly related:
    avcodec/tests/jpeg2000dwt.c), and no updates to them in fixes. A brief
    allude to fate-j2k-dwt inside of libavcodec.mak, which is added three years
    after this vulnerability was fixed.
  fix: false
  fix_answer: Fix simply appended an OR check onto the bounds checks
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    Security Vulnerability was reported by a non-involved author through use of
    an automated tool (e.g. valgrind) to find faulty memory accesses.

    Relevant email: https://www.openwall.com/lists/oss-security/2012/02/01/11
  automated: true
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Due to the error arising from the decoding of a small (or even empty) jpeg
    input stream, this bug could be potentially found in any system that feeds
    user input (in file form or otherwise) to ffmpeg to be decoded.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Bug was noticed via an automated tool, reported, and manually patched.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: |
    It's very clearly a bug with the j2kdec.c (JPEG-2000 decoder) file, located
    in libavcodec
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
    - commit: 3eedf9f716733b3b4c5205726d2c1ca52b3d3d78
      note: |
       while not between vcc->fix, our reference about j2k being experimental
    - commit: 2fbf69103847d9449de466fa217f8bd4221aa3e9
      note: |
        bit of a startling mistake:
            'Fix use of value before its initialized.'
    - commit: 02660a871301adada14b0e0fe64c66f73c2e4541
      note: |
        seems a fix was attempted before:
            'Check for out of bound reads in jpeg2000 decoder.'
    - commit: 454f1657288e75a9797381c8a26598674ea9bd68
      note: |
        something that shouldn't have been there to begin with:
            'fix a bunch of const compiler warnings'
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: Feature was for image (JPEG2000 / J2K) decoding
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    The get_qcx function call interacts with J2kDecoderContext (user input
    stream)
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: Erroneously small or empty user inputs caused this crash
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies: true
    note: |
      In essence, this decoder was imported simply because it was available,
      rather than being assessed for its quality. To reword, it is "yagni" in
      the sense of adding any and every codec they could get their hands
      on - regardless of how viable, useful, or secure that implementation was.
  complex_inputs:
    applies: true
    note: |
      Images easily fall under complex inputs, a mismatched dimension here
      caused the crash
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    It appears that the initial code was adopted without much testing or review,
    as many of the issues that arose over the years related to this module were
    very simple bounds checks and lack of initializers. Perhaps an overzealous
    strategy towards adding encoder/decoder compatibility led to some of the
    encoder/decoder classes being fraught with these kinds of issues.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 119
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname: J0Ker
CVSS: AV:N/AC:L/Au:N/C:N/I:N/A:P
