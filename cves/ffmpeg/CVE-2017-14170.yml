CVE: CVE-2017-14170
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2017-09-07T06:29Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2017-09-07T06:29Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A missing End of File (EOF) check in the code responsible for splitting
  Material eXchange Format (mxf) files into their basic components (audio,
  video, etc) could cause a Denial of Service attack via a specifically crafted
  mxf file. Specifically, the mxf file would need to specify an arbitrarily
  large amount of data in its header, without sufficient data to back it up. The
  file could also cause this unterminated loop to run multiple times, which could
  be used to potentially mask the malicious nature of the file by utilizing a
  smaller number of index entries in the header. The DoS is done by consuming
  large quantities of CPU resources.

  Interestingly, this vulnerability appears to be specifically tied to this missing
  EOF check, and does not appear to create vulnerabilities within the other
  methods that it calls, depsite the potential for bad data to be passed to them.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 900f39692ca0337a98a7cf047e4e2611071810c2
  note: 'Official fix commit'
- commit: 'c01f799314c3254a98c415ccf99acd501bdbd9f2'
  note: 'Cherry pick of fix commit for version 3.3.4'
- commit: '9cbac3602610afa0867b03bc1475c5c13441d096'
  note: 'Cherry pick of fix commit for version 3.2.8'
- commit: '92ec4eacf9649501dd8e06b97af87c428ca06556'
  note: 'Cherry pick of fix commit for version 3.1.11'
- commit: '74c067e95572dd4bfb069123f44d68b8a12e1991'
  note: 'Cherry pick of fix commit for version 3.0.10'
- commit: 'accf7d34a8825c7a07db499afbc5cf1b038db6d0'
  note: 'Cherry pick of fix commit for version 2.8.13'
- commit: 'f173cdfe669556aa92857adafe60cbe5f2aa1210'
  note: 'Cherry pick of fix commit for version 2.4.14'
vccs:
- commit: 7ddb0607f31850ea4d4e87252c8835de63cc6845
  note: Identified by archeogit,
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    There were many commits between when the vulnerability was introduced and
    when it was fixed. Nothing appears out of the ordinary, outside of additional
    security fixes to other parts of the file. Overall, the vulnerability existed
    for nearly 6 years - it was introduced in November of 2011 and fixed in August
    of 2017, presumably being reported in mid-late August, shortly before the fix.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: |
    While the subsystem has FATE regression tests, there do not appear to be
    any test files associated with the file where the vulnerability was located
  fix: false
  fix_answer:  Fix commit only contains code changing the vulnerable code
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    Found by Xiaohei and Wangchu of the Alibaba Security Team. No indication of
    how the bug was found in commit messages, on the ffmpeg bug database, or in
    security and development mailers.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Finding this issue would require the domain specific knowledge of how mxf
    files are encoded. It is unlikely that this issue could have been found by
    any form of "brute force" vulnerability searching or exploiting techniques.
    It is also very likely that code analysis was required in order to isolate
    and fully identify the vulnerability.
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Under normal circumstances, there would have been no need for this EOF check,
    as the header and information contained in it follows a normal specification,
    and in non-malicious files, the value should always be correct and always have
    the data to go with the index specification. However, a malicious file would
    deliberately be breaking the underlying mxf file spec.
  answer: true
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: The fix involved modifying a single file in the libavformat directory
  name: avformat
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: fecb3e82a4ba09dc11a51ad0961ab491881a53a1
    note: |
      Fixes a potential integer overflow error, which may have also been exploitable
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The vulnerable file deals with reading data from a file with a standard
    specification, and vulnerable methods was specifically related to reading
    in an integer value - unrelated to internationalization
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    The file type involved in the vulnerability was commonly used to share video
    data across multiple programs. Furthermore, the specific use of the vulnerable
    file was to split the input file into basic streams of audio, video, etc. that
    was then passed to the correct decoders.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: The vulnerable function was responsible for reading data from a file
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    In essence, this vulnerability boiled down to trusting a file to be completely
    valid, which is a big mistake. If the vulnerable code had been more distrustful
    of the information it read from the file and done more bounds checking, specifically
    EOF checks in this case, this vulnerability could have been avoided completely. Some
    form of domain-dependent analysis tool may have been able to find this, but more than
    likely a more robust set of tests would have been the best way to have found and
    prevented this vulnerability. This was clearly missed in code review as well, and
    more strict standards regarding reviews and required testing may have helped as well.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 834
CWE_note: |
  CWE-20 also applies here, as this is classic lack of validation in missing the EOF
  check. 834 applies moreso as it specifies the specific attack vector by which the
  vulnerability can be exploited.
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:

CVSS: AV:N/AC:M/Au:N/C:N/I:N/A:C
