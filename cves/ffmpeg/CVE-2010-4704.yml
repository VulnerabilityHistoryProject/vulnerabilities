CVE: CVE-2010-4704
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2011-02-16
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2011-01-22T22:00Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2011-01-22T22:00Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  The issue describes a potential denial of service attack when attempting to decode
  a particular .ogg file in the Vorbis OGG decoder. To give some background, 
  OGG is a file format that allows multiple streams of data to be embedded into
  a single file format. Vorbis OGG refers to the audio coding format that is
  used to embed audio, and Vorbis OGG is commonly associated with the .ogg
  file extension. The Vorbis decoder refers to converting the digital audio
  signals (digitally transferable) back into analog audio signals
  (humanly audible).
  
  Upon a specific section of the decoding process (decoding the ‘floor’), 
  it was possible for the decode function to yield a negative value. 
  Essentially, the issue was that the decode function previously returned an unsigned int, 
  leading to an Integer Overflow type vulnerability, where a ‘negative’ unsigned int 
  would wrap around to a very large number. This integer overflow vulnerability was 
  reported to cause a crash. An attacker could potentially create a malicious .ogg file, which
  would crash the overall system upon decoding. The mitigation for this was to change the return type 
  to an integer and to explicitly check the returned integer for a negative value.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 3dde66752d59dfdd0f3727efd66e7202b3c75078
  note: |
    Jason Garrett-Glaser is credited for applying this fix in the commit
    This commit changes unsigned ints into signed ints
vccs:
- commit: 07c55d8ea3f952cab2e53db374d28be5e85339ed
  note: Identified by archeogit,Identified by SZZUnleashed
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    Throughout the 3 years of this vulnerability's life, there have been a good number
    of commits and bug fixes to the associated file. There were even changes to fix other
    integer wraparounds with a similar root cause. There were also a good number of major
    changes that were implemented to either increase performance or to optimize memory
    consumption. Other notable changes include additional validations to fix other vulnerabilities.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: true
  code_answer: |
    At the time of the VCC, there was no indication of a FATE suite that tested the vorbis
    encoding and decoding. However, at some point during the vulnerability lifecycle,
    A FATE suite for Vorbis was added into the tests/fate dirctory.
  fix: false
  fix_answer: |
    There was no indication of any modification to the Vorbis FATE tests that was associated
    with this vulnerability. Furthermore, the current code coverage report (March, 2021) reports
    that the lines with the validations that were implemented as part of the vulnerability fix
    are not being executed by the tests.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    This vulnerability discovery is credited to Gregory Maxwell and was found using 'zzuf'
    Zuff is a fuzzer that randomly sets a programs inputs to look for vulnerabilities. Zuff is
    an all-purpose fuzzer and had no knowledge of media transcoding.
  automated: true
  contest: false
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    A fuzzer called 'zzuf' was used to discover this vulnerability. The fuzzer
    created random inputs to expose vulnerabilities in a program.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There was no indication of this specific vulnerability violating any specification.
    However the vulnerability was introduced during the addition of Vorbis OGG decoding,
    and the source code does mention that the decoder follows the Vorbis I specifications
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: |
    The vulnerabilty and its fixes were found in only the libavcodec/vorbis_dec.c file.
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: 366d919016a679d3955f6fe5278fa7ce4f47b81e
    note: This dealt with a different integer overflow vulnerability within the same file
  - commit: aedc98b0a4ee434aa54908b815f78a4c563c1d31
    note: This commit along with many others dealt with security fixes
  - commit: 975741e79cedc6033e5b02319792534a3a42c4ae
    note: This commit dealt with a possible crash upon using an empty codebook
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    This is not an i18n issue. This was caused by a specially crafted .ogg file
    causing an Integer Wraparound
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    The affected feature did not directly use IPCs, but 
    because this vulnerability affected the decoding process of a .ogg file,
    which involves converting digital signals from an .ogg file to analog
    signals that are humanly audible, we can say that the affected feature
    indirectly used IPCs.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: |
      Part of a fix for this vulnerability was checking for the scenario that caused
      the Integer Overflow. Previously, this extra check or extra layer of defense was
      not present in the decoding process.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      This vulnerability was discovered by a fuzzer that crafted a corrupted .ogg
      file. This file was used as an input to crash the system via an Integer Wraparound.
      Clearly the decode function assumed that this .ogg file was not possible and did
      not account for the scenario that induced the Integer Wraparound.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      Audio files and decoding audio files have complext structures.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The main issue was that the developer did not consider the possibility that the
    decoding of the .ogg file could not return a negative integer. This would likely be
    due to a lack of testing and a lack of understanding. More rigorous tesing may have
    been able to recreate the scenario where the Integer Wraparound occured. And better
    understanding could have led the developer to consider this scenario, instead of making
    assumptions.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: CWE-191
CWE_note: |
  The issue describes an integer wraparound, and the fix was converting
  unsigned ints to signed ints and adding a check for the negative scenario.
  This would suggest an Integer Underflow
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:

CVSS: AV:N/AC:M/Au:N/C:N/I:N/A:P
