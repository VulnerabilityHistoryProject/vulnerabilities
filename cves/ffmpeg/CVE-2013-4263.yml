CVE: CVE-2013-4263
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html



  Please enter your date in YYYY-MM-DD format.

announced_date: 2013-11-23T17:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2013-11-23T17:55Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
  In FFmpeg, colors in a video frame are encoded using "planes", which are
  sets of bits representing the colors of each pixel in the image. For a 
  single frame, FFmpeg stores several planes as well as the "stride" of 
  each plane, which is a number related to the width and height of the frame. 
  An attacker may craft a video file wherein one of the planes may have 
  a plane with no associated stride value. The code would then try to 
  access the stride for that plane (an alement in an array), which 
  does not exist (i.e. out-of-bounds).
  This may cause an application crash or other negative impact.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: e43a0a232dbf6d3c161823c2e07c52e76227a1bc
  note: |
    Before accessing the stride of a given plane, there is now a condition 
    that first checks for the presence of a valid stride. The fix is
    applied multiple times in the code base to address the vulnerability.
vccs:
- commit: 3c940173c0ada2d76c83da80aae816f720f3cb3a
  note: |
    First instance of the vulnerability within the codebase.
- commit: 172505b8bc361e4b08c75baf2d4d94e6c2ac94b9
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: 0ab9362fcb77c2d442fa20afcc2f1d9151228f06
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: 7a92ec93c6507bd3dea4563ec7a0e3679034fc57
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: 6b61920ab76dc6d85ef462909951923935dd643f
  note: |
    Several new instance of stride values being accessed without
    checking if they exists first.
- commit: aa0c515a3cfaa4718a7ac7f2b3ea386daf05c019
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: dd2793c880ea72c9aacda8245596694d9b4f378c
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: d5f187fd3355ec6d4922d8479930c10d1b6f9ebf
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: 2701f6cc6aca624e6d26f1bd3bd6190b8024ea6b
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: a1e171dfee17a9dcc7c5907b16d5c1a2748bfe73
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
- commit: 31d8467d82d41d9a6720d4b4bd7bf60eab547d5e
  note: |
    A new instance of a stride value being accessed without
    checking if it exists first.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    The vulnerability was first introduced on May 7, 2010 with the
    addition of the PAD filter. Until the fix occurred on August 3, 2013, 
    the same code appeared in 10 new files. Once the code had been 
    introduced to a file, it was not altered except for variable name 
    changes. All instances of the vulnerability were fixed in the same commit.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: true
  code_answer: |
    There are tests in "filter-video.mak" that use the filters with vulnerable 
    code (e.g. boxblur from "vf_boxblur.c").
  fix: false
  fix_answer: No unit tests were modified as part of the fix commit.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    I could not find info about how this vulnerability was discovered.
    I performed multiple searches on the bug tracker (function names, 
    code keywords, bugs related to filters and heap writes). The commit 
    message and CVE page (description and links) were also not helpful. 
    I looked for IRC conversations or other logs, but found none.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    Crafting a video file to exploit the vulnerability would require
    too much domain knowledge.
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There are no mentions of a specification violation in any of the
    available resources.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: |
    The commit message of the fix begins with "avfilter", and the file exists
    in the "libavfilter" directory.
  name: avfilter
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: 2a06bc10e7cb489c13613ac15c48b274013641d3
    note: Name change without fixing the vulnerability
  - commit: eb7e7e82e17b0353fbcfdee616cfe89e525eae53
    note: Name change without fixing the vulnerability
  - commit: bff576c779476c5325edb2e90828051138416759
    note: Name change without fixing the vulnerability
  - commit: 9138f6da4a3ee0d11947b8593db6b6b05e53fbae
    note: Conditions are rearranges without fixing the vulnerability
  - commit: 250b122e3ab12baeef4fb65c4d76df4fc506b899
    note: Name change without fixing the vulnerability
  - commit: 384641468b60f40e9bf9b1f887abd5e3c3a9be1c
    note: Name change without fixing the vulnerability
  - commit: e67fdbffe588e6b5bc787457da9d5941657a0029
    note: Name change without fixing the vulnerability
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    There is no mention of internationalization and no obvious 
    applicability in the code itself.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: No IPC occurred.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      FFmpeg accepts many different types of video files, so
      there are many ways in which an attacker could craft a file
      to create an exploit. It is not safe to assume that the given
      audio file will conform to the expected states and behavior.
      To prevent an exploit, the only certain way to verify a proper 
      state is to check for it explicitly.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      The video file is a very complex input. A processed frame
      from the video is affected by many pieces of code and many
      conditions/states. There's no way to know for sure if the 
      needed data is present unless it's explicitly verified.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The vulnerable code does check that there is a value for every plane, but
    it does not check if the associated stride value exists. This is a 
    dangeous assumption, because any bug or exploit that results in that value
    being absent now causes an application crash or worse. Introducing a check
    on the stride value array is a simple case of defensive programming that 
    was overlooked when the code was written.
    The vulnerability was created once, then the code was most likely copied
    and pasted as new files with similar functionality were added. The code 
    was probably not thoroughly inspected or considered before it was copied. 
    As a result, the fix had to be applied in multiple places once the 
    vulnerability was found. The fix explicitly checks that each stride value 
    exists, so there should be no way for an out-of-bounds access to occur now.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 119
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:

CVSS: AV:N/AC:L/Au:N/C:P/I:P/A:P

