CVE: CVE-2015-1872
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2015-02-04
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2015-07-26T22:59Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2015-07-26T22:59Z

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A lack of validation for the number of components in a Lossless JPEG, that
  allows for original data to be perfectly reconstructed from the compressed
  data, at the start of the frames segement, where a one byte field is always
  set to 10101011. This leads to allowing remote attackers to make a machine or
  network resource unavailable to its intended users by temporarily or
  indefinitely distrupting services of a host connected to the Internet. Which
  can be done by flooding the targeted machine or resource with requests to try
  an overload systems and prevent requests from being fufilled. The lack of
  validation also can lead to allowing attackers to possibly have unspecified
  other impact through each video frame or interlaced field of digital video
  sequences being compressed separately as a JPEG image.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
  - commit: fabbfaa095660982cc0bc63242c459561fa37037
    note: 'Fix in most recent version: 2.5.4'
  - commit: 08822122987f563b72dff77b019ae3f98b0acebb
    note: Identified by kirti301290 version 2.4.7
  - commit: 4c246c65bfa221c45452923cf148f7b11245b6d5
    note: 'Backport fix version: 2.2.14'
  - commit: fe618beccf10566e834d6a81e6e432263331553b
    note: 'Backport fix version: 2.0.7'
  - commit: fd6a9fcd427b86c0a249a8cdb33f746f33706725
    note: 'Backport fix version: 1.2.12'
  - commit: 75b0cfcf105c8720a47a2ee80a70ba16799d71b7
    note: 'Backport fix version: 0.7.17'
vccs:
  - commit: 254f653b24cd110fb452531bcad13083d592354e
    note: |
      This is where support for palettized 8bpp, encoding an image by mapping
      pixels to a pallet containing only colors that present in the image
      stored at 8 bits per pixel. Identified by archeogit.
  - commit: 4922a5b0ee9108e406b8b14356f19851702604d1
    note: |
      This is where mjpeg.c is split into an encoder and a decoder file.
      Identified by archeogit and SZZUnleashed.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 4
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    The vulnerable file, libavcodec/mjpegdec.c, was modified by 9 developers
    over the course of 8 years of exsistence. The vulnerable file underwent
    adding support for different picture formats, and fixing formattiing errors.
    There were some attempts to prevent out of array access in other parts of
    the file, but not in the vulnerable ff_mjpeg_decode_sof function. Although
    there was an attempt to fix an integer overflow in shift in the
    ff_mjpeg_decode_sof function before this vulnerability was reported.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: I could not find any unit tests in nearby directories
  fix: false
  fix_answer: The fix did not involve updating any automated tests.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    This vulnerability was discovered by Mateusz "j00ru" Jurczyk a researcher at
    Google Project zero, and Gynvael Coldwind also a security researcher at
    Google. No indication if the vulnerability was automatically discovered.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    A fuzzer could be able to detect this type of denial of service by trying to
    overload the systems with requests to attempt to flood the system and
    create a denial of service attack.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: I could not find any mention of a specification violation.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: The fix only involved modifying one file in the libavcodec directory
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
    - commit: 970a8f1c256f08d2f6414d573a54f2fa035c8e7a
      note: |
        An attempt to fix address an integer overflow in shift was made before
        this but the test for it has not been completed. A comment to complete
        test remains within the code.
    - commit: 0eecf40935b22644e6cd74c586057237ecfd6844
      note: |
        An out of array access fix in the mjpeg_decode_app function was made just
        4 months before this vulnerability was found. Which questions why other
        potentinal out of array access were not checked/tested for in the file.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The vulnerable file changed an if statement that helps perform exception
    checking and execute the componets only when they are supposed to be by
    specifying the exact value expected to execute an action. Which is completely
    unrelated to internationalization.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    The data would presumably come in over IPC, but this is not an IPC issue.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: The functions were trusting the nb_components value read in.
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: true
    note: Not relying on users to use the service correctly.
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The most notable mistake is that developers set an ambigious range in an
    execption checking if statement that would allow code to set their own value
    for the picture format that should not have been allowed. The if statement
    was true as long as the value was greater than 1 which allows the users
    to manipulate this. By setting the value to a specific number for it the
    pictures format will be secure and the input will be sterilized.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 119
CWE_note: |
  Improper restriction of operations within the Bounds of a Memory Buffer that
  could allow an attacker to execute arbitrary code or cause the system to crash. 
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.

nickname: Foul Ball Crash

CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:P

