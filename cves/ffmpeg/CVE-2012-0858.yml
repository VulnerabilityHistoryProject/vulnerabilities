CVE: CVE-2012-0858
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2012-01-19
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.

announced_date: 2012-08-20T18:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2012-08-20T18:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: A file in ffmpeg allowed a denial of service and possibly execution of arbitrary code because of an invalid free. 
  Invalid Frees happen when a pointer could be freed twice. This can cause a memory leak which can 
  crash a program and make a remote attacker able to possible execute arbitrary code.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 18bcfc912e48bf77a5202a0e24a3b884b9b2ff2c
  note: ''
- commit: 204cb29b3c84a74cbcd059d353c70c8bdc567d98
  note: ''
vccs:
- commit: 85ad569574a1a7d81c48b10e394b1ce7aaca5b7b
  note: Identified by archeogit,Identified by SZZUnleashedIdentified by archeogit,Identified
    by SZZUnleashed
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: The Project had many big changes as the vcc was one of the first commits 
    in 2005, and the fix was in 2011 and 2012. This issue was in this file for a while,
    but this file is relatively untouched for how long the time period is. Most of the 
    commits are changing documentation and variable names. There were 12 total contributers
    from 2005 to 2012, with a majority of these fixing a type, or changing variable names.
    In october of 2011 1 person did push a ton of commits that fixed some allocation issues,
    and made some improvements to checking if different variables are valid, and just better coding 
    practices in general like splitting stuff up into more functions. The other changes were usually 
    just changing outdated coding practices and calls with more updated uses.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: false
  code_answer: I did not see any unit tests nearby
  fix: false
  fix_answer: no fate suite
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: Similar vulnerabilites were found by Mateusz Jurczyk and Gynvael Coldwind. 
    This was done by Michael Niedermayer and Kurt Seifried of Red Hat Security
  automated: false
  contest: false
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: use-after-free would find this because the issue was an invalid free.
    Use-after-free tells you when memory is used after it is freed, so you would know 
    the memory could possibly be used after it had been freed and fix this error.
    A memory debug/leak detection program like Valgrind would also find this.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: the fixes are just with fixing the invalid free
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: the shorten file related to this vulnerability is a part of avcodec. 
    The shorten file is just a decoder that shortens the audio file, which is just
    compressing or cutting an audiofile, which fits into the avcodec subsystem. 
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: 02591641f88097aec2a573f0ae384c8b87bcfe3b
    note: this commit checks for a buffer overflow. Checking for a buffer overflow and checking for a invalid free are kind of similar
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: A invalid free does not involve i18n concerns.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: invalid free in a section that didn't inter-process communicate
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: The fix for this is seperating the pointers for memory, so if any of the buffer are invalid 
      or there is an error the free still works. The code runs on the belief that the pointers set or comming 
      in are always valid, instead of not trusting them and making sure they are valid.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: This was a little bit of a lack of testing and a little bit of a design mistake. The free
    being able to be abused because the pointers are not separated is something that you might not 
    think about fixing as many times the only way for this to happen is someone trying to cause a denial
    of service, but there are unit tests that would catch this. For example, a tool like Valgrind
    ould tell you when an invalid free occurs, and better coding practices like not trusting your
    inputs to be what they are and making sure they are valid.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: 763
CWE_note: 763 has to do with invalid points which is what this is, 763 talks about many similar weaknesses so many of those could also work
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.
nickname:


CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:P
