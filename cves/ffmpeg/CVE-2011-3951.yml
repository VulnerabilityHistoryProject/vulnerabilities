CVE: CVE-2011-3951
yaml_instructions: |
  ===YAML Primer===
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings

  For one-line strings, you can just use quotes after the colon

  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces.

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not absolutely required, but appreciated.
  === End YAML Primer===
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.
  This will enable additional integrity checks on this file to make sure you
  fill everything out properly.

  IMPORTANT: If you are a student, we cannot accept your work as finished unless
  curation_level is properly set.

  The latest curation level is 1.0.
  If you are curating this vulnerability, set it to the latest curation level.
curation_level: 1.0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins, bug reports, commit messages of the fix.

  Reported date is likely the same as announced and published. Leave blank if
  you can't find it out.

  Please enter your date in YYYY-MM-DD format.
reported_date: 2012-06-14
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  A good source of this for FFmpeg are their version numbers traced to tags:

    https://ffmpeg.org/security.html
    https://github.com/FFmpeg/FFmpeg/releases


  Please enter your date in YYYY-MM-DD format.
announced_date: 2012-08-20T18:55Z
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2012-08-20T18:55Z
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  This issue describes a potential denial of service attack or possibly even
  arbitrary code execution within the functionality of decoding via DPCM.
  To give some background, DPCM (Differential Pulse Code Modulation) is a 
  method used to encode and decode audio information, and is commonly used 
  with AVI files. 
  
  Specifically, the vulnerability is likely due to extraneous 
  memory buffers being unintentionally read. As a result, an attacker could 
  theoretically craft a special stream of data to be decoded by the DPCM decoder, 
  and have that data contain a pointer that executes undesired code. 
  The same concept could also be used to create a denial of service attack. 
  This vulnerability is similar to that of a buffer overflow. The fix for this 
  vulnerability was to decrease the memory buffer, so that no unintended data 
  is read or written by the decoder.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs_instructions: |
  Are there any bug reports that trace to this vulnerability?

  Sometimes a commit message will mention a bug, or the security page on FFmpeg.
  Sometimes you need to search bug database, which is here:
      https://trac.ffmpeg.org
bugs: []
fixes_vcc_instructions: |
  Please put the commit hash in "commit" field below (see my example in
  CVE-2011-3092.yml).

  Fixes and VCCs follow the same format - they are arrays of hashes.

  The notes field is optional - place anything that clarifies things or you
  find interesting in there.
fixes:
- commit: 92115bb685914cbfeb02fed26d5acd50dea03d7e
  note: This commit fixed the buffer overflow problem by increasing the size of the buffer
- commit: ce7aee9b733134649a6ce2fa743e51733f33e67e
  note: |
    Because the buffer size was increased to hold more data,
    this commit changed the decoder to ignore the extra data
vccs:
- commit: 0eea212943544d40f99b05571aa7159d78667154
  note: |
    This commit introduces a calculation used to determine the size of the output buffer.
    Essentially the calculation decides to round down the size of the output buffer, thus
    allowing for extra data to be written or read outside the buffer. This strongly suggests
    that this was the commit that contributed to the vulnerability
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
lifetime:
  question: |
    We consider the "lifetime" of this vulnerability to be from the earliest
    VCC to the latest fix.

    How would you characterize the development of this vulnerable code during
    its lifetime? Many new features? Neglected? One developer?
    Massive refactoring? Changing big dependencies?
    Changing architectures or language?


    What about the time period for the project itself?
    Did it undergo big changes during this time?

    Look at:
      * the commit messages between the two, using a command like
          git log --stat abc..def -- your/file.c
          (where a)
      * the changelog between the two
  answer: |
    The commit that contributed to this vulnerability was dated at September 2011.
    The fix was applied in January 2012, so this vulnerability was short lived. Because
    the vulnerability was short lived, not many changes were made between the two commits.
    However, the vulnerability was born due to the creation of a new API endpoint for
    DPCM decoding called 'avcodec_decode_audio4()'. Also there were two parts to the fix.
    First, the output buffer was extended, so that no extraneous data could be written or
    read outside the buffer. Secondly, extraneous data still wanted to be ignored, so a second
    change was made to ignore the extraneous data, but still keep it inside the buffer.
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem. The code

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.

    In FFmpeg, they have the FATE suite of regression tests. They are not
    "unit" tests per se, but are automated regression tests. If the fix for the
    vulnerability involved adding or updating a FATE suite, then make fix: true.
  code: true
  code_answer: |
    At the time of the VCC, there was no indication of any FATE tests being run against
    the libavcodec/dpcm.c file. However sometime during the vulnerability's lifetime, a
    FATE test was added for dpcm.c. This is confirmed by the git blame, which shows the
    creation of the FATE tests sometime in late December 2011 to early January 2012, which
    is exactly when the vulnerability was alive.
  fix: false
  fix_answer: |
    There was no indication of any FATE tests being modified upon fixing this vulnerability.
    This is also supported by the fact that the code coverage (as of March 2021) does not cover
    lines that were added to check for this specific vulnerability.
discovered:
  question: |
    How was this vulnerability discovered?

    Find any relevant bug reports or mailing list conversations read the
    conversation to find out how this was
    originally found. Answer in longform below in "answer".

    If it's clear that the vulenrability was discovered by a
    contest, fill in the name of the contest in "answer".

    If it's clear that it was found by a developer of the project itself,
    e.g. from the email address or a previous committer.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked. Thus, 'answer' should always have some
    explanation.
  answer: |
    The discoverers are credited to Mateusz Jurczyk and Gynvael Coldwind.
    Jurczyk and Coldwind are security researchers. After looking through the
    commit history and various security bulletins (debian, ubuntu), there
    was no indication about how this was discovered.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow,
    use-after-free

    Examples for false: specification violations, permissions issues, anything
    that would require a tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    It is plausible that this could have been discovered by a fuzzer.
    Because the vulnerability requires a specially crafted input, a fuzzer
    could have automatically created the required input needed to expose
    the vulnerability
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, codec spec, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: |
    There is no indication of a violation of any specification for this specific vulnerability
    The vulnerability came into existence upon implementing a new API endpoint
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in?

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    In FFmpeg, the Component field is useful here. Often people will say
      "undetermined" - do more homework than them and make a judgement call if
      you can.

    Note: a filepath is NOT a subsystem - that's too granular.

    A non-exhaustive examples for ffmpeg are:
      * avcodec
      * avdevice
      * avfilter
      * avformat
      * avutil
      * build system
      * documentation
      * fate
      * ffplay
      * ffprobe
      * postproc
      * swresample
      * swscale
      * tools
      * trac
      * website

    If this involves fixing multiple subsystems, you can make this an array.

    In 'answer', explain how you arrived at this determination.
  answer: The vccs and fixes were applied only in libavcodec/dpcm.c
  name: avcodec
interesting_commits:
  question: |
    Optional: are there any interesting commits between your VCC(s) and fix(es)?

    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?

    This is a catch-all for any interesting commit you find.
    Example of interesting commits:
      * Giant refactors
      * Changing an API or big dependency
      * A change that looks really sketchy
      * Commits where a developer mentions security in their message or comments
  commits:
  - commit: 76db17dc7d4f19f9a03bdd6de79c2ea37b76888f
    note: |
      This commit defined the output sizes for various scenarios. 
      This commit can maybe be considered a part of the vccs as the defined 
      output sizes are used in the final calculation of the output buffer.
      However the vulnerability was never really exposed until after the rounding
      calculation appeared in refactoring that supported the avcodec_decode_audio4() API
  - commit: 3ef8be2bfc89672060a2a2f2b8926b3decb08172
    note: |
      This commit introduced the support for dpcm decoding. Although this commit is not likely to
      contribute to the vulnerability, this is where the output is first defined. Changes made later
      to this file are more probable candidates for contributing the vulnerability
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: The buffer overflow is not related to i18n, it is more of a rounding calculation issue
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: true
  note: |
    The affected feature did not directly use IPCs, but since
    decoding via DPCM involves converting digital signals into analog signals,
    the feature indirectly used IPCs

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      The issue was that it was assumed that the stream of input
      would not have any extraneous data, and thus there was no need
      think about using a buffer larger than the expected size. In the context
      of dpcm decoding, in simple terms, it was assumed that the data stream
      would never be 'odd numbered' so it was ok to 'round down' to an even number.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      Managing the size of buffers is challenging especially with complext inputs
      like digital audio data. Also dealing with the various scenarios that affect
      the size of the individaul output packets can be difficult and complex.
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Design mistakes? Maintainability? Requirements?
    Miscommunications? Lack of testing? Lack of understanding? Lack of
    specifications? Working alone?

    An answer like "it was just a coding mistake" is not thoughtful enough.
    If it's such an easy mistake to make, how was it missed?

    Also, look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    The mistake was incorrectly managing the size of buffers. I believe that
    this was likely due to a lack of understanding. Understanding that it was possible
    for the data streams to have extraneous data may have prevented this vulnerability.
    It was assumed that the input would never have the extraneous data, and thus
    the buffer was incorrectly managed.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then choose the best one and mention the others in CWE_note.
CWE: CWE-231
CWE_note: |
  The issue arose from not handling extraneous data correctly
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it. If the
  report mentions a nickname, e.g. "Heartbleed", use that. Or come up with one!

  Must be under 30 characters. Optional. Be appropriate.

nickname:


CVSS: AV:N/AC:M/Au:N/C:P/I:P/A:P

