CVE: CVE-2015-0275
yaml_instructions: |
 =================
 ===YAML Primer===
 =================
 This is a dictionary data structure, akin to JSON.
 Everything before a colon is a key, and the values here are usually strings
 For one-line strings, you can just use quotes after the colon
 For multi-line strings, as we do for our instructions, you put a | and then
 indent by two spaces


 For readability, we hard-wrap multi-line strings at 80 characters. This is
 not required, but appreciated.
curated_instructions: |
 If you are manually editing this file, then you are "curating" it.


 Set the version number that you were given in your instructions.


 This will enable additional editorial checks on this file to make sure you
 fill everything out properly. If you are a student, we cannot accept your work
 as finished unless curated is properly updated.
curation_level: 2
reported_instructions: |
 What date was the vulnerability reported to the security team? Look at the
 security bulletins and bug reports. It is not necessarily the same day that
 the CVE was created.  Leave blank if no date is given.


 Please enter your date in YYYY-MM-DD format.
reported_date: '2015-02-18'
announced_instructions: |
 Was there a date that this vulnerability was announced to the world? You can
 find this in changelogs, blogs, bug reports, or perhaps the CVE date.


 This is not the same as published date in the NVD - that is below.


 Please enter your date in YYYY-MM-DD format.
announced_date: '2015-10-19'
published_instructions: |
 Is there a published fix or patch date for this vulnerability?
 Please enter your date in YYYY-MM-DD format.
published_date: '2015-04-03'
description_instructions: |
 You can get an initial description from the CVE entry on cve.mitre.org. These
 descriptions are a fine start, but they can be kind of jargony.


 Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
 read to anyone with some programming experience. We can always pull up the NVD
 description later to get more technical.


 Try to still be specific in your description, but remove project-specific
 stuff. Remove references to versions, specific filenames, and other jargon
 that outsiders to this project would not understand. Technology like "regular
 expressions" is fine, and security phrases like "invalid write" are fine to
 keep too.


 Your target audience is people just like you before you took any course in
 security
description: |
 An issue in the EXT4 Filesystem of the linux kernel caused the system to crash
 whenever a specific 'fallocate' (used to allocate and manipulate disk space for a file)
 command is used to zero range the file space. (Zero ranging is when the allocated space for
 the file returns zero when read). Whenever the page size was greater than the allocated block size
 the system would crash.
bounty_instructions: |
 If you came across any indications that a bounty was paid out for this
 vulnerability, fill it out here. Or correct it if the information already here
 was wrong. Otherwise, leave it blank.
bounty:
 amt:
 announced:
 url:
reviews: []
bugs_instructions: |
 What bugs are involved in this vulnerability?


 Please list bug IDs to https://bugzilla.kernel.org/


 Bug ID's can appear in several places:
   * Mentioned in commit messages
   * Mentioned in mailing list discussions
   * References from NVD entry
   * Various other places
bugs: [1195178, 1425270]
fixes_instructions: |
 Please put the commit hash in "commit" below.


 This must be a git commit hash from the systemd source repo, a  40-character
 hexademical string/


 Place any notes you would like to make in the notes field.
fixes:
- commit: 0f2af21aae11972fa924374ddcf52e88347cf5a8
  note: |
   'Manually confirmed'
vcc_instructions: |
 The vulnerability-contributing commits.


 These are found by our tools by traversing the Git Blame history, where we
 determine which commit(s) introduced the functionality.


 Look up these VCC commits and verify that they are not simple refactorings,
 and that they are, in fact introducing the vulnerability into the system.
 Often, introducing the file or function is where the VCC is, but VCCs can be
 anything.


 Place any notes you would like to make in the notes field.
vccs:
- commit: b8a8684502a0fc852afa0056c6bb2a9273f6fcc0
  note: This commit creates the initial function where the vulnerability appears.
upvotes_instructions: |
 For the first round, ignore this upvotes number.


 For the second round of reviewing, you will be giving a certain amount of
 upvotes to each vulnerability you see. Your peers will tell you how
 interesting they think this vulnerability is, and you'll add that to the
 upvotes score on your branch.
upvotes: 5
unit_tested:
 question: |
   Were automated unit tests involved in this vulnerability?
   Was the original code unit tested, or not unit tested? Did the fix involve
   improving the automated tests?


   For code: and fix: - your answer should be boolean.


   For the code_answer below, look not only at the fix but the surrounding
   code near the fix in related directories and determine if and was there were
   unit tests involved for this subsystem.


   For the fix_answer below, check if the fix for the vulnerability involves
   adding or improving an automated test to ensure this doesn't happen again.
 code: false
 code_answer: |
   There was no mention that the vulnerability was discovered by unit testing, just
   that a developer found and reported the bug.
 fix: false
 fix_answer: |
   The fix did not involve improving automated testing, as it just added a check in
   the `extents.c` file.
discovered:
 question: |
   How was this vulnerability discovered?


   Go to the bug report and read the conversation to find out how this was
   originally found. Answer in longform below in "answer", fill in the date in
   YYYY-MM-DD, and then determine if the vulnerability was found by a Google
   employee (you can tell from their email address). If it's clear that the
   vulnerability was discovered by a contest, fill in the name there.


   The automated, contest, and developer flags can be true, false, or nil.


   If there is no evidence as to how this vulnerability was found, then please
   explain where you looked.
 answer: |
   This vulnerability was found presumably during developer testing by
   Xiong Zhou.
 automated: false
 contest: false
 developer: true
autodiscoverable:
 instructions: |
   Is it plausible that a fully automated tool could have discovered
   this? These are tools that require little knowledge of the domain,
    e.g. automatic static analysis, compiler warnings, fuzzers.


   Examples for true answers: SQL injection, XSS, buffer overflow


   In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.


   Examples for false: RFC violations, permissions issues, anything
   that requires the tool to be "aware" of the project's
   domain-specific requirements.


   The answer field should be boolean. In answer_note, please explain
   why you come to that conclusion.
 note: |
   This vulnerability requires a very specific condition to be met that
   a fully automated tool would very likely not replicate.
 answer: false
specification:
 instructions: |
   Is there mention of a violation of a specification? For example, the POSIX
   spec, an RFC spec, a network protocol spec, or some other requirements
   specification.


   Be sure to check the following artifacts for this:
     * bug reports
     * security advisories
     * commit message
     * mailing lists
     * anything else


   The answer field should be boolean. In answer_note, please explain
   why you come to that conclusion.
 note: The error was caused by not accounting for an edge case when allocating block space.
 answer: false
subsystem:
 question: |
   What subsystems was the mistake in? These are WITHIN linux kernel


   Determining the subsystem is a subjective task. This is to help us group
    similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y


   Some areas to look for pertinent information:
     - Bug labels
     - Directory names
     - How developers refer to an area of the system in comments,
       commit messages, etc.


   Look at the path of the source code files code that were fixed to get
   directory names. Look at comments in the code. Look at the bug reports how
   the bug report was tagged.


   Example linux kernel subsystems are:
     * drivers
     * crypto
     * fs
     * net
     * lib


   Name should be:
     * all lowercase English letters
     * NOT a specific file
     * can have digits, and _-@/


   Can be multiple subsystems involved, in which case you can make it an array
   e.g.
       name: ["subsystemA", "subsystemB"] # ok
       name: subsystemA # also ok
 name: [fs, ext4]
 note: the error occurred in the file system, more specifically in the ext4 filesystem.
interesting_commits:
 question: |
   Are there any interesting commits between your VCC(s) and fix(es)?


   Use this to specify any commits you think are notable in some way, and
   explain why in the note.


   Example interesting commits:
     * Mentioned as a problematic commit in the past
       e.g. "This fixes regression in commit xys"
     * A significant rewrite in the git history
     * Other commits that fixed a similar issue as this vulnerability
     * Anything else you find interesting.
 commits:
 - commit: e1ee60fd89670da61b0a4bda59f8ffb2b8abea63
   note: |
     This commit fixes an error when mounting ext4 with data = journal, and it was
     related directly to fallocate zero flag functionality.
 - commit: 713e8dde3e71e92db2d8cc8459d236ce1fb576ce
   note: |
     This commit fixes another zero range bug due to flag aliasing which could
     cause a corruption in the data file. Its in the same area of the code as
     this vulnerability.
i18n:
 question: |
   Was the feature impacted by this vulnerability about internationalization
   (i18n)?


   An internationalization feature is one that enables people from all
   over the world to use the system. This includes translations, locales,
   typography, unicode, or various other features.


   Answer should be true or false
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 answer: false
 note:  |
   This error was caused by a bug with allocating file space, i18n did not
   play a factor in causing the issue.
sandbox:
 question: |
   Did this vulnerability violate a sandboxing feature that the system
   provides?


   A sandboxing feature is one that allows files, users, or other features
   limited access. Vulnerabilities that violate sandboxes are usually based on
   access control, checking privileges incorrectly, path traversal, and the
   like.


   Answer should be true or false
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 answer: false
 note: |
   the vulnerability was related to allocating file space, and did not violate
   the sandbox.
ipc:
 question: |
   Did the feature that this vulnerability affected use inter-process
   communication? IPC includes OS signals, pipes, stdin/stdout, message
   passing, and clipboard. Writing to files that another program in this
   software system reads is another form of IPC.


   Answer must be true or false.
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 answer: true
 note: |
   Since the fallocate command modifies the size of a file which another
   process could be using, it is using inter process communication.
discussion:
 question: |
   Was there any discussion surrounding this?


   A discussion can include debates, disputes, or polite talk about how to
   resolve uncertainty.


   Example include:
     * Is this out of our scope?
     * Is this a security?
     * How should we fix this?


   Just because you see multiple comments doesn't mean it's a discussion.
   For example:
     * "Fix line 10". "Ok" is not what we call a discussion
     * "Ping" (reminding people)


   Check the bugs reports, pull requests, and mailing lists archives.


   These answers should be boolean.
     discussed_as_security: true or false
     any_discussion: true or false


   Put any links to disagreements you found in the notes section, or any other
   comment you want to make.
 discussed_as_security: false
 any_discussion: false
 note: |
   There wasn't any discussion, as it was primarily one person Petr Matousek
   highlighting the issue, reporting on what versions of the kernel it affects
   and then reporting that the bug had been addressed.
vouch:
 question: |
   Was there any part of the fix that involved one person vouching for
   another's work?


   This can include:
     * signing off on a commit message
     * mentioning a discussion with a colleague checking the work
     * upvoting a solution on a pull request


   Answer must be true or false.
   Write a note about how you came to the conclusions you did, regardless of what your answer was.
 answer: true
 note: |
   Commit to fix the vulnerability was signed off by Lukas Czerner and
   Theodore Ts'o.
stacktrace:
 question: |
   Are there any stacktraces in the bug reports?


   Secondly, if there is a stacktrace, is the fix in the same file that the
   stacktrace points to?


   If there are no stacktraces, then both of these are false - but be sure to
   mention where you checked in the note.


   Answer must be true or false.
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 any_stacktraces: false
 stacktrace_with_fix: false
 note: No stacktrace was included in the bug report.
forgotten_check:
 question: |
   Does the fix for the vulnerability involve adding a forgotten check?


   A "forgotten check" can mean many things. It often manifests as the fix
   inserting an entire if-statement or a conditional to an existing
   if-statement. Or a call to a method that checks something.


   Example of checks can include:
     * null pointer checks
     * check the current role, e.g. root
     * boundary checks for a number
     * consult file permissions
     * check a return value


   Answer must be true or false.
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 answer: true
 note: |
   The fix for this bug included preallocating the range for the block if there are any
   unaligned edges in the block. A check was performed to see if there were unaligned edges
   in the block, and if there were, to preallocate the range of the entire file's block
   size.
order_of_operations:
 question: |
   Does the fix for the vulnerability involve correcting an order of
   operations?


   This means the fix involves moving code around or changing the order of
   how things are done.


   Answer must be true or false.
   Write a note about how you came to the conclusions you did, regardless of
   what your answer was.
 answer: false
 note:  |
   The fix for this bug included preallocating the range for the block if there are any
   unaligned edges in the block. The check did not exist, therefore the code was not
   executed in the improper order.
lessons:
 question: |
   Are there any common lessons we have learned from class that apply to this
   vulnerability? In other words, could this vulnerability serve as an example
   of one of those lessons?


   Leave "applies" blank or put false if you did not see that lesson (you do
   not need to put a reason). Put "true" if you feel the lesson applies and put
   a quick explanation of how it applies.


   Don't feel the need to claim that ALL of these apply, but it's pretty likely
   that one or two of them apply.


   If you think of another lesson we covered in class that applies here, feel
   free to give it a small name and add one in the same format as these.
 defense_in_depth:
   applies: false
   note:
 least_privilege:
   applies: false
   note:
 frameworks_are_optional:
   applies: false
   note:
 native_wrappers:
   applies: false
   note:
 distrust_input:
   applies: true
   note: A carefully crafted zero range fallocate command could have caused the kernel to crash.
 security_by_obscurity:
   applies: false
   note:
 serial_killer:
   applies: false
   note:
 environment_variables:
   applies: false
   note:
 secure_by_default:
   applies: false
   note:
 yagni:
   applies: false
   note:
 complex_inputs:
   applies: false
   note:
mistakes:
 question: |
   In your opinion, after all of this research, what mistakes were made that
   led to this vulnerability? Coding mistakes? Design mistakes?
   Maintainability? Requirements? Miscommunications?


   There can, and usually are, many mistakes behind a vulnerability.


   Remember that mistakes can come in many forms:
   * slip: failing to complete a properly planned step due to inattention
             e.g. wrong key in the ignition
             e.g. using < instead of <=
   * lapse: failing to complete a properly planned step due to memory failure
             e.g. forgetting to put car in reverse before backing up
             e.g. forgetting to check null
   * planning error: error that occurs when the plan is inadequate
             e.g. getting stuck in traffic because you didn't consider the
                  impact of the bridge closing
             e.g. calling the wrong method
             e.g. using a poor design


   These are grey areas, of course. But do your best to analyze the mistakes
   according to this framework.


   Look at the CWE entry for this vulnerability and examine the mitigations
   they have written there. Are they doing those? Does the fix look proper?


   Write a thoughtful entry here that people in the software engineering
   industry would find interesting.
 answer: |
   This was a planning error, where the original plan to implement the functionality
   was not sufficient to cover the scope of the problem, as the original developer
   did not take into account file blocks with unaligned edges in memory. Because of this,
   the incorrect file block size was allocated for the zero range function, causing a crash.
   The fix for this included adding a check and preallocating the size of the range. In the CWE,
   this was a potential mitigation. The fix pre allocates the whole range including the unaligned
   edges of the memory, allowing for the entire range to be accessible for the file zeroing.
CWE_instructions: |
 Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
 entry that describes your vulnerability. We recommend going to
 https://cwe.mitre.org/data/definitions/699.html for the Software Development
 view of the vulnerabilities. We also recommend the tool
 http://www.cwevis.org/viz to help see how the classifications work.


 If you have anything to note about why you classified it this way, write
 something in CWE_note. This field is optional.


 Just the number here is fine. No need for name or CWE prefix. If more than one
 apply here, then place them in an array like this
   CWE: ["123", "456"] # this is ok
   CWE: [123, 456]     # also ok
   CWE: 123            # also ok
CWE:
- 754
CWE_note: |
 Replaced 17, which was deprecated. This CWE applies as the program did not
 check if the file memory blocks were unaligned, meaning that there was no
 check for an exceptional condition. By implementing
 a check for this condition, the vulnerability was closed.
nickname_instructions: |
 A catchy name for this vulnerability that would draw attention it.
 If the report mentions a nickname, use that.
 Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:2.0/AV:L/AC:L/Au:N/C:N/I:N/A:C