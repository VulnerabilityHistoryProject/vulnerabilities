CVE: CVE-2013-2017
CWE:
  - 399
ipc: No
CVSS: "7.8"
bugs: ["https://marc.info/?l=linux-netdev&m=127310770900442&w=3"]
i18n:
  note: "This didn't deal with any internationalization as this related to a double free issue."
  answer: No
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs: ["445409602c09219767c06497c0dc2285eac244ed", "38d408152a86598a50680a82fe3353b506630409"]
fixes: ["6ec82562ffc6f297d0de36d65776cff8e5704867"]
vouch:
  note: "Both Eric Dumazet and David S. Miller are on the fix commit as signing off on the fix."
  answer: Yes
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies: false
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies: false
  complex_inputs:
    note:
    applies: false
  distrust_input:
    note:
    applies: false
  least_privilege:
    note:
    applies: false
  native_wrappers:
    note:
    applies: false
  defense_in_depth:
    note:
    applies: false
  secure_by_default:
    note:
    applies: false
  environment_variables:
    note:
    applies: false
  security_by_obscurity:
    note:
    applies: false
  frameworks_are_optional:
    note:
    applies: false
reviews: []
sandbox: No.
upvotes: "3"
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes:
  answer: |
    The major/main mistake that was made here was that the developers
    didn't check/verify that the item they were freeing was already freed. This
    was most likely caused by a lapse in developers forgetting that this specific
    item could have already been freed by the system.
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
nickname:
subsystem: ["net"]
discovered: Martin Ferrari
discussion:
  note: "The only discussions I could find didn't discuss much in depth beyond what the issue was and how to fix it. https://bugzilla.redhat.com/show_bug.cgi?id=957705 "
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion:
  discussed_as_security:
stacktrace:
  note: "There doesn't seem to be any stack trace associated with this fix that I could find."
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
description: >-
  A flaw was found in the way Virtual Ethernet driver implementation in the
  Linux kernel handled skbs in case of congestion.


  A remote attacker could potentially use this flaw to crash the system.
unit_tested:
  fix: No.
  code: No.
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer:
  code_answer: "Could not find any unit tests related to this issue."
reported_date:
specification:
  note: No.
  answer:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2013-05-03
curation_level: 2
published_date: 2013-05-03
forgotten_check:
  note: "It forgot to check if the item was already freed before freeing it again."
  answer: Yes.
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: "The CVE details how this vulnerability could be used maliciously because of the fact that it involves, in part, a double-free error. An automated tool could have detected the double free."
  answer: Yes.
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits: ["Between the VCC and the fix, the developers added code that would expand their if statement to make sure that the item they are freeing hasn't already been freed."]
order_of_operations:
  note: "No."
  answer: No.
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
announced: 2013-05-03
discovered_answer: 'This vulnerability was discovered by a developer, Martin
  Ferrari, when he noticed that the vulnerability caused him to receive a
  "Kernel panic - not syncing: Fatal exception in interrupt". '
discovered_automated:
  -
  - "1"
discovered_developer:
  -
  - "1"
discovered_contest:
  -
  - "1"
related: No.
bugs_repeater: []
sandbox_answer:
  -
  - "1"
sandbox_note: ""
ipc_answer:
  -
  - "1"
ipc_note: ""
