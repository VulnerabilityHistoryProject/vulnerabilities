CVE: CVE-2020-10768
CWE:
  - 440
ipc: No.
CVSS:
bugs: []
i18n:
  note: This vulnerability originates in hardware and is exploited by setting a flag in the kernel. These inputs shouldn't involve i18n.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs: 
  - commit: 9137bb27e60e554dab694eafa4cca241fa3a694f
    note: Addition of the prctl function for changing Spectre v2 mitigation level.
  - commit:
    note:
fixes:
  - commit: 4d8df8cbb9156b0a0ab3f802b80cb5db57acc0bf
    note: Made by the same Google employee who reported the vulnerability initially.
  - commit:
    note:
vouch:
  note: Thomas Gleixner was involved with, signed off on and was ultimately the one merging and approving the fixes around this vulnerability. He signed off on Anthony Steinhauser's original email and commits with fixes to the vulnerability.
  answer: true
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:
  distrust_input:
    note:
    applies:
  least_privilege:
    note:
    applies:
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note:
    applies:
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies:
reviews: []
sandbox:
  note:
  answer:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
upvotes: "6"
CWE_note: |
  Manually confirmed.
mistakes: "This vulnerability stems from a lapse during the initial
    implementation of the prctl() function for checking and changing
    the status of indirect branch speculation. When the function was
    written, it had a force disable in mind but a check for this value was forgotten."
nickname: Stealthy Spectre
subsystem: ["Userspace API"]
discovered: Anthony Steinhauser
discussion:
  note: No discussion was found besides the initial notice to the team. Because Steinhauser's notice also included a fixing commit, there was likely not need for discussion.
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion:
  discussed_as_security:
stacktrace:
  note:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
description: "Indirect branch speculation allows for Spectre v2 attacks, also
  called indirect branch poisoning. These attacks, and by extension this
  vulnerability, allow for user-space programs to access full system memory and
  gain access to sensitive information or passwords across running programs. An
  option in the Linux kernel force-disables indirect branch speculation to
  prevent these attacks. A hole in force-disabling allowed it to be re-enabled
  in an invisible way, where branch speculation would be reported as
  force-disabled even when it was enabled."
unit_tested:
  fix:
  code:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer:
  code_answer:
reported_date:
specification:
  note: "When the first commit adding the affected function was made,
    it was added with documentation with how the function should work.
    This documentation stated that force disabling should prevent the
    speculative branching feature from being enabled again, however the
    implementation did not enforce this."
  answer: true
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2020-06-09
curation_level: 2
published_date: 2013-06-09
forgotten_check:
  note: "The fix for this vulnerability was to add a missing conditional check for whether FORCE_DISABLED is set to an existing if-statement."
  answer: true
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: Due to the contextual nature of the bug and the conditions needed to detect and exploit the vulnerability, it is unlikely that an automated tool would have detected this vulnerability.
  answer: false
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits:
  - commit: 21998a351512eba4ed5969006f0c55882d995ada
    note: "This commit from 1 month before adds several conditions to the affected if-statement. These appear to help mitigate related potential vulnerabilities, but it was authored a month before it was committed on the same day as the fix."
order_of_operations:
  note: "This was a case of an entirely missing check, and every part of the relevant conditional are OR'd together, so order of operations does not apply"
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
CWE Identifier: "440"
ipc_answer:
  - 
  - "1"
ipc_note: ""
discovered_answer: This vulnerability was discovered and reported to the Linux
  kernel mailing list by Google engineer Anthony Steinhauser, who quotes
  concerns about implications for Chromium's security due to this problem. It is
  unclear exactly how he discovered the vulnerability initially.
discovered_automated:
  - 
  - "1"
discovered_developer:
  - 
  - "1"
discovered_contest:
  - 
  - "1"
related:
bugs_repeater: []
announced: 2020-06-09
