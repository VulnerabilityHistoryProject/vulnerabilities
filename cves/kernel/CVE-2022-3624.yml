CVE: CVE-2022-3624
curation_level: 2
reported_date: '2022-08-11'
announced_date: '2022-10-21'
published_date: '2022-10-21'
description: |
  This vulnerability involves a reference count memory leak. The code
  that introduced this commit had acquired a reference from another function,
  but failed to release it before exiting the function (rlb_arp_xmit) early.
  Since memory leaks can degrade the system, users would be able to crash 
  the system eventually.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes:
- commit:
  note:
- commit:
  note:
- commit: 4f5d33f4f798b1c6d92b613f0087f639d9836971
  note: Manually confirmed
vccs:
- commit: d5410ac7b0baeca91cf73ff5241d35998ecc8c9e
  note: Manually Confirmed
upvotes: 1
unit_tested:
  code: false
  code_answer: false
  fix: false
  fix_answer: false
discovered:
  answer: |
    Jay Vosburgh posted in the Linux Kernel mailing list about the issue.
    This included a remedy to the issue as well.
  automated: false
  contest: false
  developer: true
autodiscoverable:
  note: |
    It could be possible for some static analyzers to notice that there was an
    issue with reference counting. Valgrind could have possibly determined 
    issues with this by finding that a reference still existed which led to the
    vulnerability.
  answer: true
specification:
  answer: false
  note: |
    There was no mention of a specification violation in any chats, commits
    or reports in resourcs like the CWE
subsystem:

  name: ["drivers", "net", "binding"]
  note: |
    The directory structure is drivers/net/binding. This vulnerability
    is related to a networking driver for network binding.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  answer: false
  note: |
    This vulnerability has nothing to do with internationalization. It is a 
    memory leak within the application load balancer portion of the Linux kernel.
sandbox:
  answer: false
  note: |
    This vulnerability did not leak to any violations related to 
    access or privilege
ipc:
  answer: false
  note: Vulnerability had to do with failing to release a reference.
discussion:
  discussed_as_security: false
  any_discussion: true
  note: |
    There was little discussion about the issue on the Linux Kernel mailing list.
    One other developer was in agreement in response to the issue being raised.
  
vouch:
  answer: true
  note: |
    The GitHub commit message says it was signed off by Jay Vosburgh and Jakub
    Kicinski. The commit message also says it was reviewed by Nikolay Aleksandrov.
stacktrace:
  any_stacktraces: false
  stacktrace_with_fix: false
  note: |
    There were no stack traces provided. Only the issue with references to the commit
forgotten_check:
  answer: false
  note: |
    There was a check involved which introduced the vulnerability.
    However, the vulnerability was caused by a failure to do free memory if 
    the check passed.
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  answer: |
    There was a lapse where the developer forgot to release memory before returning
    null in the rlb_arp_xmit function they were modifying. The fix was to also call
    a function to release the memory before returning out of the function early. Although
    not explicity mentioned CWE 401 in favor or delegating memory issues to languages and libraries,
    it is expected that the programmer just frees dynamically allocated memory when done with it.
  
CWE:
- 401
CWE_note: |
  Manually confirmed
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L
