CVE: CVE-2022-28893
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 1a3b1bba7c7a5eb8a11513cf88427cb9d77bc60a
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: d7065da038227a4d09a244e6014e0186a6bd21d0
  note: Discovered automatically by archeogit.
- commit: 4a9d4b024a3102fc083c925c242d98ac27b1c5f6
  note: Discovered automatically by archeogit.
- commit: 4248b0da460839e30eaaad78992b9a1dd3e63e21
  note: Discovered automatically by archeogit.
- commit: "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2"
  note: Discovered automatically by archeogit.
- commit: f648022faa68ef76058aa121d1aa3a967d59cae8
  note: Discovered automatically by archeogit.
- commit: 8a5e929dd2e05ab4d3d89f58c5e8fca596af8f3a
  note: Discovered automatically by archeogit.
- commit: 44942b4e457beda00981f616402a1a791e8c616e
  note: Discovered automatically by archeogit.
- commit: f7b37b8b139860ed786bf8ce4358290c6053d94d
  note: Discovered automatically by archeogit.
- commit: a14017db2852f9393a401a0f64053c331003babf
  note: Discovered automatically by archeogit.
- commit: 95ad37f90c338e3fd4abf61cecfe02b6f3e080f0
  note: Discovered automatically by archeogit.
- commit: ce4ef7c0a8a0594d7b9d088d73866a4389402a7e
  note: Discovered automatically by archeogit.
- commit: 18a600897212c1480eb635112baeab017babfc83
  note: Discovered automatically by archeogit.
- commit: 532d4def2f95623a9b8b2cef7723e14521377911
  note: Discovered automatically by archeogit.
- commit: fba83f34119a74a8ad3f6649d9c697b951562592
  note: Discovered automatically by archeogit.
- commit: a47970ff7814718fec31b7d966747c6aa1a3545f
  note: Discovered automatically by archeogit.
- commit: b1f69b754ee312ec75f2c7ead0e6851cd9598cc2
  note: Discovered automatically by archeogit.
- commit: 6e47666ef93dc9c4011407df8d2de1dd1ed39f25
  note: Discovered automatically by archeogit.
- commit: 820bf85ce249ec5b4da9f6aaefa3f5491b23b587
  note: Discovered automatically by archeogit.
- commit: 2dbf8dffbf35fd8f611083b9d9fe74fdccf912a3
  note: Discovered automatically by archeogit.
- commit: d3d4152a5d59af9e13a73efa9e9c24383fbe307f
  note: Discovered automatically by archeogit.
- commit: dfb4f309830359352539919f23accc59a20a3758
  note: Discovered automatically by archeogit.
- commit: 1174dd1f890b7f8be8ec6a7071657fe8f59e18b7
  note: Discovered automatically by archeogit.
- commit: a52458b48af142bcc2b72fe810c0db20cfae7fdd
  note: Discovered automatically by archeogit.
- commit: c6bfa1a16377b42496ecc0490a33516c0e414e7b
  note: Discovered automatically by archeogit.
- commit: 9d96acbc7f376dc1ffcedca0c349dd3389187a38
  note: Discovered automatically by archeogit.
- commit: edc81dcd5b7f699c4049042b35c904396642032e
  note: Discovered automatically by archeogit.
- commit: 911813d7a15221362d1655d246f3502c0f898c14
  note: Discovered automatically by archeogit.
- commit: 762e4e67b356ab7b8fbfc39bc07dc6110121505e
  note: Discovered automatically by archeogit.
- commit: 55ae1aabfb108106dd095de2578ceef1c755a8b8
  note: Discovered automatically by archeogit.
- commit: 477687e1116ad16180caf8633dd830b296a5ce73
  note: Discovered automatically by archeogit.
- commit: 3832591e6fa53d8126d5e21446f225cda278d91a
  note: Discovered automatically by archeogit.
- commit: 263fb9c21e7a86e8e373a23edfa82700422f5e6a
  note: Discovered automatically by archeogit.
- commit: 15f081ca8ddfe150fb639c591b18944a539da0fc
  note: Discovered automatically by archeogit.
- commit: 78b576ced2f52f13e54955c89ab41eca9163671d
  note: Discovered automatically by archeogit.
- commit: df561f6688fef775baa341a0f5d960becd248b11
  note: Discovered automatically by archeogit.
- commit: 19445b99b6d66af661c586c052de23110731a502
  note: Discovered automatically by archeogit.
- commit: 84115e1cd4a3614c4e566d4cce31381dce3dbef9
  note: Discovered automatically by archeogit.
- commit: 902c58872e1e9a2c146a55b0701c0b26cc5a4b24
  note: Discovered automatically by archeogit.
- commit: cc204d01262a69218b2d0db5cdea371de85871d9
  note: Discovered automatically by archeogit.
- commit: e0ab53deaa91293a7958d63d5a2cf4c5645ad6f0
  note: Discovered automatically by archeogit.
- commit: c8485e4d634f6df155040293928707f127f0d06d
  note: Discovered automatically by archeogit.
- commit: cea57789e4081870ac3498fbefabbbd0d0fd8434
  note: Discovered automatically by archeogit.
- commit: e8f5d77c8029ff8f5dcd1dfc133aac0bbbffd92b
  note: Discovered automatically by archeogit.
- commit: 9e55eef4ab1bf1810443bb3989a07a68e1f5d084
  note: Discovered automatically by archeogit.
- commit: b2648015d4521de21ed3c9f48f718e023860b8c1
  note: Discovered automatically by archeogit.
- commit: ca4faf543a33373bed3650812d5f0cd0bd295b1a
  note: Discovered automatically by archeogit.
- commit: da1661b93bf489cdbc8bcea919b165d31b4810bf
  note: Discovered automatically by archeogit.
- commit: 998024dee197944a7018a0bdc85b83b569ddec22
  note: Discovered automatically by archeogit.
- commit: 4a85a6a3320b4a622315d2e0ea91a1d2b013bce4
  note: Discovered automatically by archeogit.
- commit: feb8ca37cc3d83c07fd042509ef1e176cfeb2cfa
  note: Discovered automatically by archeogit.
- commit: 21de0a955f3af29fa1100d96f66e6adade89e77a
  note: Discovered automatically by archeogit.
- commit: 4e0038b6b246e4145fc4a53dca61a556d17bc52c
  note: Discovered automatically by archeogit.
- commit: e877a88d1f069edced4160792f42c2a8e2dba942
  note: Discovered automatically by archeogit.
- commit: 718ba5b87343df303017585200ee182e937eabfc
  note: Discovered automatically by archeogit.
- commit: 75369089820473eac45e9ddd970081901a373c08
  note: Discovered automatically by archeogit.
- commit: 277e4ab7d530bf287e02b65cfcd3ea8f489784f6
  note: Discovered automatically by archeogit.
- commit: 75891f502f5fc70f52a01af5b924384ed4866907
  note: Discovered automatically by archeogit.
- commit: a246b0105bbd9a70a698f69baae2042996f2a0e9
  note: Discovered automatically by archeogit.
- commit: fe315e76fc3a3f9f7e1581dc22fec7e7719f0896
  note: Discovered automatically by archeogit.
- commit: 264d1df3b34804a7d440d77771020f616a573528
  note: Discovered automatically by archeogit.
- commit: 4cd34e7c2e412e3db2f6bf7371581ab60591174b
  note: Discovered automatically by archeogit.
- commit: 176e21ee2ec89cae8d45cf1a850ea45a45428fb8
  note: Discovered automatically by archeogit.
- commit: 78215759e20d859b8f1de7d0aebd08878fbc4eed
  note: Discovered automatically by archeogit.
- commit: 9903cd1c27a1f30e8efea75e125be3b2002f7cb9
  note: Discovered automatically by archeogit.
- commit: a73881c96d73ee72b7dbbd38a6eeef66182a8ef7
  note: Discovered automatically by archeogit.
- commit: 4cfc7e6019caa3e97d2a81c48c8d575d7b38d751
  note: Discovered automatically by archeogit.
- commit: 8729aaba74626c4ebce3abf1b9e96bb62d2958ca
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 416
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
