CVE: CVE-2013-2058
curation_level: 2
reported_date: '2013-01-11'
announced_date: '2013-11-04'
published_date: '2013-11-04'
description: "The host_start function in drivers/usb/chipidea/host.c in the Linux kernel before 3.7.4 
  does not properly support a certain non-streaming option. This allows local users to cause a denial 
  of service (system crash) by sending a large amount of network traffic through a USB/Ethernet adapter."
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: [959210,959234,959235]
fixes:
- commit: 929473ea05db455ad88cdc081f2adc556b8dc48f
  note: "Manually confirmed"
vccs:
- commit: eb70e5ab8f95a81283623c03d2c99dfc59fcb319
  note: "File created with vulnerability in this commit"
upvotes: 4
unit_tested:
  code: false
  code_answer: "Unit tests were most likely not involved with the discovery
    due to how long it took to find the bug and the method of testing. The vulnerability was
    found 8 months post inclusion of the host.c file. If it was tested, this was most likely
    missed due to an oversight in transfer type checks. It also passed 2 stages of checkoffs,
    which means there was not an alert of any issue, something unit tests would catch."
  fix: true
  fix_answer: "The fix did not involve improving automated testing, but adding additional tests
    for different transfer types would make issues related to this not happen in the future."
discovered:
  answer: "There isn't any specific record of how this vulnerability was discovered. The
    closest record is a message chain on openwall between an individual at Redhat asking to create
    an entry for this vulnerability in response to the bug report on bugzilla.redhat.com
    (https://bugzilla.redhat.com/show_bug.cgi?id=959210). This test
    was most likely found by a developer at Freescale (now NXP). They were the ones to make the
    suggestion for the fix which was later signed off on. It is unclear what led them to finding the
    issue and the fix."
  automated: false
  contest: false
  developer: true
autodiscoverable:
  note: "This is a denial of service issue, which could have been discovered
    using a tool, but would be extremely difficult to do. It would require an external 
    device to connect to the port  and provide data for testing, as well as a program running
    on the hardware being tested. The test device would provide different types of data of different
    sizes and the hardware would report the outcome of the transfer. However, with all of this
    in mind, it would have to have knowledge of all of the types of transfer methods that
    are possible. This, incorporated with the fact that it would require multi system communication
    to test, make this extremely difficult to automatically discover."
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: "The issue was due to the data being received in a way that was not expected,
    but not in a way that was improperly designed and going against specifications."
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name: drivers
  note: "The problem was caused by a bad USB driver. File was in the 'drivers/usb/chipidea' directory"
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit: 1b36810e27a9791878e4694357ab6d4c06acc22d
    note: "introduction of the file"
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "This vulnerability is based on file types being transmitted, which has nothing
    to do with i18n"
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "This vulnerability is based on file types being transmitted, which is different
    than file permissions."
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: "Data is being supplied from another process, coming in from a data supply."
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security: false
  any_discussion: false
  note: "no record of discussions"
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: true
  note: "This fix was suggested by an employee of freescale (Peter Chen) and then signed off by another member
      of freespace (Fabio Estevam), as well as Greg Kroah-Hartman of the linux foundation. This information is in
      the commit message of the fix. View this at: https://github.com/torvalds/linux/commit/929473ea05db455ad88cdc081f2adc556b8dc48f"
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: true
  stacktrace_with_fix: false
  note: "The stacktrace doesn't specifically mention an error that occurred, it was the 
    result of a system time out due to the denial of service outcome. The fix to this is
    in the same file that causes the timeout by adding the transfer check, but isn't necessarily
    a problem with the code throwing an error."
forgotten_check:
  answer: true
  note: |
    This problem was caused by forgetting to check if the data being transmitted
    was non-streaming. As a result, the data would cause a blockage due to certain
    flags (OP_USBMODE, USBMODE_CI_SDIS, USBMODE_CI_SDIS) not being set properly.
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: \
    The check could happen at any time, but needs to happen. 
    The original had no check. While the data should be verified before the transfer,
    a double check should be ensured.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: "The data should be expected to break things, so it should be validated before
      sending it in to be processed."
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: "The issue is caused by the input from a system not being what
      was expected and being more complex than expected. The data should
      be validated when received to ensure it matches what is expected and
      able to be accepted. If it isn't, it should be talked about if the system 
      should change to understand and process the data or block it."
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer: "This vulnerability was caused by an oversight in what data was
    possible to be sent to the USB port. This is an issue of a lapse when it
    came to input checking. By not thinking through all possible forms of
    data input, it led to an issue that of potential attacks from outside
    sources or just inability to use the system in some ways."
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 406
CWE_note: "Manually confirmed"
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname: "Linux File Transfer DOS"
CVSS:
