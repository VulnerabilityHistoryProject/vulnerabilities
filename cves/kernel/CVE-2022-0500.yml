CVE: CVE-2022-0500
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: '2022-03-25'
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2022-03-25'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 34d3a78c681e8e7844b43d1a2f4671a04249c821
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: 20b2aff4bc15bda809f994761d5719827d66c0b4
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: 48946bd6a5d695c50b34546864b79c1f910a33c1
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: cf9f2f8d62eca810afbd1ee6cc0800202b000e57
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: 216e3cd2f28dbbf1fe86848e0e29e6693b9f0a20
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: 3c4807322660d4290ac9062c034aed6b87243861
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
- commit: c25b2ae136039ffa820c26138ed4a5e5f3ab3841
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: 3c4807322660d4290ac9062c034aed6b87243861
  note: Discovered automatically by archeogit.
- commit: 63d9b80dcf2c67bc5ade61cbbaa09d7af21f43f1
  note: Discovered automatically by archeogit.
- commit: 457f44363a8894135c85b7a9afd2bd8196db24ab
  note: Discovered automatically by archeogit.
- commit: eaa6bcb71ef6ed3dc18fc525ee7e293b06b4882b
  note: Discovered automatically by archeogit.
- commit: c25b2ae136039ffa820c26138ed4a5e5f3ab3841
  note: Discovered automatically by archeogit.
- commit: 4976b718c3551faba2c0616ef55ebeb74db1c5ca
  note: Discovered automatically by archeogit.
- commit: 22dc4a0f5ed11b6dc8fd73a0892fa0ea1a4c3cdf
  note: Discovered automatically by archeogit.
- commit: afbf21dce668ef59482037596eaffbe5041e094c
  note: Discovered automatically by archeogit.
- commit: d639b9d13a39cf15639cbe6e8b2c43eb60148a73
  note: Discovered automatically by archeogit.
- commit: f6dfbe31e8fa5cbd5bc89df9d7f0fa0af7e69981
  note: Discovered automatically by archeogit.
- commit: 06c1c049721a995dee2829ad13b24aaf5d7c5cce
  note: Discovered automatically by archeogit.
- commit: cba368c1f01c27ed62fca7a853531845d263bb01
  note: Discovered automatically by archeogit.
- commit: 1b986589680a2a5b6fc1ac196ea69925a93d9dd9
  note: Discovered automatically by archeogit.
- commit: f79e7ea571732a6e16f15c6e2f000c347e2d7431
  note: Discovered automatically by archeogit.
- commit: fd978bf7fd312581a7ca454a991f0ffb34c4204b
  note: Discovered automatically by archeogit.
- commit: 638f5b90d46016372a8e3e0a434f199cc5e12b8c
  note: Discovered automatically by archeogit.
- commit: f1174f77b50c94eecaa658fdc56fa69b421de4b8
  note: Discovered automatically by archeogit.
- commit: 6ac99e8f23d4b10258406ca0dd7bffca5f31da9d
  note: Discovered automatically by archeogit.
- commit: db1ac4964fa172803a0fea83033cd35d380a8a77
  note: Discovered automatically by archeogit.
- commit: f318903c0bf42448b4c884732df2bbb0ef7a2284
  note: Discovered automatically by archeogit.
- commit: e9ddbb7707ff5891616240026062b8c1e29864ca
  note: Discovered automatically by archeogit.
- commit: 69c087ba6225b574afb6e505b72cb75242a3d844
  note: Discovered automatically by archeogit.
- commit: fff13c4bb646ef849fd74ced87eef54340d28c21
  note: Discovered automatically by archeogit.
- commit: b00628b1c7d595ae5b544e059c27b1f5828314b4
  note: Discovered automatically by archeogit.
- commit: fd1b0d604c56e0d9f143b39a92132a2ea9625e6d
  note: Discovered automatically by archeogit.
- commit: 901334159419afc8c1b8556243fc53e9617472d2
  note: Discovered automatically by archeogit.
- commit: 912f442cfb1fc695510e055bdae5f4a88e4de6b8
  note: Discovered automatically by archeogit.
- commit: 2ea864c58f19bf70a0e2415f9f1c53814e07f1b4
  note: Discovered automatically by archeogit.
- commit: a968d5e277f1a640a3184561ac2c39261ba79196
  note: Discovered automatically by archeogit.
- commit: e5069b9c23b3857db986c58801bebe450cff3392
  note: Discovered automatically by archeogit.
- commit: 20b2aff4bc15bda809f994761d5719827d66c0b4
  note: Discovered automatically by archeogit.
- commit: 3d78417b60fba249cc555468cb72d96f5cde2964
  note: Discovered automatically by archeogit.
- commit: 4e63acdff864654cee0ac5aaeda3913798ee78f6
  note: Discovered automatically by archeogit.
- commit: d7a4cb9b6705a89937d12c8158a35a3145dc967a
  note: Discovered automatically by archeogit.
- commit: 6890896bd765b0504761c61901c9804fca23bfb2
  note: Discovered automatically by archeogit.
- commit: 7b15523a989b63927c2bb08e9b5b0bbc10b58bef
  note: Discovered automatically by archeogit.
- commit: 79a7f8bdb159d9914b58740f3d31d602a6e4aca8
  note: Discovered automatically by archeogit.
- commit: 39f19ebbf57b403695f7b5f9cf322fe1ddb5d7fb
  note: Discovered automatically by archeogit.
- commit: 492e639f0c222784e2e0f121966375f641c61b15
  note: Discovered automatically by archeogit.
- commit: 10aceb629e198429c849d5e995c3bb1ba7a9aaa3
  note: Discovered automatically by archeogit.
- commit: eb411377aed9e27835e77ee0710ee8f4649958f3
  note: Discovered automatically by archeogit.
- commit: c4d0bfb45068d853a478b9067a95969b1886a30f
  note: Discovered automatically by archeogit.
- commit: c4f6699dfcb8558d138fe838f741b2c10f416cf9
  note: Discovered automatically by archeogit.
- commit: c195651e565ae7f41a68acb7d4aa7390ad215de1
  note: Discovered automatically by archeogit.
- commit: fe94cc290f535709d3c5ebd1e472dfd0aec7ee79
  note: Discovered automatically by archeogit.
- commit: edbf8c01de5a104a71ed6df2bf6421ceb2836a8e
  note: Discovered automatically by archeogit.
- commit: beecf11bc2188067824591612151c4dc6ec383c7
  note: Discovered automatically by archeogit.
- commit: 6acc9b432e6714d72d7d77ec7c27f6f8358d0c71
  note: Discovered automatically by archeogit.
- commit: c8123ead13a5c92dc5fd15c0fdfe88eef41e6ac1
  note: Discovered automatically by archeogit.
- commit: 6c49e65e0d462963b4fac97ebd87014342167027
  note: Discovered automatically by archeogit.
- commit: 399040847084a69f345e0a52fd62f04654e0fce3
  note: Discovered automatically by archeogit.
- commit: 70d66244317e958092e9c971b08dd5b7fd29d9cb
  note: Discovered automatically by archeogit.
- commit: ba452c9e996d8a4c347b32805f91abb70de5de7e
  note: Discovered automatically by archeogit.
- commit: a7658e1a4164ce2b9eb4a11aadbba38586e93bd6
  note: Discovered automatically by archeogit.
- commit: d831ee84bfc9173eecf30dbbc2553ae81b996c60
  note: Discovered automatically by archeogit.
- commit: 3cee6fb8e69ecd79be891c89a94974c48a25a437
  note: Discovered automatically by archeogit.
- commit: d74bad4e74ee373787a9ae24197c17b7cdc428d5
  note: Discovered automatically by archeogit.
- commit: 3e0bd37ce0e4a574df6d87a901e13bcb46e10301
  note: Discovered automatically by archeogit.
- commit: '0813a841566f0962a5551be7749b43c45f0022a0'
  note: Discovered automatically by archeogit.
- commit: 17a5267067f3c372fec9ffb798d6eaba6b5e6a4c
  note: Discovered automatically by archeogit.
- commit: c64b7983288e636356f7f5f652de4813e1cfedac
  note: Discovered automatically by archeogit.
- commit: 655a51e536c09d15ffa3603b1b6fce2b45b85a1f
  note: Discovered automatically by archeogit.
- commit: 85a51f8c28b9812642d76db6889f3f39dc3fbab3
  note: Discovered automatically by archeogit.
- commit: af7ec13833619e17f03aa73a785a2f871da6d66b
  note: Discovered automatically by archeogit.
- commit: 3ca1032ab7ab010eccb107aa515598788f7d93bb
  note: Discovered automatically by archeogit.
- commit: 4d31f30148cea6e97e42616231eed55295117fe7
  note: Discovered automatically by archeogit.
- commit: 3e6a4b3e0289dc9540a2c1d8a20657f4707fbabb
  note: Discovered automatically by archeogit.
- commit: 33ff9823c569f3aceb071071914919177a6bed6a
  note: Discovered automatically by archeogit.
- commit: 61bd5218eef349fcacc4976a251bc83a4748b4af
  note: Discovered automatically by archeogit.
- commit: ebb676daa1a340ccef25eb769aefc09b79c01f8a
  note: Discovered automatically by archeogit.
- commit: 19de99f70b87fcc3338da52a89c439b088cbff71
  note: Discovered automatically by archeogit.
- commit: 46f8bc92758c6259bcf945e9216098661c1587cd
  note: Discovered automatically by archeogit.
- commit: ba5f4cfeac77fca981b199ec7f2396a3616e5216
  note: Discovered automatically by archeogit.
- commit: e6ac2450d6dee3121cd8bbf2907b78a68a8a353d
  note: Discovered automatically by archeogit.
- commit: b03c9f9fdc37dab81ea04d5dacdc5995d4c224c2
  note: Discovered automatically by archeogit.
- commit: 8e9cd9ce90d48369b2c5ddd79fe3d4a4cb1ccb56
  note: Discovered automatically by archeogit.
- commit: 0f55f9ed21f96630c6ec96805d42f92c0b458b37
  note: Discovered automatically by archeogit.
- commit: 58e2af8b3a6b587e4ac8414343581da4349d3c0f
  note: Discovered automatically by archeogit.
- commit: bb7f0f989ca7de1153bd128a40a71709e339fa03
  note: Discovered automatically by archeogit.
- commit: 484611357c19f9e19ef742ebef4505a07d243cc9
  note: Discovered automatically by archeogit.
- commit: 2e5766483c8c5cf886b4dc647a1741738dde7d79
  note: Discovered automatically by archeogit.
- commit: be2d04d11fd33bd46622f94619aae1596d9f9303
  note: Discovered automatically by archeogit.
- commit: a5cbe05a6673b85bed2a63ffcfea6a96c6410cff
  note: Discovered automatically by archeogit.
- commit: 4ddb74165ae580b6dcbb5ab1919d994fc8d03c3f
  note: Discovered automatically by archeogit.
- commit: b121b341e5983bdccf7a5d6cf9236a45c965a31f
  note: Discovered automatically by archeogit.
- commit: aad2eeaf46973a0968a75640cd1f8f1c650322a0
  note: Discovered automatically by archeogit.
- commit: 840b9615d6e9d134178b4dd4f3c30aa30643a379
  note: Discovered automatically by archeogit.
- commit: 969bf05eb3cedd5a8d4b7c346a85c2ede87a6d6d
  note: Discovered automatically by archeogit.
- commit: 0d004c020b5574e51f7a525e57d2a11958b334b5
  note: Discovered automatically by archeogit.
- commit: de8f3a83b0a0fddb2cf56e7a718127e9619ea3da
  note: Discovered automatically by archeogit.
- commit: 1be7f75d1668d6296b80bf35dcf6762393530afc
  note: Discovered automatically by archeogit.
- commit: 2a159c6f82381a458bc56e7e202b6bee57a2ccb7
  note: Discovered automatically by archeogit.
- commit: e16d2f1ab96849b4b65e64b82550a7ecdbf405eb
  note: Discovered automatically by archeogit.
- commit: 93c230e3f5bd6e1d2b2759d582fdfe9c2731473b
  note: Discovered automatically by archeogit.
- commit: 7c6967326267bd5c0dded0a99541357d70dd11ac
  note: Discovered automatically by archeogit.
- commit: d58e468b1112dcd1d5193c0a89ff9f98b5a3e8b9
  note: Discovered automatically by archeogit.
- commit: 9df1c28bb75217b244257152ab7d788bb2a386d0
  note: Discovered automatically by archeogit.
- commit: fada7fdc83c0bf8755956bff707c42b609223301
  note: Discovered automatically by archeogit.
- commit: 9e15db66136a14cde3f35691f1d839d950118826
  note: Discovered automatically by archeogit.
- commit: 4e92024a48ecbd06fba3ccfb2174abd3d2f54a83
  note: Discovered automatically by archeogit.
- commit: b5dc0163d8fd78e64a7e21f309cf932fda34353e
  note: Discovered automatically by archeogit.
- commit: 33ccec5fd740d0d5b78b77846f76eb5b4feb4327
  note: Discovered automatically by archeogit.
- commit: 9242b5f5615c823bfc1e9aea284617ff25a55f10
  note: Discovered automatically by archeogit.
- commit: 744ea4e3885eccb6d332a06fae9eb7420a622c0f
  note: Discovered automatically by archeogit.
- commit: 5327ed3d44b754f5cc51d5b3f18e442eaebacff5
  note: Discovered automatically by archeogit.
- commit: dc503a8ad98474ea0073a1c5c4d9f18cb8dd0dbf
  note: Discovered automatically by archeogit.
- commit: bfc6bb74e4f16ab264fa73398a7a79d7d2afac2e
  note: Discovered automatically by archeogit.
- commit: f782e2c300a717233b64697affda3ea7aac00b2b
  note: Discovered automatically by archeogit.
- commit: 390ee7e29fc8e6e90d3065b00afb047c4ee552f9
  note: Discovered automatically by archeogit.
- commit: d83525ca62cf8ebe3271d14c36fb900c294274a2
  note: Discovered automatically by archeogit.
- commit: 5ce6e77c7edf7310a0ff9532fd6b9693c082ab32
  note: Discovered automatically by archeogit.
- commit: 0365351524d7560d8ed7a42801a15252c6c56f41
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 119
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
