CVE: CVE-2013-1958
yaml_instructions: |
    =================
    ===YAML Primer===
    =================
    This is a dictionary data structure, akin to JSON.
    Everything before a colon is a key, and the values here are usually strings
    For one-line strings, you can just use quotes after the colon
    For multi-line strings, as we do for our instructions, you put a | and then
    indent by two spaces

    For readability, we hard-wrap multi-line strings at 80 characters. This is
    not required, but appreciated.
curated_instructions: |
    If you are manually editing this file, then you are "curating" it.

    Set the version number that you were given in your instructions.

    This will enable additional editorial checks on this file to make sure you
    fill everything out properly. If you are a student, we cannot accept your work
    as finished unless curated is properly updated.
curation_level: 2
reported_instructions: |
    What date was the vulnerability reported to the security team? Look at the
    security bulletins and bug reports. It is not necessarily the same day that
    the CVE was created.  Leave blank if no date is given.

    Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
    Was there a date that this vulnerability was announced to the world? You can
    find this in changelogs, blogs, bug reports, or perhaps the CVE date.

    This is not the same as published date in the NVD - that is below.

    Please enter your date in YYYY-MM-DD format.
announced_date: "2013-04-24"
published_instructions: |
    Is there a published fix or patch date for this vulnerability?
    Please enter your date in YYYY-MM-DD format.
published_date: "2013-04-24"
description_instructions: |
    You can get an initial description from the CVE entry on cve.mitre.org. These
    descriptions are a fine start, but they can be kind of jargony.

    Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
    read to anyone with some programming experience. We can always pull up the NVD
    description later to get more technical.

    Try to still be specific in your description, but remove project-specific
    stuff. Remove references to versions, specific filenames, and other jargon
    that outsiders to this project would not understand. Technology like "regular
    expressions" is fine, and security phrases like "invalid write" are fine to
    keep too.

    Your target audience is people just like you before you took any course in
    security
description: |
    "The Linux kernel before version 3.8.6 contained a flaw in how it handled
    setting UNIX domain socket process ID (PID) permissions during the creation
    of new user and PID namespaces. A race condition existed where a local
    attacker could temporarily gain elevated privileges in a new user namespace
    to create sockets with PIDs that improperly mapped to the global PID
    namespace. This allowed unauthorized access to domain sockets not belonging
    to the attacker's process. The issue was addressed by properly checking
    capabilities relative to the PID namespace when setting socket PIDs, closing
    the temporary privilege escalation window."
bounty_instructions: |
    If you came across any indications that a bounty was paid out for this
    vulnerability, fill it out here. Or correct it if the information already here
    was wrong. Otherwise, leave it blank.
bounty:
    amt:
    announced:
    url:
reviews: []
bugs_instructions: |
    What bugs are involved in this vulnerability?

    Please list bug IDs to https://bugzilla.kernel.org/

    Bug ID's can appear in several places:
      * Mentioned in commit messages
      * Mentioned in mailing list discussions
      * References from NVD entry
      * Various other places
bugs: []
fixes_instructions: |
    Please put the commit hash in "commit" below.

    This must be a git commit hash from the systemd source repo, a  40-character
    hexademical string/

    Place any notes you would like to make in the notes field.
fixes:
    - commit: 92f28d973cce45ef5823209aab3138eb45d8b349
      note: "Manually confirmed"
vcc_instructions: |
    The vulnerability-contributing commits.

    These are found by our tools by traversing the Git Blame history, where we
    determine which commit(s) introduced the functionality.

    Look up these VCC commits and verify that they are not simple refactorings,
    and that they are, in fact introducing the vulnerability into the system.
    Often, introducing the file or function is where the VCC is, but VCCs can be
    anything.

    Place any notes you would like to make in the notes field.
vccs:
    - commit: 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
      note: Discovered automatically by archeogit.
    - commit: b488893a390edfe027bae7a46e9af8083e740668
      note: Discovered automatically by archeogit.
    - commit: 5a0e3ad6af8660be21ca98a971cd00f331318c05
      note: Discovered automatically by archeogit.
    - commit: 00f70de09c418bfb028d03f046e39c1d301db7b2
      note: Discovered automatically by archeogit.
upvotes_instructions: |
    For the first round, ignore this upvotes number.

    For the second round of reviewing, you will be giving a certain amount of
    upvotes to each vulnerability you see. Your peers will tell you how
    interesting they think this vulnerability is, and you'll add that to the
    upvotes score on your branch.
upvotes:
unit_tested:
    question: |
        Were automated unit tests involved in this vulnerability?
        Was the original code unit tested, or not unit tested? Did the fix involve
        improving the automated tests?

        For code: and fix: - your answer should be boolean.

        For the code_answer below, look not only at the fix but the surrounding
        code near the fix in related directories and determine if and was there were
        unit tests involved for this subsystem.

        For the fix_answer below, check if the fix for the vulnerability involves
        adding or improving an automated test to ensure this doesn't happen again.
    code: False
    code_answer: "No unit tests associated with the vulnerability."
    fix: False
    fix_answer: "No unit tests associated with the vulnerability."
discovered:
    question: |
        How was this vulnerability discovered?

        Go to the bug report and read the conversation to find out how this was
        originally found. Answer in longform below in "answer", fill in the date in
        YYYY-MM-DD, and then determine if the vulnerability was found by a Google
        employee (you can tell from their email address). If it's clear that the
        vulenrability was discovered by a contest, fill in the name there.

        The automated, contest, and developer flags can be true, false, or nil.

        If there is no evidence as to how this vulnerability was found, then please
        explain where you looked.
    answer: |
        "No direct confirmation of discovery, but the source on the NVD page and
        the email thread on openwall.com both show Red Hat Security as the
        source. The email on Openwall showed that it was part of a group of
        bugfixes, so it's possible that Red Hat Security came in and discovered
        a number of bugs in the kernel. It was fixed in a commit by Eric
        Biederman."
    automated: False
    contest: False
    developer: True
autodiscoverable:
    instructions: |
        Is it plausible that a fully automated tool could have discovered
        this? These are tools that require little knowledge of the domain,
         e.g. automatic static analysis, compiler warnings, fuzzers.

        Examples for true answers: SQL injection, XSS, buffer overflow

        In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

        Examples for false: RFC violations, permissions issues, anything
        that requires the tool to be "aware" of the project's
        domain-specific requirements.

        The answer field should be boolean. In answer_note, please explain
        why you come to that conclusion.
    note: "Permission issue, so not autodiscoverable."
    answer: False
specification:
    instructions: |
        Is there mention of a violation of a specification? For example, the POSIX
        spec, an RFC spec, a network protocol spec, or some other requirements
        specification.

        Be sure to check the following artifacts for this:
          * bug reports
          * security advisories
          * commit message
          * mailing lists
          * anything else

        The answer field should be boolean. In answer_note, please explain
        why you come to that conclusion.
    note: "No mention of a specification violation as far as I can tell."
    answer: False
subsystem:
    question: |
        What subsystems was the mistake in? These are WITHIN linux kernel

        Determining the subsystem is a subjective task. This is to help us group
         similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

        Some areas to look for pertinent information:
          - Bug labels
          - Directory names
          - How developers refer to an area of the system in comments,
            commit messages, etc.

        Look at the path of the source code files code that were fixed to get
        directory names. Look at comments in the code. Look at the bug reports how
        the bug report was tagged.

        Example linux kernel subsystems are:
          * drivers
          * crypto
          * fs
          * net
          * lib

        Name should be:
          * all lowercase English letters
          * NOT a specific file
          * can have digits, and _-@/

        Can be multiple subsystems involved, in which case you can make it an array
        e.g.
            name: ["subsystemA", "subsystemB"] # ok
            name: subsystemA # also ok
    name: net
    note: "scm.c, the file with the vulnerability, is part of the net/core folder."
interesting_commits:
    question: |
        Are there any interesting commits between your VCC(s) and fix(es)?

        Use this to specify any commits you think are notable in some way, and
        explain why in the note.

        Example interesting commits:
          * Mentioned as a problematic commit in the past
            e.g. "This fixes regression in commit xys"
          * A significant rewrite in the git history
          * Other commits that fixed a similar issue as this vulnerability
          * Anything else you find interesting.
    commits:
        - commit:
          note:
        - commit:
          note:
i18n:
    question: |
        Was the feature impacted by this vulnerability about internationalization
        (i18n)?

        An internationalization feature is one that enables people from all
        over the world to use the system. This includes translations, locales,
        typography, unicode, or various other features.

        Answer should be true or false
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    answer: False
    note: "No mention of i18n in the commit message or any other related artifacts."
sandbox:
    question: |
        Did this vulnerability violate a sandboxing feature that the system
        provides?

        A sandboxing feature is one that allows files, users, or other features
        limited access. Vulnerabilities that violate sandboxes are usually based on
        access control, checking privileges incorrectly, path traversal, and the
        like.

        Answer should be true or false
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    answer: False
    note: |
        "Took advantage of a race condition in initializing new namespaces,
        rather than escaping an existing sandbox"
ipc:
    question: |
        Did the feature that this vulnerability affected use inter-process
        communication? IPC includes OS signals, pipes, stdin/stdout, message
        passing, and clipboard. Writing to files that another program in this
        software system reads is another form of IPC.

        Answer must be true or false.
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    answer: True
    note: |
        "The vulnerabilty deals in handling UNIX domain sockets, which are a
        form of IPC."
discussion:
    question: |
        Was there any discussion surrounding this?

        A discussion can include debates, disputes, or polite talk about how to
        resolve uncertainty.

        Example include:
          * Is this out of our scope?
          * Is this a security?
          * How should we fix this?

        Just because you see multiple comments doesn't mean it's a discussion.
        For example:
          * "Fix line 10". "Ok" is not what we call a discussion
          * "Ping" (reminding people)

        Check the bugs reports, pull requests, and mailing lists archives.

        These answers should be boolean.
          discussed_as_security: true or false
          any_discussion: true or false

        Put any links to disagreements you found in the notes section, or any other
        comment you want to make.
    discussed_as_security: False
    any_discussion: False
    note: "No real notable discussion found"
vouch:
    question: |
        Was there any part of the fix that involved one person vouching for
        another's work?

        This can include:
          * signing off on a commit message
          * mentioning a discussion with a colleague checking the work
          * upvoting a solution on a pull request

        Answer must be true or false.
        Write a note about how you came to the conclusions you did, regardless of what your answer was.
    answer: True
    note: |
        "In the commit message, it was signed off and fixed by Eric Biederman,
        and reported by Andy Lutomirski. I suspect Kurt Seifried from Redhat was
        involved in the discovery of this bug, and the summary of user bugs
        email found on Openwall has Brain Martin in the conversation as well."
stacktrace:
    question: |
        Are there any stacktraces in the bug reports?

        Secondly, if there is a stacktrace, is the fix in the same file that the
        stacktrace points to?

        If there are no stacktraces, then both of these are false - but be sure to
        mention where you checked in the note.

        Answer must be true or false.
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    any_stacktraces: False
    stacktrace_with_fix: False
    note: "No stacktrace found"
forgotten_check:
    question: |
        Does the fix for the vulnerability involve adding a forgotten check?

        A "forgotten check" can mean many things. It often manifests as the fix
        inserting an entire if-statement or a conditional to an existing
        if-statement. Or a call to a method that checks something.

        Example of checks can include:
          * null pointer checks
          * check the current role, e.g. root
          * boundary checks for a number
          * consult file permissions
          * check a return value

        Answer must be true or false.
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    answer: True
    note: |
        "The fixed code checks if the current process has CAP_SYS_ADMIN
        capability in the PID namespace's user namespace, instead of just in its
        own user namespace"
order_of_operations:
    question: |
        Does the fix for the vulnerability involve correcting an order of
        operations?

        This means the fix involves moving code around or changing the order of
        how things are done.

        Answer must be true or false.
        Write a note about how you came to the conclusions you did, regardless of
        what your answer was.
    answer: False
    note: "No order of operations were involved in the fix"
lessons:
    question: |
        Are there any common lessons we have learned from class that apply to this
        vulnerability? In other words, could this vulnerability serve as an example
        of one of those lessons?

        Leave "applies" blank or put false if you did not see that lesson (you do
        not need to put a reason). Put "true" if you feel the lesson applies and put
        a quick explanation of how it applies.

        Don't feel the need to claim that ALL of these apply, but it's pretty likely
        that one or two of them apply.

        If you think of another lesson we covered in class that applies here, feel
        free to give it a small name and add one in the same format as these.
    defense_in_depth:
        applies: True
        note: |
            "Relying solely on capability checks around namespaces was a single
            point of failure. Additional defenses could have helped mitigate the
            impact."
    least_privilege:
        applies: True
        note: |
            "The issue arose from a race condition that temporarily allowed
            elevated privilege. Following the principle of least privilege for
            processes would have helped prevent this."
    frameworks_are_optional:
        applies: False
        note:
    native_wrappers:
        applies: False
        note:
    distrust_input:
        applies: False
        note:
    security_by_obscurity:
        applies: False
        note:
    serial_killer:
        applies: False
        note:
    environment_variables:
        applies: False
        note:
    secure_by_default:
        applies: False
        note:
    yagni:
        applies: False
        note:
    complex_inputs:
        applies: False
        note:
mistakes:
    question: |
        In your opinion, after all of this research, what mistakes were made that
        led to this vulnerability? Coding mistakes? Design mistakes?
        Maintainability? Requirements? Miscommunications?

        There can, and usually are, many mistakes behind a vulnerability.

        Remember that mistakes can come in many forms:
        * slip: failing to complete a properly planned step due to inattention
                  e.g. wrong key in the ignition
                  e.g. using < instead of <=
        * lapse: failing to complete a properly planned step due to memory failure
                  e.g. forgetting to put car in reverse before backing up
                  e.g. forgetting to check null
        * planning error: error that occurs when the plan is inadequate
                  e.g. getting stuck in traffic because you didn't consider the
                       impact of the bridge closing
                  e.g. calling the wrong method
                  e.g. using a poor design

        These are grey areas, of course. But do your best to analyze the mistakes
        according to this framework.

        Look at the CWE entry for this vulnerability and examine the mitigations
        they have written there. Are they doing those? Does the fix look proper?

        Write a thoughtful entry here that people in the software engineering
        industry would find interesting.
    answer: |
        "This vulnerability just seemed like a lack of consideration for edge
        cases, and so is probably a design mistake. A race condition like this
        seems like it could be hard to detect without intentional pen testing.
        The fixed code checks if the current process has proper permissions in
        the PID namespace's user namespace, instead of just in its own user
        namespace. This eliminates the race condition by checking for the
        correct permissions before the new PID namespace is even fully created"
CWE_instructions: |
    Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
    entry that describes your vulnerability. We recommend going to
    https://cwe.mitre.org/data/definitions/699.html for the Software Development
    view of the vulnerabilities. We also recommend the tool
    http://www.cwevis.org/viz to help see how the classifications work.

    If you have anything to note about why you classified it this way, write
    something in CWE_note. This field is optional.

    Just the number here is fine. No need for name or CWE prefix. If more than one
    apply here, then place them in an array like this
      CWE: ["123", "456"] # this is ok
      CWE: [123, 456]     # also ok
      CWE: 123            # also ok
CWE: [264, 269]
CWE_note: "Manually confirmed"
nickname_instructions: |
    A catchy name for this vulnerability that would draw attention it.
    If the report mentions a nickname, use that.
    Must be under 30 characters. Optional.
nickname: "PID Namespace Gap"
CVSS: (AV:L/AC:M/Au:N/C:N/I:P/A:N)
