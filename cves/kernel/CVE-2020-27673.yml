CVE: CVE-2020-27673
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 2
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: 2020-11-05
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2020-10-22T2115:14.013
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  Handling Xen (hardware) events in the Linux kernel runs with interrupts
  disabled in a loop until no further event is pending.
  Whenever an event has been accepted by the kernel, another event can
  come in via the same event channel.  This can result in the event
  handling loop running for an extended time if new events are coming in
  at a high rate.  In extreme cases this can lead to a complete hang of
  the kernel, resulting in a DoS situation of the host when dom0 is
  affected. 
  (from openwall https://www.openwall.com/lists/oss-security/2021/01/19/6)
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: [1177409, 1177412, 1177413, 1177414]
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit: e99502f76271d6bc4e374fe368c50c67a1fd3070
  note: "Manually confirmed"
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: "2ec16bc0fc7ab544f2d405fd4fdd0d717c5ec0c5"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "30978346372e5c43a652cfbd4533c6bd5427c33b"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "589d03e93f6cd595f68891e48f0804f2c8f38aae"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "ab9a1cca3d172876ae9d5edb63abce7986045597"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "d0b075ffeede257342c3afdbeadd2fda8504ecee." 
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "9a489f45a155fe96b9b55fbbef2b757ef7737cfc"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "54c9de89895e0a36047fcc4ae754ea5b8655fb9d"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "073d0552ead5bfc7a3a9c01de590e924f11b5dd2"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "7beb290caa2adb0a399e735a1e175db9aae0523a"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "e46cdb66c8fc1c8d61cfae0f219ff47ac4b9d531"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "6cb6537d34a146c8f3e232da9ffd79ae1265fed3"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "38e20b07efd541a959de367dc90a17f92ce2e8a6"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "1fe565517b57676884349dccfd6ce853ec338636"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "f87e4cac4f4e940b328d3deb5b53e642e3881f43"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "7e186bdd0098b34c69fb8067c67340ae610ea499"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: '0891fb39ba67bd7ae023ea0d367297ffff010781'
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "348be43384e6bcd5e9da7ff5f1680d49f65c488d"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "229664bee6126e01f8662976a5fe2e79813b77c8"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "f731e3ef02b4744f4d7ca2f63539b900e47db31f"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "0ec53ecf38bcbf95b4b057328a8fbba4d22ef28b"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "b5328cd14557880e9eb757a8a9c8a88f1b23533a"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "c149e4cd08ba01f4d2d0104f469d5f5419294e06"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "ca62ce8cde36cde5a31af8f9bb23e6430700e437"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "94032c506720e26402db64987e08168565b57990"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "9158c3588a0693ef11208f5961f0d6b0241694d8"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "780f36d8b3fa9572f731d4fb85067b2e45e6f993"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "3de88d622fd68bd4dbee0f80168218b23f798fd0"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "0102e4efda76d0721bc744dd80258eb6cfa25fc3"
  :note: "Discovered automatically by archeogit. Refactoring."
- commit: "c8761e2016aa51a2829563b02a0a55913bdb0be8"
  :note: "Discovered automatically by archeogit. Manually confirmed."
- commit: "4892c9b4ada9f9a71a0da7a268f95e988d88064b"
  :note: "Discovered automatically by archeogit. Manually confirmed."
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: false
  code_answer: false
  fix: false
  fix_answer: false
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: "discovered by Julien Grall from Arm"
  automated: nil
  contest: nil
  developer: nil
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    this is a case for denial of service when the system is overloaded. 
    entirely possible to load test using an automated tool.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    no evidence to support that this was a violation according to mailing
    lists.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name: ipc
  note: |
    crashes are due to events coming in that can't be handled. inter-process
    communication handles this in the linux kernel.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "denial of service related to volume of requests, not i18n."
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "denial of service related to volume of requests, not acess related."
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: "denials result due to too many events (from various processes) coming."
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security: true
  any_discussion: true
  note: "discussions in bug reports."
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: true
  note: "patches were signed off"
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: true
  stacktrace_with_fix: true
  note: "mailing lists"
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "patch involves updates."
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "patch involves updates."
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: "make sure to have updates, and multiple layers of security."
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer: |
    This is a planning error that might have been identified with further load
    testing. This is a bit more complex so there isn't a lot of programmer
    errors and may have been the limitations of the version being used (the
    path involved updates). Shows us that it is important to update our tools
    but also some things go wrong- in this case, there is no CWE either.
    Security is evolving.
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE: 400
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname: "uncontrolled resources"
CVSS: "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"
