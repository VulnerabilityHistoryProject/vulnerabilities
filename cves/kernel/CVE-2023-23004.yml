CVE: CVE-2023-23004
curation_level: 2
reported_date:
announced_date: '2023-03-01'
published_date: '2023-03-01'
description: |
  This vulnerability was in the library containing drivers for the ARM GPU.
  While doing error checking for one of the functions, the return value was 
  misinterpreted. The function returns an error pointer, but the error case
  was expecting NULL. This could result in a denial of service error, as it 
  leads to a NULL pointer dereference. 
bounty:
  amt:
  announced:
  url:
reviews: []
bugs: ["https://github.com/advisories/GHSA-7qv5-68gm-jf96"]
fixes:
- commit: 15342f930ebebcfe36f2415049736a77d7d2e045
  note: Manually confirmed
vccs:
- commit: 1f23a56a46b81de50eb8b898f06296ca06720a99
  note: Discovered automatically by archeogit.
upvotes: 2
unit_tested:
  code: false
  code_answer: false
  fix: false
  fix_answer:  |
    I did not find any unit tests for this module.
    It is likely that this error was found through system use,
    as it could lead to a DoS if manipulated.
discovered:
  answer: |
    I looked through bug reports and history on the vulnerability and could not find
    specific information about how it was discovered. It was reported and fixed by a security 
    engineer that likely found it while using the system and exploring potential vulnerabilities.
  automated: false
  contest: false
  developer: false
autodiscoverable:
  note: |
    There is a good chance that this could have been caught by a compiler or code editor. 
    Some editors will warn you if the return type of a function does not correlate with the use case.
    C compiler warnings could have been able to flag the mismatched types here.
  answer: true
specification:
  note: There is not a violation of a specification, just a standard coding error.
  answer: false
subsystem:
  name: gpu
  note: The file fixed for this vulnerability was contained within the GPU drivers for the system.
interesting_commits:
  commits:
  - commit: 
    note:
i18n:
  answer: false
  note: This vulnerability is unrelated to i18n, it only relates to the null check on the return.
sandbox:
  answer: false
  note: This vulnerability does not involve permissions or file access.
ipc:
  answer: false
  note: |
    There is not inter-process communication involved, 
    as the vulnerability was limited to the incorrect check on the return.
discussion:
  discussed_as_security: false
  any_discussion: false 
  note: |
    I was unable to find discussion about this vulnerability, but there are
    many resources issuing warnings and information about it. This is likely due 
    to the potential severity, as the bug can lead to a DoS.
vouch:
  answer: true
  note: |
    Miaoqian Lin (linmq006@gmail.com) and Liviu Dudao (liviu.dudau@arm.com) signed off on the commit. 
    Miaoqian Lin also authored the commit.
stacktrace:
  any_stacktraces: true
  stacktrace_with_fix: true
  note: |
    The vulnerability was sourced to a specific file, being
    drivers/gpu/drm/arm/malidp_planes.c.
forgotten_check:
  answer: true
  note: |
    Yes, this vulnerability was due to a forgotten check of sorts. There was a check in place,
    but it was checking for the incorrect return type. The correct check, which would be for the error 
    pointer, was not included originally.
order_of_operations:
  answer: false
  note: |
    This vulerability is not related to order of operations, as it was
    isolated to the incorrect return check.  
lessons:
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note: 
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies: true
    note: |
      This principle is the closest related to this vulnerability, as it was due to
      a misunderstanding in a pretty complex system. When dealing with complex data and code, avoid
      assumptions about how the system functions.
mistakes:
  answer: |
    This vulnerability was due to a common lapse that is typical at 
    all skill levels. When using a function, it is important to double-check how it works,
    and especially how it handles input and output. In this case, there was
    a misunderstanding in what type the output was, and it led to a NULL pointer dereference 
    when the returned error pointer was treated as if it was NULL.
CWE: '476'
CWE_note:
nickname: SG Table Null Error Return
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H