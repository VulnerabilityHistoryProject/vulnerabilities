CVE: CVE-2013-3228
CWE:
  - 200
ipc: Yes. The affected function receives messages from external IR connections. It is part of a subsystem enabling IPC.
CVSS:
bugs: []
i18n:
  note: The messages being received are not read for text data, so i18n shouldn't be an issue.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs:
  - commit: 0dc47877a3de00ceadea0005189656ae8dc52669
    note: This makes a patch closeby while skipping over this vulnerability. Note that the vulnerability existed in the kernel for the lifetime of the IrDA module.
fixes:
  - commit: f89e8a6432409c6cbd5c2b6bb90ea694fd558de3
    note: "Fix is merged along with the branch of similar information leak fixes."
  - commit: 5ae94c0d2f0bed41d6718be743985d61b7f5c47d
    note: "Initial fixing commit, manually confirmed."
vouch:
  note: "The fixing commit was only signed by the committer and author." 
  answer: false
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:The msg parameter contains a large number of attributes that may not be initialized. Needing to handle these to prevent an information leak was unclear initially.
  distrust_input:
    note:
    applies:
  least_privilege:
    note:
    applies:
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note:
    applies:
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies:
reviews: []
sandbox:
  note:
  answer:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
upvotes: 2
CWE_note: |
  Manually confirmed.
mistakes: This vulnerability is the result of a simple coding slip. An ambiguous
  input meant it was unclear a particular value needed to be reset to 0.
  Missing this value reset enabled an information leak with an unusual
  attack vector that might not be considered during authoring or code reviewing
  this file. Maybe with better/more accessible documentation of the details of
  the ambiguous msg input, this would have been caught earlier. The fix is
  simple and was able to be distributed to many affected protocols at once. Due
  to the number of common protocols with the same vulnerability, it's possible
  that copy-pasting was involved at some point and allowed for the proliferation
  of this problem.
nickname: 
subsystem: ["IrDA"]
discovered: Discovered with related vulnerabilities
discussion:
  note: "No discussion directly related to this vulnerability. A bug report
        was filed that seemed to be causing crashes in an AWS instance, but
        it was unclear if this crash was due to this vulnerability."
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: false
  discussed_as_security: false
stacktrace:
  note: The connected bug on bugzilla seems disconnected, but also does not contain any stacktraces.
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
description: |
  In the IR subsystem of the Linux kernel, a function responsible for receiving messages
  was affected by an information leak. The message variable's length property needed to be reset to 0.
  Missing this value reset enabled an information leak where a small part of protected kernel memory
  could be read, possibly enabling the disclosure of sensative system information.
unit_tested:
  fix:
  code:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer:
  code_answer:
reported_date: 2013-04-07
specification:
  note: There was no formal specification or documentation surrounding the use of the msg variable and the need to clear the affected variable.
  answer: false
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2013-04-22
curation_level: 2
published_date: 2013-04-22
forgotten_check:
  note: A value needed to be set but there was no check involved.
  answer: false
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: This vulnerability involves reading from an unassigned function parameter value, so a fuzzer could likely have discovered it.
  answer: true
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits: []
order_of_operations:
  note: The fix was a missing line of code, and rearranging the order of operations was not involved.
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
CWE Identifier: "200"
ipc_answer:
  - 
  - "1"
ipc_note: ""
discovered_answer: Many protocols including the IrDA protocol shared a similar
  receive message function, each one with the same information leak
  vulnerability. The commit merging the fix for all these together is
  f89e8a6432409c6cbd5c2b6bb90ea694fd558de3, however there was no bug or email
  communication marking the original discovery of this vulnerability.
discovered_automated:
  - 
  - "1"
discovered_developer:
  - 
  - "1"
discovered_contest:
  - 
  - "1"
related: CVE-2013-3222, CVE-2013-3223, CVE-2013-3224, CVE-2013-3225,
  CVE-2013-3226, CVE-2013-3227, CVE-2013-3229, CVE-2013-3230, CVE-2013-3231,
  CVE-2013-3232, CVE-2013-3233, CVE-2013-3234, CVE-2013-3235, CVE-2013-3236,
  CVE-2013-3237, CVE-2013-3076. All these vulnerabilities stemmed from the same
  weakness across many protocols and they were fixed together.
bugs_repeater: []
