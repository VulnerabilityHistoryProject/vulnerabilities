CVE: CVE-2020-27171
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 2
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date: '2021-03-18'
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: '2020-10-16'
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2021-03-20'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  An issue was discovered in the Linux kernel before 5.11.8 .
  kernel/bpf/verifier.c has an off-by-one error which causes an integer underflow. This is
  when a product calculates or uses an incorrect maximum or minimum value that is 1 more,
  or 1 less, than the correct value. THis weakness leads to undefined behavior and therefore crashes.
  This impacts availability.
  This vulnerability can also impact the integrity.
  This affects out-of-bounds speculation on pointer arithmetic, leading to side-channel attacks
  that defeat Spectre mitigations and obtain sensitive information from kernel memory(buffer overflows
  can be used to execute arbitrary code).
  also known as CID-10d2bb2e6b1d.
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs:
- 1940623
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 10d2bb2e6b1d8c4576c56a748f697dbeb8388899
  note: |
    'Manually confirmed'
    Fix off-by-one for area size in creating mask to left.
    When masking to the left, the size is off-by-one which would lead
    to an incorrect mask and an incorrect arithmetic operation.
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: 979d63d50c0c0f7bc537bf821e056cc9fe5abd38
  :note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: true
  code_answer: |
    BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R0 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "R0 tried to subtract pointer from scalar",
    +	.result = REJECT,
     },
     {
     	"check deducing bounds from const, 2",
    @@ -20,6 +21,8 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_1, BPF_REG_0),
     		BPF_EXIT_INSN(),
     	},
    +	.errstr_unpriv = "R1 tried to sub from different maps, paths, or prohibited types",
    +	.result_unpriv = REJECT,
     	.result = ACCEPT,
     	.retval = 1,
     },
    @@ -31,8 +34,9 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R0 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "R0 tried to subtract pointer from scalar",
    +	.result = REJECT,
     },
     {
     	"check deducing bounds from const, 4",
    @@ -45,6 +49,8 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_1, BPF_REG_0),
     		BPF_EXIT_INSN(),
     	},
    +	.errstr_unpriv = "R1 tried to sub from different maps, paths, or prohibited types",
    +	.result_unpriv = REJECT,
     	.result = ACCEPT,
     },
     {
    @@ -55,8 +61,9 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R0 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "R0 tried to subtract pointer from scalar",
    +	.result = REJECT,
     },
     {
     	"check deducing bounds from const, 6",
    @@ -67,8 +74,9 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R0 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "R0 tried to subtract pointer from scalar",
    +	.result = REJECT,
     },
     {
     	"check deducing bounds from const, 7",
    @@ -80,8 +88,9 @@
     			    offsetof(struct __sk_buff, mark)),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R1 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "dereference of modified ctx ptr",
    +	.result = REJECT,
     	.flags = F_NEEDS_EFFICIENT_UNALIGNED_ACCESS,
     },
     {
    @@ -94,8 +103,9 @@
     			    offsetof(struct __sk_buff, mark)),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R1 tried to add from different maps, paths, or prohibited types",
     	.errstr = "dereference of modified ctx ptr",
    +	.result = REJECT,
     	.flags = F_NEEDS_EFFICIENT_UNALIGNED_ACCESS,
     },
     {
    @@ -106,8 +116,9 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
    +	.errstr_unpriv = "R0 tried to sub from different maps, paths, or prohibited types",
     	.errstr = "R0 tried to subtract pointer from scalar",
    +	.result = REJECT,
     },
     {
     	"check deducing bounds from const, 10",
    @@ -119,6 +130,6 @@
     		BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
     		BPF_EXIT_INSN(),
     	},
    -	.result = REJECT,
     	.errstr = "math between ctx pointer and register with unbounded min value is not allowed",
    +	.result = REJECT,
     },
    diff --git a/tools/testing/selftests/bpf/verifier/map_ptr.c b/tools/testing/selftests/bpf/verifier/map_ptr.c
    index b117bdd3806d8..6f610cfddae53 100644
    --- a/tools/testing/selftests/bpf/verifier/map_ptr.c
    +++ b/tools/testing/selftests/bpf/verifier/map_ptr.c
    @@ -75,6 +75,8 @@
     	BPF_EXIT_INSN(),
     	},
     	.fixup_map_hash_16b = { 4 },
    +	.result_unpriv = REJECT,
    +	.errstr_unpriv = "R1 tried to add from different maps, paths, or prohibited types",
     	.result = ACCEPT,
     },
     {
    @@ -91,5 +93,7 @@
     	BPF_EXIT_INSN(),
     	},
     	.fixup_map_hash_16b = { 4 },
    +	.result_unpriv = REJECT,
    +	.errstr_unpriv = "R1 tried to add from different maps, paths, or prohibited types",
     	.result = ACCEPT,
     },
    diff --git a/tools/testing/selftests/bpf/verifier/unpriv.c b/tools/testing/selftests/bpf/verifier/unpriv.c
    index b018ad71e0a82..3e32400c4b44b 100644
    --- a/tools/testing/selftests/bpf/verifier/unpriv.c
    +++ b/tools/testing/selftests/bpf/verifier/unpriv.c
    @@ -497,7 +497,7 @@
     	.result = ACCEPT,
     },
     {
    -	"unpriv: adding of fp",
    +	"unpriv: adding of fp, reg",
     	.insns = {
     	BPF_MOV64_IMM(BPF_REG_0, 0),
     	BPF_MOV64_IMM(BPF_REG_1, 0),
    @@ -505,6 +505,19 @@
     	BPF_STX_MEM(BPF_DW, BPF_REG_1, BPF_REG_0, -8),
     	BPF_EXIT_INSN(),
     	},
    +	.errstr_unpriv = "R1 tried to add from different maps, paths, or prohibited types",
    +	.result_unpriv = REJECT,
    +	.result = ACCEPT,
    +},
    +{
    +	"unpriv: adding of fp, imm",
    +	.insns = {
    +	BPF_MOV64_IMM(BPF_REG_0, 0),
    +	BPF_MOV64_REG(BPF_REG_1, BPF_REG_10),
    +	BPF_ALU64_IMM(BPF_ADD, BPF_REG_1, 0),
    +	BPF_STX_MEM(BPF_DW, BPF_REG_1, BPF_REG_0, -8),
    +	BPF_EXIT_INSN(),
    +	},
     	.errstr_unpriv = "R1 stack pointer arithmetic goes out of range",
     	.result_unpriv = REJECT,
     	.result = ACCEPT,
    diff --git a/tools/testing/selftests/bpf/verifier/value_ptr_arith.c b/tools/testing/selftests/bpf/verifier/value_ptr_arith.c
    index ed4e76b246499..feb91266db39a 100644
    --- a/tools/testing/selftests/bpf/verifier/value_ptr_arith.c
    +++ b/tools/testing/selftests/bpf/verifier/value_ptr_arith.c
    @@ -169,7 +169,7 @@
     	.fixup_map_array_48b = { 1 },
     	.result = ACCEPT,
     	.result_unpriv = REJECT,
    -	.errstr_unpriv = "R2 tried to add from different maps or paths",
    +	.errstr_unpriv = "R2 tried to add from different maps, paths, or prohibited types",
     	.retval = 0,
     },
     {
    @@ -516,6 +516,27 @@
     	.result = ACCEPT,
     	.retval = 0xabcdef12,
     },
    +{
    +	"map access: value_ptr += N, value_ptr -= N known scalar",
    +	.insns = {
    +	BPF_ST_MEM(BPF_DW, BPF_REG_10, -8, 0),
    +	BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),
    +	BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -8),
    +	BPF_LD_MAP_FD(BPF_REG_1, 0),
    +	BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem),
    +	BPF_JMP_IMM(BPF_JEQ, BPF_REG_0, 0, 6),
    +	BPF_MOV32_IMM(BPF_REG_1, 0x12345678),
    +	BPF_STX_MEM(BPF_W, BPF_REG_0, BPF_REG_1, 0),
    +	BPF_ALU64_IMM(BPF_ADD, BPF_REG_0, 2),
    +	BPF_MOV64_IMM(BPF_REG_1, 2),
    +	BPF_ALU64_REG(BPF_SUB, BPF_REG_0, BPF_REG_1),
    +	BPF_LDX_MEM(BPF_W, BPF_REG_0, BPF_REG_0, 0),
    +	BPF_EXIT_INSN(),
    +	},
    +	.fixup_map_array_48b = { 3 },
    +	.result = ACCEPT,
    +	.retval = 0x12345678,
    +},
     {
     	"map access: unknown scalar += value_ptr, 1",
     	.insns = {
  fix: true
  fix_answer: | 
    git patch:0a13e3537ea67452d549a6a80da3776d6b7dedb3
    bpf, selftests: Fix up some test_verifier cases for unprivileged. 
    From looking at the fix code it is clear the the code was tested and they
    fixed an existing test to resolve this vulnerability. They fixed up test_verifier
    cases for unprivileged user access. Error messages were fixed for the case
    where the original error message changed, or for the case where pointer of the
    ALU(Arithmetic Logic Unit) errors differ between privileged and unprivileged tests.
    Also, they added alternative tests for keeping coverage of the original verifier
    rejection error message and newly reject map_ptr += rX where rX == 0 given the code forbids
    alu on these types for unprivileged users. All test_verifier cases pass after
    the change.
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: |
    2021-03-18, A vulnerability was found in the Linux Kernel in kernel/bpf/verifier.c 
    in retrieve_ptr_limit that computes the size of the valid memory 'ptr_limit'
    for the stack register and the map_value register for the purpose of bound checks.
    In this flaw there was an off-by-one for the area size which leads to an incorrect
    mask creation when doing it to the left and therefore an incorrect arithmetic
    operation in the non-speculative domain. In this flaw, a local attacker, with special
    user privilege titled "CAP_SYS_ADMIN" may leak the kernel internal information and
    potentially cause a denial of service problem.
  automated: true
  contest: false
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: | 
    self tests exist in the linux environment to identify permission issues and
    unprivileged user settings.
  answer: true
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: | 
    no violation of a spec was mentioned in the bug report or commit messages.
  answer: false
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name: bpf
  note: |
    src files existed in the bpf directory.
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    Error was related to buffer overflow and potential side channel attacks
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: |
    A flaw was found in the Linux kernels eBPF verification code. 
    By default accessing the eBPF verifier is only accessible to 
    privileged users with CAP_SYS_ADMIN access. A flaw that triggers
    Integer underflow when restricting speculative pointer arithmetic
    allows unprivileged local users to leak data stored in kernel memory.
    The highest threat from this vulnerability is data confidentiality.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: | 
    No IPC issues. The primary issue was related to poor masking leading to an
    off-by-one error.
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security: true
  any_discussion: true
  note: |
    Discusses difference between default Linux kernel versus upstream kernel.
    Difference between root user privilege settings. Both disable the eBPF
    by default.
    Upstream-Linux 7 allows you to inspect the sysctl with a cat command.
    # cat /proc/sys/kernel/unprivileged_bpf_disabled to see present settings for
    purpose of mitigating the error related to access rights.

vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: true
  note: |
    multiple recommended git patches were approved and recorded by colleagues.
    Git sign offs on a commit message. https://cdn.kernel.org/pub/linux/kernel/v5.x/ChangeLog-5.11.8
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
  note: |
    there were no stack traces. Recommended git patches were included.
    https://bugzilla.redhat.com/show_bug.cgi?id=1940623
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: |
    Add sanity checks i.e. basic assertions for upper ptr_limit so the
    verifier can reject the program for weird values.
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    Switch cases were used. Masking was simplified.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: false
    note:
  least_privilege:
    applies: true
    note: |
      prevent attacks by improving tests and masking to prevent buffer overflow
      and prevent unprivileged users from being able to use eBPF by the 
      kernel unprivileged disabled sysctl(system control. Only privileged users
      with CAP_SYS_ADMIN or root shall be able to abuse this flaw which reduces
      attack space.
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: true
    note: |
      check values for pointers
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: false
    note:
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: flase
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer: |
    There are were some coding errors that caused the bug.
    The mask creation to the left of the pointers was incorrect.
    1 was added to the ptr_limit if masking was to the left to make up for the size
    which was off by 1.
    e.g. if (mask_to_left)
  			*ptr_limit = MAX_BPF_STACK + off + 1;

CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- '193'
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:H
