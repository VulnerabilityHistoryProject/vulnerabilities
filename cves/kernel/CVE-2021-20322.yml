CVE: CVE-2021-20322
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 2
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date: "2021-10-14 16:40 UTC"
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: "2022-03-03"
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: 2022-02-18T1815:09.013
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description: |
  A flaw in processing two ICMP errors (ICMP fragment needed and ICMP redirect)
  allowed an external attacker to quickly scan open UDP ports (used for remote
  data transmission). This gave attackers access to IP fragments which could be 
  used in DNS poisoning attacks, allowing the user to send and intercept 
  messages to and from the victim without having to form a connection. 

  Notes: ICMP -> Internet Control Message Protocol. ICMP messages communicate 
  information about network connectivity issues back to the source of the 
  transmission

  UDP -> User Datagram Protocol. operates over IP to transmist datagrams 
  over a network without the need for an end-to-end connection 

bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
  
  Note from investigation: The below bug number was gathered from 
  https://bugzilla.redhat.com/. https://bugzilla.kernel.org/ held no 
  reference to this issue.
bugs: [2014230]
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexadecimal string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 4785305c05b25a242e5314cc821f54ade4c18810
  note: |
    Manually Confirmed
    Goal of this commit was to reduce the likelihood of an attacker being 
    able to interperate the returned hash data from the IPMC error by replacing
    the Jenkins hash (a simple non-cryptographic hash) with a Siphash (a hashing
    algorithm designed to be cryptographically secure)
    slight inconsistency with commit message: It claims to deal with IPv4, 
    but is in IPv6.

- commit: 6457378fe796815c973f631a1904e147d6ee33b1
  note: |
    Manually Confirmed
    This commit makes the same change as 
    4785305c05b25a242e5314cc821f54ade4c18810 but deals with IPv4

- commit: 67d6d681e15b578c1725bad8ad079e05d1c48a8e
  note: |
    Manually confirmed
    Made after above Siphash update. Attackers could still use brute force to 
    learn hidden information with the new returned hash values. This 
    vulnerability was mitigated by changing the number of items in a 
    hash-table bucket from 6, to a random number between 6 and 10, reducing
    the consistency of returned hashes, and making them significantly 
    harder to brute force. This change deals with IPV4

- commit: a00df2caffed3883c341d5685f830434312e4a43
  note: |
    Manually confirmed
    This commit makes the same change as 
    67d6d681e15b578c1725bad8ad079e05d1c48a8e but deals with IPv6

vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.

  Investigation notes: The file that this issue was found in is a major communication 
  component, and so many commits recorded here are unrelated to the issue, 
  but did result in some components being shuffled around, showing changes
vccs:
- commit: 35732d01fe311ec13c4e42936878b782b8e7ea85
  :note: This appears to be the originator of the functions involved with the issue
- commit: b6b556afd21b48a372be8ed0c0f79428022e1b7c
  :note: Introduced the use of the Jenkins hash in IPv6
- commit: d546c621542df9e45eedc91f35356e887ac63b7b
  :note: Interestingly, added a randomized factor to the jenkins hash in IPv4
- commit: d3a25c980fc231238256f8d80816367674e5caaf
  :note: Fixed nexthop exception in the hash for IPv4
- commit: aee06da6726d4981c51928c2d6d1e2cabeec7a10
  :note: Defined the more recent struct and reassigned "oldest" hashchain
- commit: 387aa65a89434abe3128d36d1a6fc3842c94905d
  :note: update unrealted to issue
- commit: 2ffae99d1fac272952b5a395759823717760ce37
  :note: Updated how IP fragmentation was done, but does not effect this issue.
- commit: cebe84c6190d741045a322f5343f717139993c08
  :note: refectoring
- commit: d52e5a7e7ca49457dd31fc8b42fb7c0d58a31221
  :note: Refactors some related components, but does not impact the issue
- commit: 94720e3aee6884d8c8beb678001629da60ec6366
  :note: unrelated updates
- commit: cc5c073a693fa6ed7a207b0436114f68cce72434
  :note: Introduced the IPv6 exception bucket handlers, otherwise unrelated
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code: "No"
  code_answer: |
    No unit tests found. Note that the bug page states that the bug has
    never been reproduced. Reading through the notes on this bug leads
    to the conclusion that this bug was discovered during an inspection.
    
  fix: "No"
  fix_answer: |
    No unit tests found. This situation does not seem reproducable in 
    a unit testing environment, so unit tests would likely not be helpful
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer: |
    Discovery date is unclear, but it was reported on 2021-10-14 16:40 UTC.
    The bug was found by "A group of security researchers" within Red Hat
    Product Security. A researcher (Keyu Man) spent time investigating 
    the potential issue, and reported back that if IP fragments were 
    returned a DNS poisoning attack was possible. 
  automated: "false"
  contest: nil
  developer: true
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    It is very unlikely that an automated tool could have discovered this 
    vulnerability as it involved an analysis of error return, a massive
    brute force effort, and some foreknowledge of how the system was 
    designed. Assuming you knew the vulnerability existed and were 
    targeting it specifically, then you may have been able to find it,
    But a general automated tool would probably have missed the vulnerability.
  answer: false
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note: |
    Answer is debatable. This bug violated the spirit of DNS communication
    by circumventing the randomized nature of the UDP connections.
  answer: true
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name: net 
  note: all changes are within the "net" subdirectory
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit: 67d6d681e15b578c1725bad8ad079e05d1c48a8e
    note: |
      This commit is where the initial fix was changed to include random 
      bucket sizes. It demonstrates that even after a fix was offered and 
      implemented investigations continued, and it shows that the initial 
      implementation was not considered sufficient. It is also a 
      demonstration in how security by obscurity is not a solution
      to security issues, but a mitigation. The initial "fix" obscured
      the returned data, but that obscurity could be circumvented with 
      enough time and dedication. This new fix adds much more obscurity,
      to the point where it may be theoretically possible to still cause the
      initial issue, it is tremendously unlikely.

i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: "no"
  note: |
    While networking does involve connecting people, the core issue in this
    vulnerability revolves around a set of common communication protocols.
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    The affected feature does not restrict access to the system for a 
    particular user, but instead controls communication channels
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: true
  note: "The affected feature is, by definition, a form of IPC."
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security: false
  any_discussion: false
  note: |
    No public discussion was had, all proposed and implemented changes were 
    accepted with little input. The only major change (adding randomized 
    bucket size) was not a discussion, but instead treated as an 
    implementation oversight and accepted with little comment
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer: false
  note: "no commit related to the fix had any comments, and cannot find pull request"
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: false
  note: |
    bug was never produced, just discovered to be a potential issue, and was 
    deemed severe enough to fix.
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: "Fix involved changing the type of hash, and randomizing it's bucket size"
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer: false
  note: |
    The order of operations was not affected, just the objects and algorithms
    involved in the execution of that process.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity: 
    applies: true
    note: |
      As previously stated, the solution to mitigating this vulnerability was 
      entirely reliant of obscurity. The potential attack vector (the returned 
      ICMP message) was heavily obscured to keep an attacker from being able to
      glean any useful information from it.
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies: true
    note: |
      If the hash table had used an encrypted hashing algorithm to begin with this
      would have been partially mitigated by default. The failure to secure this 
      table to begin with opened up the system to unnecessary  lines of attack.
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer: |
    This vulnerability is the result of a minor planning error in a vital area 
    in a frequently used subsystem. This was originated from either a lack of 
    concern or a lack of forethought into how messages would be sent, and the
    implications of those messages in the hands of a malicious user. In 
    the defense of the original implementor: this was an edge case that was 
    discovered over the course of some investigations, and it doesn't seem like 
    Something that had been planned for. That having been said, it should be 
    assumed that all information leaving a system will fall into malicious hands,
    and so all data exiting the system should be treated with extreme caution, 
    and should be protected if possible. 
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE: '330'
CWE_note: "Manually confirmed"
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:N
