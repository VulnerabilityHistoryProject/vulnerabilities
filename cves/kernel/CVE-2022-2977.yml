CVE: CVE-2022-2977
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: '2022-09-14'
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2022-09-14'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 9d8e7007dc7c4d7c8366739bbcd3f5e51dcd470f
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: d3bfe84129f65e0af2450743ebdab33d161d01c9
  note: Discovered automatically by archeogit.
- commit: 2b6aa412ff23a02ac777ad307249c60a839cfd25
  note: Discovered automatically by archeogit.
- commit: 219a3e8676f3132d27b530c7d2d6bcab89536b57
  note: Discovered automatically by archeogit.
- commit: b56e5a17b6b9acd16997960504b9940d0d7984e7
  note: Discovered automatically by archeogit.
- commit: 903be6bb84c544551150a6f5aab9fda1ed9a6895
  note: Discovered automatically by archeogit.
- commit: d5e72745ca121459f68c598dac7b374a76322b94
  note: Discovered automatically by archeogit.
- commit: e1ea9f86023e7668604cc6456a818e5e4d0361c9
  note: Discovered automatically by archeogit.
- commit: 64ae16dfeefec670276607fa789ce096c7ebd7c4
  note: Discovered automatically by archeogit.
- commit: dff5a61a59614c110d06a5dc1466cdb762b6affd
  note: Discovered automatically by archeogit.
- commit: f8c54e1ac4b82933dfcf88c37892da8ae35ccbe4
  note: Discovered automatically by archeogit.
- commit: ad4b1eb5fb3350c979a4f86eacfe7aac0595f335
  note: Discovered automatically by archeogit.
- commit: e73d170f6c77e7006b48c5e9c325fe520f6012ca
  note: Discovered automatically by archeogit.
- commit: 0c36264aa1d5b77eb21f646f83223134e4528cfe
  note: Discovered automatically by archeogit.
- commit: e08e6891231f5fae82a6ffb4affdfa2ced8c1a77
  note: Discovered automatically by archeogit.
- commit: f884fe5a158f750e232b029e1fac0283e388e062
  note: Discovered automatically by archeogit.
- commit: a335974ae0883e045151a2160093a22aa02c3626
  note: Discovered automatically by archeogit.
- commit: c6f61e59760df04a245ef48c8805b4eb3d958230
  note: Discovered automatically by archeogit.
- commit: f1774cb8956a35269f539efcee99fe7eda838b77
  note: Discovered automatically by archeogit.
- commit: c7381b01287240abe942a081729203e26782d981
  note: Discovered automatically by archeogit.
- commit: a24d22b225ce158651378869a6b88105c4bdb887
  note: Discovered automatically by archeogit.
- commit: 47f9c279689107f306fff506753971a39a8a7ffc
  note: Discovered automatically by archeogit.
- commit: f93274ef0fe972c120c96b3207f8fce376231a60
  note: Discovered automatically by archeogit.
- commit: bea37414453eb08d4ceffeb60a9d490dbc930cea
  note: Discovered automatically by archeogit.
- commit: 83bc0299960477a4b99d9ad11b766d63c0dfaf60
  note: Discovered automatically by archeogit.
- commit: a4730357ee724f8c64f0292541ba3da8a95510fb
  note: Discovered automatically by archeogit.
- commit: 6c2dc5ae4ab719a61d19e8cef082226410b04ff8
  note: Discovered automatically by archeogit.
- commit: 54c1fb39fe0495f846539ab765925b008f86801c
  note: Discovered automatically by archeogit.
- commit: 8c76d79393ccc9b89d9af402d79a49a9cd43c5aa
  note: Discovered automatically by archeogit.
- commit: 82f94f24475c89c6d5cb673e1277b5b4394499c8
  note: Discovered automatically by archeogit.
- commit: c08fed73712620eb0a19244dbbbbdf00edbe5e47
  note: Discovered automatically by archeogit.
- commit: 299f561a66939debba70e6d7c67aa01ed32613d9
  note: Discovered automatically by archeogit.
- commit: c26fd69fa00916a31a47f5f096fd7be924106df8
  note: Discovered automatically by archeogit.
- commit: 0d7a78643f6972214e99205b364e508f8ea9598e
  note: Discovered automatically by archeogit.
- commit: 254f84f559039b6d6f6e1035fd7645b42671ab48
  note: Discovered automatically by archeogit.
- commit: 2ecdb23b8c545fbee95caad0f2e45082787563ee
  note: Discovered automatically by archeogit.
- commit: ad3043fda39db0361d9601685356db4512e914be
  note: Discovered automatically by archeogit.
- commit: b426beb6eeb0c81aeaa419f7444064abc9cb04ae
  note: Discovered automatically by archeogit.
- commit: fdc915f7f71939ad5a3dda3389b8d2d7a7c5ee66
  note: Discovered automatically by archeogit.
- commit: af82455f7dbd9dc20244d80d033721b30d22c065
  note: Discovered automatically by archeogit.
- commit: 15516788e581eb32ec1c50e5f00aba3faf95d817
  note: Discovered automatically by archeogit.
- commit: 313d21eeab9282e01fdcecd40e9ca87e0953627f
  note: Discovered automatically by archeogit.
- commit: 8979b02aaf1d6de8d52cc143aa4da961ed32e5a2
  note: Discovered automatically by archeogit.
- commit: 3635e2ec7cbb9aa054f8d4361dec27b0ca625905
  note: Discovered automatically by archeogit.
- commit: 9e1b74a63f7760b525295161fc608b19b8ee19c4
  note: Discovered automatically by archeogit.
- commit: c3465a370fb371136f6ed7f1d15bcae1037270d3
  note: Discovered automatically by archeogit.
- commit: fd3ec3663718e5f89fbcbc18a67885203fd914a1
  note: Discovered automatically by archeogit.
- commit: 805fa88e0780b7ce1cc9b649dd91a0a7164c6eb4
  note: Discovered automatically by archeogit.
- commit: 4d57856a21ed2abe33412e0526cc84bdcf67ea08
  note: Discovered automatically by archeogit.
- commit: 47a6c28b6861b14a69e36ba974d2ffa1746e8e6f
  note: Discovered automatically by archeogit.
- commit: aff0c20bfe59e0895c75631e2639bc54efae8007
  note: Discovered automatically by archeogit.
- commit: 745b361e989af21ad40811c2586b60229f870a68
  note: Discovered automatically by archeogit.
- commit: e2683957fb268c6b29316fd9e7191e13239a30a5
  note: Discovered automatically by archeogit.
- commit: 58c909022a5a56cd1d9e89c8c5461fd1f6a27bb5
  note: Discovered automatically by archeogit.
- commit: 734114f8782f6c3398762f2353fe9101d87b6d06
  note: Discovered automatically by archeogit.
- commit: 56c5812623f95313f6a46fbf0beee7fa17c68bbf
  note: Discovered automatically by archeogit.
- commit: 9dc92c45177ab70e20ae94baa2f2e558da63a9c7
  note: Discovered automatically by archeogit.
- commit: 9641b8cc733f70a5400aa7e6831de4542c46a94c
  note: Discovered automatically by archeogit.
- commit: a2d61ed525f3458a913147fd02b1a5cf15e7551b
  note: Discovered automatically by archeogit.
- commit: ad723674d6758478829ee766e3f1a2a24d56236f
  note: Discovered automatically by archeogit.
- commit: 7d2ce2320e8efdc4a6dcbae7b329ed3f0d1cd778
  note: Discovered automatically by archeogit.
- commit: 8607c501478432b23654739c7321bc7456053cb6
  note: Discovered automatically by archeogit.
- commit: 6cbdfb3d91bab122033bd2ecae8c259cb6e4f7d0
  note: Discovered automatically by archeogit.
- commit: 56104cf2b8d20eed32c14eac8ac574c35377ab38
  note: Discovered automatically by archeogit.
- commit: '028db3e290f15ac509084c0fc3b9d021f668f877'
  note: Discovered automatically by archeogit.
- commit: 60740accf78494e166ec76bdc39b7d75fc2fe1c7
  note: Discovered automatically by archeogit.
- commit: c7f7e58fcbf33589f11bfde0506e076a00627e59
  note: Discovered automatically by archeogit.
- commit: 726bd8965a5f112d9601f7ce68effa1e46e02bf2
  note: Discovered automatically by archeogit.
- commit: 38a1f03aa24094b4a8de846700cb6cb21cc06468
  note: Discovered automatically by archeogit.
- commit: 00d60fd3b93219ea854220f0fd264b86398cbc53
  note: Discovered automatically by archeogit.
- commit: 5d0682be318910e028bdf57c90a1695ffc34be37
  note: Discovered automatically by archeogit.
- commit: 0a95ebc91305a5f2400e9080911e8d240b6b05ca
  note: Discovered automatically by archeogit.
- commit: 6ea3dfe1e0732c5bd3be1e073690b06a83c03c25
  note: Discovered automatically by archeogit.
- commit: 0b78c9e8c19b57bf2081cd432841c7fe3f800633
  note: Discovered automatically by archeogit.
- commit: 8f84bddcfac9117564721ead494db7a604fdf861
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 416
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
