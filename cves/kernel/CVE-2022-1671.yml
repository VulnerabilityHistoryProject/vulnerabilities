---
CVE: CVE-2022-1671
CWE:
  - 476
ipc: .
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:H
bugs:
  - https://github.com/torvalds/linux/commit/ff8376ade4f668130385839cef586a0990f8ef87
i18n:
  note: This has no effect on foreign languages or dialects.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs:
  - ca7fb10059a5755908d46db81d1f3738cd26aa9f
  - 12da59fcab5a05d01773e7cb413b8b8f3bb4e334
fixes: []
vouch:
  note: Paolo Abeni signed off on a patch that was authored by Xiaolong Huang.
  answer: true
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt: null
  url: null
  announced: null
lessons:
  yagni:
    note: null
    applies: null
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note: null
    applies: null
  complex_inputs:
    note: null
    applies: null
  distrust_input:
    note: null
    applies: null
  least_privilege:
    note: null
    applies: null
  native_wrappers:
    note: null
    applies: null
  defense_in_depth:
    note: null
    applies: null
  secure_by_default:
    note: null
    applies: null
  environment_variables:
    note: The way this vulnerability was mitigated was to have a separate file
      handle server keys instead of it being handled in one file.
    applies: true
  security_by_obscurity:
    note: null
    applies: null
  frameworks_are_optional:
    note: null
    applies: null
reviews: []
sandbox: .
upvotes: "4"
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes:
  answer: There was a lack of separation of concerns within the network and server
    portion of the project. This caused certain files to be overblown and
    unreadable as there is just so much that is handled. This was a lapse in
    judgement for the developers as they should have figured it was best to
    handle certain data in their own modules.
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
nickname: Not-So Preparsed
subsystem:
  - key.c
discovered: .
discussion:
  note: null
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: false
  discussed_as_security: false
stacktrace:
  note: The stack trace that the commit fixed is in the commit message for
    ff8376ade4f668130385839cef586a0990f8ef87
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: false
  stacktrace_with_fix: true
description: A vulnerability was discovered in the Linux kernel's code,
  specifically in a function called rxrpc_preparse_s in the file
  net/rxrpc/server_key.c. This flaw could be exploited by a local attacker to
  either crash the system or reveal sensitive internal kernel information.
unit_tested:
  fix: A separate file was created for handling the server key.
  code: null
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer: true
  code_answer: false
reported_date: null
specification:
  note: Network security protocol
  answer: true
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2022-07-26
curation_level: 0
published_date: 2022-07-26
forgotten_check:
  note: Missing calls to certain functions like preparse_server_key,
    free_preparse_server_key and destroy_server_key
  answer: true
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: An automated system could go through and discover sensitive information
    after a security protocol was not specified. It can search for key formatted
    strings or numbers and save that information from the database.
  answer: true
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits:
  - 75bfdbf2fca372e2709bcaa43e8cf1147766ae96
order_of_operations:
  note: null
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
CWE Identifier: "476"
announced: 2022-03-30
discovered_answer: A problem was found in the way the Linux operating system
  handles certain actions related to network communication. Specifically, when a
  security protocol isn't specified, the part of the system responsible for
  managing network connections can misbehave. This could allow a person with
  access to the system to either crash it or potentially access information
  stored in the system's memory that they shouldn't be able to see.
discovered_automated:
  - null
  - "1"
discovered_developer:
  - null
  - "1"
discovered_contest:
  - null
  - "1"
major_events:
  - Removed CVE-2022-1671
related: CVE-2022-1651
bugs_repeater:
  - https://github.com/torvalds/linux/commit/ff8376ade4f668130385839cef586a0990f8ef87
sandbox_answer:
  - null
  - "1"
sandbox_note: Gives user access to sensitive data stored in the database.
ipc_answer:
  - null
  - "1"
ipc_note: Sockets were used in the mitigation to communicate within this process.
