CVE: CVE-2017-9059
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: c70422f760c120480fee4de6c38804c72aa26bc1
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2"
  note: Discovered automatically by archeogit.
- commit: d751a7cd0695554498f25d3026ca6710dbb3698f
  note: Discovered automatically by archeogit.
- commit: 5630f7fa97e8dfa2b3c6e7370c1702180336e493
  note: Discovered automatically by archeogit.
- commit: 5b444cc9a4c979aa0fa185c8ddca221462a34b7a
  note: Discovered automatically by archeogit.
- commit: 831441862956fffa17b9801db37e6ea1650b0f69
  note: Discovered automatically by archeogit.
- commit: f232142cc21127c829559923eb405d1bcb2e2278
  note: Discovered automatically by archeogit.
- commit: e8c5c045d790e7018c56f1a998a2d240b732ea3c
  note: Discovered automatically by archeogit.
- commit: 6849c0cab69f5d1a0fc7b05fa5bfb3dec53f86df
  note: Discovered automatically by archeogit.
- commit: a43cde94feded0f65fce36330614691c650ae8fe
  note: Discovered automatically by archeogit.
- commit: a277e33cbe3fdfb9a77b448ea3043be22f000dfd
  note: Discovered automatically by archeogit.
- commit: 25d280aad82e559cc7bc762410cd35ea5b98e294
  note: Discovered automatically by archeogit.
- commit: 5d05e54af3cdbb13cf19c557ff2184781b91a22c
  note: Discovered automatically by archeogit.
- commit: bb6aeba736ba9fd4d9569eec4bc3f7aecb42162a
  note: Discovered automatically by archeogit.
- commit: 6fb2b47fa16c81317ec282248e6cff521cca31c2
  note: Discovered automatically by archeogit.
- commit: 6ffa30d3f734d4f6b478081dfc09592021028f90
  note: Discovered automatically by archeogit.
- commit: f4b52bb0842642a781a23dd36ae364253e03fdb4
  note: Discovered automatically by archeogit.
- commit: 3c7aa15d2073d81e56e8ba8771a4ab6f23be7ae2
  note: Discovered automatically by archeogit.
- commit: afc59400d6c65bad66d4ad0b2daf879cbff8e23e
  note: Discovered automatically by archeogit.
- commit: d40aa3372f90d478b6166df0321349b5aeb0aea8
  note: Discovered automatically by archeogit.
- commit: 8a4c3926889e7bf226e9f0254e7eface1f85f312
  note: Discovered automatically by archeogit.
- commit: 50043859325b377e728676d31aad7affaf91b2ce
  note: Discovered automatically by archeogit.
- commit: 414ca017a54d26c3a58ed1504884e51448d22ae1
  note: Discovered automatically by archeogit.
- commit: 03a4e1f6ddf25f48848e1bddcffc0ad489648331
  note: Discovered automatically by archeogit.
- commit: 35bba9a37e68c68a820a1a772f016255c0838f79
  note: Discovered automatically by archeogit.
- commit: 9cf514ccfacb301f3b1b4509a8ce25dffad55880
  note: Discovered automatically by archeogit.
- commit: 75976de6556f593f6c2a18bbbcfb1e594cc7598a
  note: Discovered automatically by archeogit.
- commit: 82ead7fe41da960ed80652d13d5a1072f85f5aca
  note: Discovered automatically by archeogit.
- commit: cc53ce53c86924bfe98a12ea20b7465038a08792
  note: Discovered automatically by archeogit.
- commit: 7cc90cc3ffe22a0d81b8d605b20a82ec7911012d
  note: Discovered automatically by archeogit.
- commit: 91c9fa8f75877c0c1e455c23e8f8206c91c8f77f
  note: Discovered automatically by archeogit.
- commit: 3227fa41abc191384fa81b3bcf52aa7fccb31536
  note: Discovered automatically by archeogit.
- commit: 2b0143b5c986be1ce8408b3aadc4709e0a94429d
  note: Discovered automatically by archeogit.
- commit: 284f4902a632584e8d73cf7d9363f819adf7240c
  note: Discovered automatically by archeogit.
- commit: ff06bd191e722393d9abf7d6f9767f195274e909
  note: Discovered automatically by archeogit.
- commit: 0ba7536d5d47e4ecf2259a80b207158dc4e711eb
  note: Discovered automatically by archeogit.
- commit: a74554429eada89a7ddb47317e6a2968d03e41a2
  note: Discovered automatically by archeogit.
- commit: 758f62fff9ad630f05866a1dd6ae9453a7730c2e
  note: Discovered automatically by archeogit.
- commit: 03cf6c9f49a8fea953d38648d016e3f46e814991
  note: Discovered automatically by archeogit.
- commit: bb2224df5ffe4f864f5b696199b17db1ce77bc0a
  note: Discovered automatically by archeogit.
- commit: ab96dddbedf4bb8a7a0fe44012efc1d99598c36f
  note: Discovered automatically by archeogit.
- commit: d21b05f101ae732d9bc322f13eea2f59c0aa60f5
  note: Discovered automatically by archeogit.
- commit: 2fe81b239dbb00d0a2fd8858ac9dd4ef4a8841ee
  note: Discovered automatically by archeogit.
- commit: cc886c9ff1607eda04062bdcec963e2f8e6a3eb1
  note: Discovered automatically by archeogit.
- commit: e54524111f51eac1900cf91aca3d38a92a6b11c0
  note: Discovered automatically by archeogit.
- commit: a6081b82c533d78041acb76738716aa7dafb339a
  note: Discovered automatically by archeogit.
- commit: 0bf4828983dff062cd502f27ab8644b32774e72e
  note: Discovered automatically by archeogit.
- commit: 98fc21d3bfd55a36ce9eb7b32d1ce146f0d1696d
  note: Discovered automatically by archeogit.
- commit: 03fe9931536fe4782e9e34f7f499d588acd2015b
  note: Discovered automatically by archeogit.
- commit: 5d252f90a800cee5bc57c76d636ae60464f7a887
  note: Discovered automatically by archeogit.
- commit: 30b7e246a6222f1fbad39b1451273375306fe1e2
  note: Discovered automatically by archeogit.
- commit: 1fa9c4440c151c61eb3309579a85aae22c9adb6d
  note: Discovered automatically by archeogit.
- commit: cbaf58032efca401834518b905f528ac912449e4
  note: Discovered automatically by archeogit.
- commit: ba986c96f907a513215fb7f1c0a89261c97251ca
  note: Discovered automatically by archeogit.
- commit: f6763c29ab86c3ee27760a06e07bbeab47635b61
  note: Discovered automatically by archeogit.
- commit: be99bb11400ce02552c35a6d3bf054de393ce30e
  note: Discovered automatically by archeogit.
- commit: 0ab628d856a63d63b47307b09851d1e955c706ac
  note: Discovered automatically by archeogit.
- commit: ffe1f0df586237a18f9b568597bddabb56e96d5e
  note: Discovered automatically by archeogit.
- commit: 2e8c12e1b76536d723ae0501de0729ddf6a9142c
  note: Discovered automatically by archeogit.
- commit: 9867d76ca16b3f455f9ca83861f4ce5c94a25928
  note: Discovered automatically by archeogit.
- commit: 94cf3179ccfc69d727dd884fd0831d82ada6bb06
  note: Discovered automatically by archeogit.
- commit: 3c5199143bc4b35f472c5c2534026d74821e2044
  note: Discovered automatically by archeogit.
- commit: a75c5d01e4235a7dd785548ac756f248b1b40107
  note: Discovered automatically by archeogit.
- commit: 24c3767e41a6a59d32bb45abe899eb194e6bf1b8
  note: Discovered automatically by archeogit.
- commit: 3262c816a3d7fb1eaabce633caa317887ed549ae
  note: Discovered automatically by archeogit.
- commit: ef7fbf59e6f780a0fa03536839e3c42e9ce40ad1
  note: Discovered automatically by archeogit.
- commit: 5fe1043da84887369d32459514f2c7d98ff37936
  note: Discovered automatically by archeogit.
- commit: cace564f8b6260e806f5e28d7f192fd0e0c603ed
  note: Discovered automatically by archeogit.
- commit: ef1eac0a3fa86b06aa2d87021f157d13abc1903f
  note: Discovered automatically by archeogit.
- commit: cec56c8ff5e28f58ff13041dca7853738ae577a1
  note: Discovered automatically by archeogit.
- commit: d5b31be6823320d81570e0199acd60d3a3f75d85
  note: Discovered automatically by archeogit.
- commit: c06b540a54ad01d2fda8cfb5d8823b9b3d8d1cb2
  note: Discovered automatically by archeogit.
- commit: 34d16e42a6ab74a4a4389c061dfa3c6609e08fa0
  note: Discovered automatically by archeogit.
- commit: b432e6b3d9c1b4271c43f02b45136f33a8ed5820
  note: Discovered automatically by archeogit.
- commit: 25d55296dd3eac23adb2ae46b67b65bf73b22fb2
  note: Discovered automatically by archeogit.
- commit: '08ae4e7fedc6a853ad69d6d8abb760b55988608a'
  note: Discovered automatically by archeogit.
- commit: 3fe04ee9f91084e7e6e999b09b8b15bcf97375e8
  note: Discovered automatically by archeogit.
- commit: afd566ea080572499cc01d42d2f578bf4b54f20f
  note: Discovered automatically by archeogit.
- commit: 255942907e7ff498ab1545b5edce5690833ff640
  note: Discovered automatically by archeogit.
- commit: 5fdca6531434c1c1b2d584873afdda52e5ad448c
  note: Discovered automatically by archeogit.
- commit: e622f2f4ad2142d2a613a57fb85f8cf737935ef5
  note: Discovered automatically by archeogit.
- commit: 70747c25a701b563a54c20c4a77efe8292aad151
  note: Discovered automatically by archeogit.
- commit: fafedf81700d7d694b3716a14bc55bf4227344c7
  note: Discovered automatically by archeogit.
- commit: 9ec64052060f972101b49f47631f5072f075426c
  note: Discovered automatically by archeogit.
- commit: cf570a93748ab95cf5d13d3d8058875f970f3a66
  note: Discovered automatically by archeogit.
- commit: 3e1eeb9808225fb050582a1fc9b5d8e00390581c
  note: Discovered automatically by archeogit.
- commit: 9d11b51ce7c150a69e761e30518f294fc73d55ff
  note: Discovered automatically by archeogit.
- commit: e5523bd28101869c85856247fc120faaf72bd232
  note: Discovered automatically by archeogit.
- commit: 2e3c230bc7149a6af65d26a0c312e230e0c33cc3
  note: Discovered automatically by archeogit.
- commit: b1e1e158779f1d99c2cc18e466f6bf9099fc0853
  note: Discovered automatically by archeogit.
- commit: 3cbe01a94c7b369f943f8a9d40394198d757cdd4
  note: Discovered automatically by archeogit.
- commit: bb50c8012cbd85b8e105584b32e4d5a2d335dcef
  note: Discovered automatically by archeogit.
- commit: 8d8bb39b9eba32dd70e87fd5ad5c5dd4ba118e06
  note: Discovered automatically by archeogit.
- commit: 4a84386fc27fdc7d2ea69fdbc641008e8f943159
  note: Discovered automatically by archeogit.
- commit: 0e7f011a19696cc25d68a8d6631fc6c5aa60a54c
  note: Discovered automatically by archeogit.
- commit: 98779be861a05c4cb75bed916df72ec0cba8b53d
  note: Discovered automatically by archeogit.
- commit: 7e4359e2611f95a97037e2b6905eab52f28afbeb
  note: Discovered automatically by archeogit.
- commit: 9995237bba702281e0e8e677edd5bb225f4f6c30
  note: Discovered automatically by archeogit.
- commit: 377f9b2f4529e0ac702fd7b91e216afd0adc959e
  note: Discovered automatically by archeogit.
- commit: e1183210625cc8e02ce13eec78fb7a246567fc59
  note: Discovered automatically by archeogit.
- commit: e3e45b1b43988b99007a9908ca0ba738b3fbd0ff
  note: Discovered automatically by archeogit.
- commit: 64be8608c163bd480cf5ec4b34366f11e0f3c87f
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 404
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS:
