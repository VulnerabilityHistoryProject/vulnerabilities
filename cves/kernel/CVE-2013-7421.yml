CVE: CVE-2013-7421
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date: '2015-03-02'
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date: '2015-03-02'
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 5d26a105b5a73e5635eae0629b42fa0a90e07b7b
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: f0be44f4fb1faee42635ca5ea06dc9c3e820a35d
  note: Discovered automatically by archeogit.
- commit: 604682551aa511e00e57706ad5d9fcf955ee0323
  note: Discovered automatically by archeogit.
- commit: c8611d712ad01289a0b6a83cc93bba3a1ef4e990
  note: Discovered automatically by archeogit.
- commit: a3fd82105b9d149033984bf018f473140f5b94bc
  note: Discovered automatically by archeogit.
- commit: 49788fe2a128217f78a21ee4edbe6e92e988f222
  note: Discovered automatically by archeogit.
- commit: 323a6bf1d6f4ec7907d9d8aacb4ae9590f755dda
  note: Discovered automatically by archeogit.
- commit: a760a6656e6f00bb0144a42a048cf0266646e22c
  note: Discovered automatically by archeogit.
- commit: 1da177e4c3f41524e886b7f1b8a0c1fc7321cac2
  note: Discovered automatically by archeogit.
- commit: df1309ce955a490eac6697a41159b43e24d35995
  note: Discovered automatically by archeogit.
- commit: 0a497c17fee428604e06320272ff74415eacdc31
  note: Discovered automatically by archeogit.
- commit: e3b4f515c43553a9950017d8d052541ccb8081fa
  note: Discovered automatically by archeogit.
- commit: 4e2c6d7f4d8f466f4420e10dda7126537de09c94
  note: Discovered automatically by archeogit.
- commit: 9bf4852d3d195f771503d5be547ac940b0b3472a
  note: Discovered automatically by archeogit.
- commit: 81658ad0d92306ceb271994b90cd49ffde10eeda
  note: Discovered automatically by archeogit.
- commit: 442a7c40b1dac78588abfe8ed4c97e4bb8b36e73
  note: Discovered automatically by archeogit.
- commit: c5aac2df6577636ef526d87ec6d92796a190b27f
  note: Discovered automatically by archeogit.
- commit: fa4dfedcc23a589f953750de54eebf986336fa70
  note: Discovered automatically by archeogit.
- commit: 4ff28d4ca93b182b8e181b1e1b1d03fd09fdaeb4
  note: Discovered automatically by archeogit.
- commit: 86c93b24ef49d64062045c4e3cc2ed4609f6842a
  note: Discovered automatically by archeogit.
- commit: 775e0c69987a76d08900edbca857425f952c60fb
  note: Discovered automatically by archeogit.
- commit: 03c6b749b364fe7b8e47ed8e1ce26baca167c322
  note: Discovered automatically by archeogit.
- commit: 06e1a8f0505426a97292174a959560fd86ea0a3d
  note: Discovered automatically by archeogit.
- commit: 54b6a1bd5364aca95cd6ffae00f2b64c6511122c
  note: Discovered automatically by archeogit.
- commit: 64b94ceae8c16cd1b2800cac83112d3815be5250
  note: Discovered automatically by archeogit.
- commit: f3f935a76aa0eee68da2b273a08d84ba8ffc7a73
  note: Discovered automatically by archeogit.
- commit: d9b1d2e7e10d2e926775b1d3da39da0f51491e54
  note: Discovered automatically by archeogit.
- commit: 0b95ec56ae19f61ca664e83766a2180057f0e351
  note: Discovered automatically by archeogit.
- commit: 4d6d6a2c850f89bc9283d02519cb536baba72032
  note: Discovered automatically by archeogit.
- commit: 4ea1277d301eb776e321684cd4ea95116b4e8847
  note: Discovered automatically by archeogit.
- commit: 78c37d191dd6899d8c219fee597a17d6e3c5d288
  note: Discovered automatically by archeogit.
- commit: 8cb51ba8e06570a5fff674b3744d12a1b089f2d0
  note: Discovered automatically by archeogit.
- commit: 68411521cc6055edc6274e03ab3210a5893533ba
  note: Discovered automatically by archeogit.
- commit: 6574e6c64e971c9adb629e81e497afdb52b1c9df
  note: Discovered automatically by archeogit.
- commit: 0e1227d356e9b2fe0500d6cc7084f752040a1e0e
  note: Discovered automatically by archeogit.
- commit: 974e4b752ee623854c5dc2bbfc7c7725029ce173
  note: Discovered automatically by archeogit.
- commit: 56d76c96a9f3e39ab733c5643b3ce5a1d4be242a
  note: Discovered automatically by archeogit.
- commit: 7efe4076725aeb01722445b56613681aa492c8d6
  note: Discovered automatically by archeogit.
- commit: 937c30d7f560210b0163035edd42b2aef78fed9e
  note: Discovered automatically by archeogit.
- commit: 66be895158886a6cd816aa1eaa18965a5c522d8f
  note: Discovered automatically by archeogit.
- commit: 8275d1aa642295edd34a11a117080384bb9d65c2
  note: Discovered automatically by archeogit.
- commit: 7d444909a25ed4a9dbc546bf9528c8d2e3bf3752
  note: Discovered automatically by archeogit.
- commit: 87de4579f92dbe50e92f33b94f8688793c894571
  note: Discovered automatically by archeogit.
- commit: 340991e30ccef7b983cf2814ecea610504f5d059
  note: Discovered automatically by archeogit.
- commit: 107778b592576c0c8e8d2ca7a2aa5415a4908223
  note: Discovered automatically by archeogit.
- commit: b9f535ffe38f7eb61ac2219d32d97c377b69f70d
  note: Discovered automatically by archeogit.
- commit: 15e7b4452b72ae890f2fcb027b4c4fa63a1c9a7a
  note: Discovered automatically by archeogit.
- commit: 8280daad436edb7dd9e7e06fc13bcecb6b2a885c
  note: Discovered automatically by archeogit.
- commit: 35a1fc1873dd6deac6c005ead85424a8ee28183a
  note: Discovered automatically by archeogit.
- commit: f8246af005d56b73f4f04304fc5b6fd9878af4ef
  note: Discovered automatically by archeogit.
- commit: 17f0f4a47df9aea9ee26c939f8057c35e0be1847
  note: Discovered automatically by archeogit.
- commit: aa07a6990f4b6a8ef9fc538dea55bac6f92255f2
  note: Discovered automatically by archeogit.
- commit: 3f2a5d2d42e0784b6aa96c2e5dcdd64e28e838d6
  note: Discovered automatically by archeogit.
- commit: 075e39df6718503d98d63a3f392ad53f81d3077a
  note: Discovered automatically by archeogit.
- commit: 270b0c6b406a0ae7673ee880d1d7cc6bd6c904de
  note: Discovered automatically by archeogit.
- commit: 2b49b906729644dd4696b9291b7e2f6cd1266dc0
  note: Discovered automatically by archeogit.
- commit: 4a49b499dfa0c9e42be6d6fdd771f3434c776278
  note: Discovered automatically by archeogit.
- commit: 06e5a1f29819759392239669beb2cad27059c8ec
  note: Discovered automatically by archeogit.
- commit: 26052f9b9bb8de4f6a57165b0a803de9c26138bd
  note: Discovered automatically by archeogit.
- commit: 5311f248b7764ba8b59e6d477355f766e5609686
  note: Discovered automatically by archeogit.
- commit: 90831639a65592d6d3dc888dc3341f54ebf932e6
  note: Discovered automatically by archeogit.
- commit: d00aa19b507b39ee9a680d0d2ac2ae483686453a
  note: Discovered automatically by archeogit.
- commit: dadbc53d0bbde0e84c40b9f6bc5c50eb9eb7352a
  note: Discovered automatically by archeogit.
- commit: 73c89c15b959adf06366722c4be8d2eddec0a529
  note: Discovered automatically by archeogit.
- commit: 2cdc6899a88e2b9c6cb82ebd547bf58932d534df
  note: Discovered automatically by archeogit.
- commit: 0ea8530dcf762526459b29ac713a623b51fd691f
  note: Discovered automatically by archeogit.
- commit: 0b77abb3b2d0c2eee1da79a3f3bd4312a0edb156
  note: Discovered automatically by archeogit.
- commit: 85d32e7b0ea53a11d2a4018d8ad2605052778df7
  note: Discovered automatically by archeogit.
- commit: c6580eb8b17d64f0d6ad25c86a034adbda5ab4e1
  note: Discovered automatically by archeogit.
- commit: 3181c22587cfeb1fe415e55b2dd8b83c7cc33e44
  note: Discovered automatically by archeogit.
- commit: c555c28d9da517579085a00fc80e725b0b5d9fce
  note: Discovered automatically by archeogit.
- commit: 2407d60872dd2a95404c6048f775f3b64d438f4b
  note: Discovered automatically by archeogit.
- commit: e2ee95b8c69e542d6afef3f6f38ea598cc146ba7
  note: Discovered automatically by archeogit.
- commit: dd6eec242bb2df73743f07535d2bacd6707c6300
  note: Discovered automatically by archeogit.
- commit: ad5d27899fdbe7a66e57fdf1af883dbd7ff88dac
  note: Discovered automatically by archeogit.
- commit: cd12fb906d2591e80da9edcbd4794b9b916d7489
  note: Discovered automatically by archeogit.
- commit: 78f8b3a24022c48fe600f4aba415d63ceeaec9cd
  note: Discovered automatically by archeogit.
- commit: fb4f10ed50f01b0f953068456bfb6e2885921b01
  note: Discovered automatically by archeogit.
- commit: 5b04fc170382195d7d33fd08e3ccc2ad8e50e782
  note: Discovered automatically by archeogit.
- commit: bf68e65ec9ea61e32ab71bef59aa5d24d255241f
  note: Discovered automatically by archeogit.
- commit: acd246b7494c629aa617da49716409566cf52149
  note: Discovered automatically by archeogit.
- commit: 6c833275152b454d311f0e70b5e6bf028b4a2aaf
  note: Discovered automatically by archeogit.
- commit: d8cba25d2c68992a6e7c1d329b690a9ebe01167d
  note: Discovered automatically by archeogit.
- commit: 2789c08fffeae270820dda5d096634aecc810af5
  note: Discovered automatically by archeogit.
- commit: 8a63b1994c500d4825ee73dc71502deffe5b135b
  note: Discovered automatically by archeogit.
- commit: 1534c3820c26aca4e2567f97b8add8bea40e7e2b
  note: Discovered automatically by archeogit.
- commit: fe1372306149d8c8a68d43765e7caea2377003b6
  note: Discovered automatically by archeogit.
- commit: a0616cdebcfd575dcd4c46102d1b52fbb827fc29
  note: Discovered automatically by archeogit.
- commit: 9da3545d827cdb9163697a1dc4471fbb5540e85f
  note: Discovered automatically by archeogit.
- commit: 799111020c66c41aef621a3b53ad112543754124
  note: Discovered automatically by archeogit.
- commit: 2825982d9d66ebba4b532a07391dfbb357f71c5f
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
- 269
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS:
