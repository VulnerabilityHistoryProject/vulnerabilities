CVE: CVE-2020-29534
yaml_instructions: |
  =================
  ===YAML Primer===
  =================
  This is a dictionary data structure, akin to JSON.
  Everything before a colon is a key, and the values here are usually strings
  For one-line strings, you can just use quotes after the colon
  For multi-line strings, as we do for our instructions, you put a | and then
  indent by two spaces

  For readability, we hard-wrap multi-line strings at 80 characters. This is
  not required, but appreciated.
curated_instructions: |
  If you are manually editing this file, then you are "curating" it.

  Set the version number that you were given in your instructions.

  This will enable additional editorial checks on this file to make sure you
  fill everything out properly. If you are a student, we cannot accept your work
  as finished unless curated is properly updated.
curation_level: 0
reported_instructions: |
  What date was the vulnerability reported to the security team? Look at the
  security bulletins and bug reports. It is not necessarily the same day that
  the CVE was created.  Leave blank if no date is given.

  Please enter your date in YYYY-MM-DD format.
reported_date:
announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE date.

  This is not the same as published date in the NVD - that is below.

  Please enter your date in YYYY-MM-DD format.
announced_date:
published_instructions: |
  Is there a published fix or patch date for this vulnerability?
  Please enter your date in YYYY-MM-DD format.
published_date:
description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.

  Rewrite this description IN YOUR OWN WORDS. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.

  Try to still be specific in your description, but remove project-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to this project would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.

  Your target audience is people just like you before you took any course in
  security
description:
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
reviews: []
bugs_instructions: |
  What bugs are involved in this vulnerability?

  Please list bug IDs to https://bugzilla.kernel.org/

  Bug ID's can appear in several places:
    * Mentioned in commit messages
    * Mentioned in mailing list discussions
    * References from NVD entry
    * Various other places
bugs: []
fixes_instructions: |
  Please put the commit hash in "commit" below.

  This must be a git commit hash from the systemd source repo, a  40-character
  hexademical string/

  Place any notes you would like to make in the notes field.
fixes:
- commit:
  note:
- commit:
  note:
- commit: 0f2122045b946241a9e549c2a76cea54fa58a7ff
  note: |
    Taken from NVD references list with Git commit. If you are
    curating, please fact-check that this commit fixes the vulnerability and replace this comment with 'Manually confirmed'
vcc_instructions: |
  The vulnerability-contributing commits.

  These are found by our tools by traversing the Git Blame history, where we
  determine which commit(s) introduced the functionality.

  Look up these VCC commits and verify that they are not simple refactorings,
  and that they are, in fact introducing the vulnerability into the system.
  Often, introducing the file or function is where the VCC is, but VCCs can be
  anything.

  Place any notes you would like to make in the notes field.
vccs:
- commit: "1da177e4c3f41524e886b7f1b8a0c1fc7321cac2"
  note: Discovered automatically by archeogit.
- commit: 0a8f36eb48f64006dde86e2a58230d5a599eef7d
  note: Discovered automatically by archeogit.
- commit: 3d5992d2ac7dc09aed8ab537cba074589f0f0a52
  note: Discovered automatically by archeogit.
- commit: 0e028465d18b7c6797fcbdea632299d16097c5cd
  note: Discovered automatically by archeogit.
- commit: b44a7dfc6fa16e01f2497c9fa62c3926f94be174
  note: Discovered automatically by archeogit.
- commit: 7c0f6ba682b9c7632072ffbedf8d328c8f3c42ba
  note: Discovered automatically by archeogit.
- commit: 3b1253880b7a9e6db54b943b2d40bcf2202f58ab
  note: Discovered automatically by archeogit.
- commit: 72fa59970f8698023045ab0713d66f3f4f96945c
  note: Discovered automatically by archeogit.
- commit: 0c9cdff054aec0836bb38a449e860793849c3f84
  note: Discovered automatically by archeogit.
- commit: 7cf4dc3c8dbfdfde163d4636f621cf99a1f63bfb
  note: Discovered automatically by archeogit.
- commit: ab2af1f5005069321c5d130f09cce577b03f43ef
  note: Discovered automatically by archeogit.
- commit: 9b80a184eaadc117f27faad522008f31d571621b
  note: Discovered automatically by archeogit.
- commit: 60997c3d45d9a67daf01c56d805ae4fec37e0bd8
  note: Discovered automatically by archeogit.
- commit: 6659061045cc93f609e100b128f30581e5f012e9
  note: Discovered automatically by archeogit.
- commit: fcb323cc53e29d9cc696d606bb42736b32dd9825
  note: Discovered automatically by archeogit.
- commit: 2b188cc1bb857a9d4701ae59aa7768b5124e262e
  note: Discovered automatically by archeogit.
- commit: 5af1d13e8f0d8839db04a71ec786f369b0e67234
  note: Discovered automatically by archeogit.
- commit: 6c271ce2f1d572f7fa225700a13cfe7ced492434
  note: Discovered automatically by archeogit.
- commit: b14cca0c84c760fbd39ad6bb7e1181e2df103d25
  note: Discovered automatically by archeogit.
- commit: f573d384456b3025d3f8e58b3eafaeeb0f510784
  note: Discovered automatically by archeogit.
- commit: 24369c2e3bb06d8c4e71fd6ceaf4f8a01ae79b7c
  note: Discovered automatically by archeogit.
- commit: e3bc8e9dad7f2f83cc807111d4472164c9210153
  note: Discovered automatically by archeogit.
- commit: 0cdaf760f42eb8e8a714c1cc017423e5da6d4936
  note: Discovered automatically by archeogit.
- commit: c826bd7a743f275e2b68c16d595534063b400deb
  note: Discovered automatically by archeogit.
- commit: 51a4cc112c7a42b62a91bcccdfac42e7c4561729
  note: Discovered automatically by archeogit.
- commit: c6ca97b30c47c7ad36107d3764bb4dc37026d171
  note: Discovered automatically by archeogit.
- commit: 2d6500d44c1374808040d120e625a22b013c9f0d
  note: Discovered automatically by archeogit.
- commit: fd2206e4e97b5bae422d9f2f9ebbc79bc97e44a5
  note: Discovered automatically by archeogit.
- commit: 0553b8bda8709c47863eab3fff7ac32ad04ca52b
  note: Discovered automatically by archeogit.
- commit: ef4ff581102a917a69877feca2e5347e2f3e458c
  note: Discovered automatically by archeogit.
- commit: 44e728b8aae0bb6d4229129083974f9dea43f50b
  note: Discovered automatically by archeogit.
- commit: 6ab231448fdc5e37c15a94a4700fca11e80007f7
  note: Discovered automatically by archeogit.
- commit: 7d67af2c013402537385dae343a2d0f6a4cb3bfd
  note: Discovered automatically by archeogit.
- commit: b41e98524e424d104aa7851d54fd65820759875a
  note: Discovered automatically by archeogit.
- commit: bcf5a06304d69a3bb194a494d87b532d5e90b01c
  note: Discovered automatically by archeogit.
- commit: 1d7bb1d50fb4dc141c7431cc21fdd24ffcc83c76
  note: Discovered automatically by archeogit.
- commit: e65ef56db4945fb18a0d522e056c02ddf939e644
  note: Discovered automatically by archeogit.
- commit: b1e50e549b1372d9742509230dc4af7dd521d984
  note: Discovered automatically by archeogit.
- commit: b5dba59e0cf7e2cc4d3b3b1ac5fe81ddf21959eb
  note: Discovered automatically by archeogit.
- commit: 4dd2824d6d5914949b5fe589538bc2622d84c5dd
  note: Discovered automatically by archeogit.
- commit: fb5ccc98782f654778cb8d96ba8a998304f9a51f
  note: Discovered automatically by archeogit.
- commit: 67c4d9e693e3bb7fb968af24e3584f821a78ba56
  note: Discovered automatically by archeogit.
- commit: 768134d4f48109b90f4248feecbeeb7d684e410c
  note: Discovered automatically by archeogit.
- commit: f3606e3a92ddd36299642c78592fc87609abb1f6
  note: Discovered automatically by archeogit.
- commit: 801dd57bd1d8c2c253f43635a3045bfa32a810b3
  note: Discovered automatically by archeogit.
- commit: b2a9eadab85730935f5a6fe19f3f61faaaced601
  note: Discovered automatically by archeogit.
- commit: 5eca1c10cbaa9c366c18ca79f81f21c731e3dcc7
  note: Discovered automatically by archeogit.
- commit: c7af7877eeacfeaaf6a1b6f54c481292ef116837
  note: Discovered automatically by archeogit.
- commit: 4a8342d233a39ee582e9f7260e12d2f5fd194a05
  note: Discovered automatically by archeogit.
- commit: 4cf86d77f5942336e7cd9de874b38b3c83b54d5e
  note: Discovered automatically by archeogit.
- commit: ab516013ad9ca47f1d3a936fa81303bfbf734d52
  note: Discovered automatically by archeogit.
- commit: d11ed3ab3166a2bfad60681aebf3e13e1c3408a9
  note: Discovered automatically by archeogit.
- commit: a3a2e76c77fa22b114e421ac11dec0c56c3503fb
  note: Discovered automatically by archeogit.
- commit: 6a61671bb2f3a1bd12cd17b8fca811a624782632
  note: Discovered automatically by archeogit.
- commit: afaef01c001537fa97a25092d7f54d764dc7d8c1
  note: Discovered automatically by archeogit.
- commit: eafb149ed73a8bb8359c0ce027b98acd4e95b070
  note: Discovered automatically by archeogit.
- commit: d08b9f0ca6605e13dcb48f04e55a30545b3c71eb
  note: Discovered automatically by archeogit.
- commit: ec1d281923cf81cc660343d0cb8ffc837ffb991d
  note: Discovered automatically by archeogit.
- commit: 2e91fa7f6d451e3ea9fec999065d2fd199691f9d
  note: Discovered automatically by archeogit.
- commit: 16d51a590a8ce3befb1308e0e7ab77f3b661af33
  note: Discovered automatically by archeogit.
- commit: 1a2a4d06e1e95260c470ebe3a945f61bbe8c1fd8
  note: Discovered automatically by archeogit.
- commit: bac5b6b6b11560f323e71d0ebac4061cfe5f56c0
  note: Discovered automatically by archeogit.
upvotes_instructions: |
  For the first round, ignore this upvotes number.

  For the second round of reviewing, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes:
unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  code:
  code_answer:
  fix:
  fix_answer:
discovered:
  question: |
    How was this vulnerability discovered?

    Go to the bug report and read the conversation to find out how this was
    originally found. Answer in longform below in "answer", fill in the date in
    YYYY-MM-DD, and then determine if the vulnerability was found by a Google
    employee (you can tell from their email address). If it's clear that the
    vulenrability was discovered by a contest, fill in the name there.

    The automated, contest, and developer flags can be true, false, or nil.

    If there is no evidence as to how this vulnerability was found, then please
    explain where you looked.
  answer:
  automated:
  contest:
  developer:
autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
specification:
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  note:
  answer:
subsystem:
  question: |
    What subsystems was the mistake in? These are WITHIN linux kernel

    Determining the subsystem is a subjective task. This is to help us group
     similar vulnerabilities, so choose a subsystem that other vulnerabilities would be in. Y

    Some areas to look for pertinent information:
      - Bug labels
      - Directory names
      - How developers refer to an area of the system in comments,
        commit messages, etc.

    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.

    Example linux kernel subsystems are:
      * drivers
      * crypto
      * fs
      * net
      * lib

    Name should be:
      * all lowercase English letters
      * NOT a specific file
      * can have digits, and _-@/

    Can be multiple subsystems involved, in which case you can make it an array
    e.g.
        name: ["subsystemA", "subsystemB"] # ok
        name: subsystemA # also ok
  name:
  note:
interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?

    Use this to specify any commits you think are notable in some way, and
    explain why in the note.

    Example interesting commits:
      * Mentioned as a problematic commit in the past
        e.g. "This fixes regression in commit xys"
      * A significant rewrite in the git history
      * Other commits that fixed a similar issue as this vulnerability
      * Anything else you find interesting.
  commits:
  - commit:
    note:
  - commit:
    note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
sandbox:
  question: |
    Did this vulnerability violate a sandboxing feature that the system
    provides?

    A sandboxing feature is one that allows files, users, or other features
    limited access. Vulnerabilities that violate sandboxes are usually based on
    access control, checking privileges incorrectly, path traversal, and the
    like.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
discussion:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  discussed_as_security:
  any_discussion:
  note:
vouch:
  question: |
    Was there any part of the fix that involved one person vouching for
    another's work?

    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of what your answer was.
  answer:
  note:
stacktrace:
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces:
  stacktrace_with_fix:
  note:
forgotten_check:
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
order_of_operations:
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  answer:
  note:
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:
mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?

    There can, and usually are, many mistakes behind a vulnerability.

    Remember that mistakes can come in many forms:
    * slip: failing to complete a properly planned step due to inattention
              e.g. wrong key in the ignition
              e.g. using < instead of <=
    * lapse: failing to complete a properly planned step due to memory failure
              e.g. forgetting to put car in reverse before backing up
              e.g. forgetting to check null
    * planning error: error that occurs when the plan is inadequate
              e.g. getting stuck in traffic because you didn't consider the
                   impact of the bridge closing
              e.g. calling the wrong method
              e.g. using a poor design

    These are grey areas, of course. But do your best to analyze the mistakes
    according to this framework.

    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?

    Write a thoughtful entry here that people in the software engineering
    industry would find interesting.
  answer:
CWE_instructions: |
  Please go to http://cwe.mitre.org and find the most specific, appropriate CWE
  entry that describes your vulnerability. We recommend going to
  https://cwe.mitre.org/data/definitions/699.html for the Software Development
  view of the vulnerabilities. We also recommend the tool
  http://www.cwevis.org/viz to help see how the classifications work.

  If you have anything to note about why you classified it this way, write
  something in CWE_note. This field is optional.

  Just the number here is fine. No need for name or CWE prefix. If more than one
  apply here, then place them in an array like this
    CWE: ["123", "456"] # this is ok
    CWE: [123, 456]     # also ok
    CWE: 123            # also ok
CWE:
CWE_note:
nickname_instructions: |
  A catchy name for this vulnerability that would draw attention it.
  If the report mentions a nickname, use that.
  Must be under 30 characters. Optional.
nickname:
CVSS: CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H
