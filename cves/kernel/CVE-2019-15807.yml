CVE: CVE-2019-15807
CWE:
  - 401
ipc: N/A
CVSS: CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:H
bugs: [https://github.com/torvalds/linux/commit/3b0541791453fbe7f42867e310e0c9eb6295364d]
i18n:
  note: No, since this has no cultural barriers based on languages, translations, etc.
  answer: false
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)?

    An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be true or false
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
vccs: [2908d778ab3e244900c310974e1fc1c69066e450, 5911e963d3718e306bcac387b83e259aa4228896]
fixes: [3b0541791453fbe7f42867e310e0c9eb6295364d]
vouch:
  note: Several people signed off on a commit made by Jason Yan. 
  16044c98e4d73f749e4afaa071618664d24b5da1
  answer: true
  question: >
    Was there any part of the fix that involved one person vouching for

    another's work?


    This can include:
      * signing off on a commit message
      * mentioning a discussion with a colleague checking the work
      * upvoting a solution on a pull request

    Answer must be true or false.

    Write a note about how you came to the conclusions you did, regardless of what your answer was.
bounty:
  amt:
  url:
  announced:
lessons:
  yagni:
    note:
    applies:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?

    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.

    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.

    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  serial_killer:
    note:
    applies:
  complex_inputs:
    note:
    applies:
  distrust_input:
    note:
    applies:
  least_privilege:
    note: Users should only have access to few numbers of things throughout the entire project.
    applies: true
  native_wrappers:
    note:
    applies:
  defense_in_depth:
    note:
    applies:
  secure_by_default:
    note:
    applies:
  environment_variables:
    note:
    applies:
  security_by_obscurity:
    note:
    applies:
  frameworks_are_optional:
    note:
    applies:
reviews: []
sandbox: N/A
upvotes: "2"
CWE_note: |
  CWE as registered in the NVD. If you are curating, check that this
  is correct and replace this comment with "Manually confirmed".
mistakes: Some simple coding mistakes slipped under the developer's noses. The
  vulnerabilities were living within a library that was presumed to be working
  completely fine until discovering the user of the SAS library. The mitigations
  taking place do exactly as the vulnerability has been giving them issues with,
  allocating the right memory so as to not overflow and allow for an elevation
  of privilege.
nickname: A Sassy Discovery
subsystem: [Serial Attached SCSI library]
discovered: Discovered
discussion:
  note:
  question: |
    Was there any discussion surrounding this?

    A discussion can include debates, disputes, or polite talk about how to
    resolve uncertainty.

    Example include:
      * Is this out of our scope?
      * Is this a security?
      * How should we fix this?

    Just because you see multiple comments doesn't mean it's a discussion.
    For example:
      * "Fix line 10". "Ok" is not what we call a discussion
      * "Ping" (reminding people)

    Check the bugs reports, pull requests, and mailing lists archives.

    These answers should be boolean.
      discussed_as_security: true or false
      any_discussion: true or false

    Put any links to disagreements you found in the notes section, or any other
    comment you want to make.
  any_discussion: false
  discussed_as_security: false
stacktrace:
  note: A stack trace bug is shown as an example of what the memory leak would look like.
  question: |
    Are there any stacktraces in the bug reports?

    Secondly, if there is a stacktrace, is the fix in the same file that the
    stacktrace points to?

    If there are no stacktraces, then both of these are false - but be sure to
    mention where you checked in the note.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
  any_stacktraces: true
  stacktrace_with_fix: true
description: In the Linux kernel before 5.1.13, there is a memory leak in
  drivers/scsi/libsas/sas_expander.c when SAS expander discovery fails. This
  will cause a BUG and denial of service.
unit_tested:
  fix: true
  code: false
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?

    For code: and fix: - your answer should be boolean.

    For the code_answer below, look not only at the fix but the surrounding
    code near the fix in related directories and determine if and was there were
    unit tests involved for this subsystem.

    For the fix_answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
  fix_answer: Unit tests were not added but memory was simply allocated correctly.
  code_answer: null
reported_date: 2019-06-22
specification:
  note: Denial of service as users are able to gain privileges because of a simple memory leak.
  answer: true
  instructions: |
    Is there mention of a violation of a specification? For example, the POSIX
    spec, an RFC spec, a network protocol spec, or some other requirements
    specification.

    Be sure to check the following artifacts for this:
      * bug reports
      * security advisories
      * commit message
      * mailing lists
      * anything else

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
announced_date: 2019-08-29
curation_level: 0
published_date: 2019-08-29
forgotten_check:
  note: null
  answer: false
  question: |
    Does the fix for the vulnerability involve adding a forgotten check?

    A "forgotten check" can mean many things. It often manifests as the fix
    inserting an entire if-statement or a conditional to an existing
    if-statement. Or a call to a method that checks something.

    Example of checks can include:
      * null pointer checks
      * check the current role, e.g. root
      * boundary checks for a number
      * consult file permissions
      * check a return value

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
autodiscoverable:
  note: A buffer overflow could have definitely occurred as memory allocation was the main problem for this library.
  answer: true
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    In systemd, the actually use OZZ Fuzz. If there's a link to it, add it here.

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
interesting_commits: [16044c98e4d73f749e4afaa071618664d24b5da1]
order_of_operations:
  note: null
  answer: false
  question: |
    Does the fix for the vulnerability involve correcting an order of
    operations?

    This means the fix involves moving code around or changing the order of
    how things are done.

    Answer must be true or false.
    Write a note about how you came to the conclusions you did, regardless of
    what your answer was.
announced: 2019-06-22
CWE Identifier: "788"
discovered_answer: Jian Luo reported that the Serial Attached SCSI library
  (libsas) did not correctly handle the failure to discover devices beyond a
  SAS expander. This could lead to a resource leak and crash (BUG). The
  security impact of this is unclear.
discovered_automated:
  - 
  - "1"
discovered_developer:
  - 
  - "1"
discovered_contest:
  - 
  - "1"
major_events: [Version Downgrade, Debian Bug Fix]
related: CVE-2019-15666
bugs_repeater: []
sandbox_answer:
  - 
  - "1"
sandbox_note: ""
ipc_answer:
  - 
  - "1"
ipc_note: ""
