CVE: CVE-2015-5351

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Manager Token Leak

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 266

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2015-12-08

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-02-22 

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: 

    Apache Tomcat includes a web application called the Manager. This tool is 
    used to deploy new web applications, to undeploy currently deployed web 
    applications, to reload existing web applications, and to perform other 
    operations to change and monitor the availability of the user's web 
    applications.
    
    Another web application included in Apache Tomcat is the Host Manager. The 
    Host Manager is used to manage the different virtual hosts (server-sharing 
    wesites) on the user's Tomcat server.
    
    CVE-2015-5351 refers to a vulnerability in the Manager and Host Manager web 
    applications. An unauthenticated user attempting to accessing the index page 
    of either of these web applications would be issued a redirect from the 
    server with a valid CSRF token. An attacker may use this token to send 
    requests to the web application which would have been considered invalid 
    without the token's inclusion.
    
    It is worth noting that because these applications are intended for managing
    the user's apache server, they are not usually exposed to the internet.
    
    
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced: 2016-02-22 
  url:
bugs: []
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: 1b1ce375c54ae2a17da94981af4ea97687f4b698
     note: Belongs to tomcat repo. SVN rev 1720652, from the Tomcat website.
   - commit: c8a8ef0b5bbccd6beb06fd737751595ea810f2b1
     note: Belongs to tomcat repo. SVN rev 1720655, from the Tomcat website.
   - commit: 129279660d1e338f319a68982dbffdabdfda2fd9
     note: Belongs to tomcat80 repo. SVN rev 1720658, from the Tomcat website.
   - commit: a81565e60a4ad716df419cd816122f50324c0594
     note: Belongs to tomcat80 repo. SVN rev 1720660, from the Tomcat website.
   - commit: 422cb0843d9e26dcc454520da3fca9a05bed4348
     note: SVN rev 1720661, from the Tomcat website.
   - commit: afa1a54323fbf410430e182098f95a31bcfcfb00
     note: SVN rev 1720663, from the Tomcat website.
   - commit:
     note:
     
vccs:
  - commit: e86a7a42fe4d82f8cb1e8bbb271656b49acd4d0a
    note: 
    
        This commit creates the index page for both of web applications with 
        vulnerabilities. These index pages are Java Server Pages, which keep 
        track user sessions by default.

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit:
    note:
    
upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: no unit test found
    
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: 
  
    Apache Tomcat's security team discovered this vulnerability. No further
    information provided.
    
    Checked Sources
        NVD
        Apache 9.x Vulnerabilities List
        Apache 8.x Vulnerabilities List
        Apache 7.x Vulnerabilities List
        
  date: 2015-12-08
  automated:
  contest:

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: manager, host-manager 
  name: 
    - manager
    - host-manager

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: 
    No commits are made to the index files where these vulnerabilities were 
    introduced before the vulnerabilities were fixed.
  commits:
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: Impact of exposed token is reduced with further security measures
  least_privilege:
    applies: false
    note:
  frameworks_are_optional:
    applies: false
    note:
  native_wrappers:
    applies: false
    note:
  distrust_input:
    applies: false
    note:
  security_by_obscurity:
    applies: false
    note:
  serial_killer:
    applies: false
    note:
  environment_variables:
    applies: false
    note:
  secure_by_default:
    applies: true
    note: the issue arises because JSPs create a session with the client by default.
  yagni:
    applies: false
    note:
  complex_inputs:
    applies: false
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: 
    No changes were made to the file housing the vulnerability in the time 
    between its introduction and its correction. When the vulnerability was 
    finally fixed, it was done by the same person who had introduced it 5 years 
    prior. It seems like one of the issues that may have lead to this bug was 
    lack of eyes on the code. When a component does not have many maintainers, 
    and when those maintainers do not interact with it often, any bugs it 
    contains are likely to last a long time.
    
    This bug is also a good illustration of the damage caused by a technology
    not being "secure by default" - in this case, JSPs which create a session
    with the client by default, regardless of whether one is needed.
    
    
    
