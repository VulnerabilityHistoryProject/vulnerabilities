CVE: CVE-2009-2902

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname: Path Traversal File Delete

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 22

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 1

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2009-07-30

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2010-03-01

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  A path traversal bug in the Catalina setup code had allowed a user
  to specify a directory to extract the WAR file to, and would 
  delete the specified directory as part of failure cleanup if 
  said file had an invalid filename. 
  
  This allowed malicious users to delete directories that they otherwise
  wouldn't have had access to.
  
bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced:
  url:
bugs: []

fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: 0299cb724ea71f304d54adfcdb950f59b01fb421
     note: |
      SVN rev 902650, from the Tomcat website.

      This is the 5.5.X fix
   - commit: 
     note: |
      SVN rev 892815, from the Tomcat website
      (revision specified in the notes section to avoid format-checking failures)
      
      This is the 6.0.X fix
vccs:
  - commit: 
    note: 
      SVN rev 301971, from the Tomcat website. 
      (revision specified in the notes section to avoid format-checking failures)
      
      Introduced the ability to delete directories by exploiting the path traversal bug.
  - commit: 
    note: |
      SVN rev 301460, from the Tomcat website. 
      (revision specified in the notes section to avoid format-checking failures)
      
      Introduced the path traversal bug, but is a port from 4.1 
      (SVN lists no revisions of this file prior to this revision). 

      I was unable to find where the SVN revisions for 4.1 were stored.

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit: 
    note:
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 3

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: |
    I examined all of the pre-fix Catalina test cases. They were pretty sparse.

    The fix did not add test cases.
  code: false
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: |
    The official tomcat 5.5.0 security page states that the problem
    was reported to the security team on 30 Jul 2009, but says nothing 
    of the circumstances surrounding the reporting.

    http://tomcat.apache.org/security-5.html

    The CVE, NVD, and Security Tracker for 2009-2902 offer 
    no discovery information.
  date: 2009-07-30
  automated:
  contest:

autodiscoverable:
  instructions: |
    Is it plausible that a fully automated tool could have discovered
    this? These are tools that require little knowledge of the domain,
     e.g. automatic static analysis, compiler warnings, fuzzers.

    Examples for true answers: SQL injection, XSS, buffer overflow

    Examples for false: RFC violations, permissions issues, anything
    that requires the tool to be "aware" of the project's
    domain-specific requirements.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: true
  answer: |
    The fact that user input was being used for paths without sanitization
    would be autodiscoverable. In fact, I have personally seen a 
    static analysis tool a colleague used pick up on those types of issues.

specification:
  instructions: |
    Is there mention of a violation of a specification? For example,
    an RFC specification, a protocol specification, or a requirements
    specification.

    Be sure to check all artifacts for this: bug report, security
    advisory, commit message, etc.

    The answer field should be boolean. In answer_note, please explain
    why you come to that conclusion.
  answer_note: false
  answer: |
    There is no mention of any specifications in the bug report,
    security advisory, or the commit message.

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: The afflicted files were in Catalina's startup directory.
  name:
    - catalina
    - startup

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: |
    The issue was only addressed in the 6.0.X and 5.5.X commits. 
    I did not find any other commits relating to this issue. 

    As for what happened between the VCCs and the fix, 
    as this comprises any changes made between ~2002 and March 2010,
    there were a lot of changes.

    However, as for the changes to ExpandWar.java itself,
    - A cleanup process was added in the event of invalid WARs
        (marked as VCC: SVN 301971 for contributing to the issue).
    - The file moved directories various times as part of
        restructuring efforts (mostly moving the trunk around).
    - The Logger and "debug" field(s) got removed and replaced with
        Log and Log.isDebugEnabled.
    - Logic for avoiding locking on Windows was added.
    - One commiter specifies being:
        "a happy (?) user of MickeyMouse(TM) OS (aka Windows)"
  commits:
    - commit:
      note:
    - commit:
      note:
i18n:
  question: |
    Was the feature impacted by this vulnerability about internationalization
    (i18n)? An internationalization feature is one that enables people from all
    over the world to use the system. This includes translations, locales,
    typography, unicode, or various other features.

    Answer should be boolean. Write a note about how you came to the conclusions
    you did.
  answer: false
  note: |
    The path traversal was based entirely on unlocalized user input.
ipc:
  question: |
    Did the feature that this vulnerability affected use inter-process
    communication? IPC includes OS signals, pipes, stdin/stdout, message
    passing, and clipboard. Writing to files that another program in this
    software system reads is another form of IPC.

    Answer should be boolean.
  answer: false
  note: |
    This was part of the startup process, extracting jar and war files, however those files were used as part of Catalina.
lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies:
    note:
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies: true
    note: |
      Filename input from the user was used without sanitization, leading to path traversal 
      and the ability to masliciously delete directories from the target system.
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: |
    Coding mistakes were made, as input from the user wasn't sanitized before
    being used for directory generation. Ironically it was an improvement of
    deleting directories that failed to generate that lead to the deleterious
    potential of this bug.

    The fix now checks that the directory that the input gives starts with the 
    cannonical directory that is controlled by a system property.

    It also now logged directory deletion in the event of failed generation, 
    so that deleted directories could be monitored for.

    Perhaps this is due to my misunderstanding of how opening WAR's works,
    but they don't seem to check for directories names that contain "/../". 

    I would think that if one is only checking the prefix,
    that one could use combinations of "/../../" to escape the canonical directory,
    and thus continue to maliciously delete directories.

    This is somewhat concerning, as ExpandWar is still present and checking the
    prefix of the dir in Tomcat's modern repository. However I didn't look at
    the other files in modern Tomcat to see if they changed how they handled input. 

    For investigating the fix, I had only inspected code surrounding the fix's changes
    for "/../" sanitization, as my call hierarchy attempts weren't working, and I am 
    unsure how to efficiently search a call chain without using a call hierarchy or
    running the code.

    They do still delete directories on failure to open, so if they don't 
    account for "/../" elsewhere then the exploit may be possible. 

    That is unless "/../" has always failed for war opening, as I lack the appropriate 
    knowledge to test it myself.
