CVE: CVE-2015-5346

nickname_instructions: |
  Nickname is optional. Provide a useful, professional, and catchy nickname for
  this vulnerability. Ideally fewer than 30 characters. This will be shown
  alongside its CVE to make it more easily distinguished from the rest.
nickname:

CWE_instructions: |
  Please go to cwe.mitre.org and find the most specific, appropriate CWE entry
  that describes your vulnerability. (Tip: this may not be a good one to start
  with - spend time understanding this vulnerability before making your choice!)
CWE: 384

curated_instructions: |
  If you are manually editing this file, then you are "curating" it. Set the
  entry below to "true" as soon as you start. This will enable additional
  integrity checks on this file to make sure you fill everything out properly.
  If you are a student, we cannot accept your work as finished unless curated is
  set to true.
curation_level: 0

reported_instructions: |
  Was there a date that this vulnerability was reported to the team? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
reported: 2014-06-22

announced_instructions: |
  Was there a date that this vulnerability was announced to the world? You can
  find this in changelogs, blogs, bug reports, or perhaps the CVE data.
  Please enter your date in YYYY-MM-DD format.
announced: 2016-02-22

description_instructions: |
  You can get an initial description from the CVE entry on cve.mitre.org. These
  descriptions are a fine start, but they can be kind of jargony.
  Rewrite this description in your own words. Make it interesting and easy to
  read to anyone with some programming experience. We can always pull up the NVD
  description later to get more technical.
  Try to still be specific in your description, but remove Chromium-specific
  stuff. Remove references to versions, specific filenames, and other jargon
  that outsiders to Chromium would not understand. Technology like "regular
  expressions" is fine, and security phrases like "invalid write" are fine to
  keep too.
description: |
  The vulnerability is an example of session fixation. This is when a malicious
  actor hijacks a valid user session. Usually, when a user is authenticated the
  application should be assigned a new session Id, but when they are not, the
  attacker can reuse that session id to gain access. In this case, there was a
  field in the request object that was not renewed (requestSessionSSL), for new
  sessions, so theoretically if an attacker created a request object and forced
  the user to somehow use it, then they could gain access because they would have
  the requestSessionSSL field to authenticate. This attack would also require the
  web application to be set up to use ssl session id as the http session id which
  is an uncommon setup.


bounty_instructions: |
  If you came across any indications that a bounty was paid out for this
  vulnerability, fill it out here. Or correct it if the information already here
  was wrong. Otherwise, leave it blank.
bounty:
  amt:
  announced: 2016-02-24 
  url:
bugs: [58809]
fixes_vcc_instructions: |
  Please put the Git commit SHA in "commit" below, and any notes about how this
  was discovered in the "note" field.
  Refer to our instructions on how to find a Git SHA from an SVN revision.
fixes:
   - commit: 83679b99cd40caa401d173c8f8e72fc98eb5d5be
     note: SVN rev 1713184, from the Tomcat website.
   - commit: 04164c1f01b973e548d95511d417f414ca723cb8
     note: SVN rev 1723414, from the Tomcat website.
   - commit: 41fbee7ba15435a831f765597ff907c56ebf2169
     note: SVN rev 1713185, from the Tomcat website.
   - commit: c39b7ffc2145644f7f3cf9e3cd4aada5048e56a0
     note: SVN rev 1723506, from the Tomcat website.
   - commit: 6287be37d8d06c320215c45f7e2b8380411692e0
     note: SVN rev 1713187, from the Tomcat website.
   - commit:
     note:
vccs:
  - commit: 2fe82d9ff7602aa3cf79d2be8af8327b240a53c1
    note: commit message "Add a per context option to select the cookie parser to use and add the necessary plumbing to pass that choice to the cookie parser." Basically, they were working on the cookie parser, and also made additions to the Coyote Adapter which is when they recycled the cookie. They forgot to also recycle the session here
  - commit: eae54419c6e196933998f63358367040edaa4a8c
    note: Working on the request class, clearing the cookies and setting session to null. Forgot to also set RequestedSSLSession to false

incomplete_fix_instructions: |
  Did the above "fixes" actually fix the vulnerability?
  Please list any fix commits for this vulnerability that had to be corrected
  at a later date.
incomplete_fixes:
  - commit: 04164c1f01b973e548d95511d417f414ca723cb8
    note: This was a two part fix, first patch was in commit 83679b99cd40caa401d173c8f8e72fc98eb5d5be
  - commit:
    note:

upvotes_instructions: |
  Students: when initially writing this, ignore this upvotes number.
  Once this work is being reviewed, you will be giving a certain amount of
  upvotes to each vulnerability you see. Your peers will tell you how
  interesting they think this vulnerability is, and you'll add that to the
  upvotes score on your branch.
upvotes: 2

unit_tested:
  question: |
    Were automated unit tests involved in this vulnerability?
    Was the original code unit tested, or not unit tested? Did the fix involve
    improving the automated tests?
    Write the reasoning behind your answer in the "answer" field.
    For the "code" answer below, look not only at the fix but the surrounding
    code near the fix and determine if and was there were unit tests involved
    for this module. Must be just "true" or "false".
    For the "fix" answer below, check if the fix for the vulnerability involves
    adding or improving an automated test to ensure this doesn't happen again.
    Must be just "true" or "false".
  answer: I can tell this was unit tested by reading the bug report. Author Mark Thomas says that the tests passed against the session vulnerability. As for fix, I do not see any unit tests that were added as part of the fix.
  code: true
  fix: false

discovered:
  question: |
    How was this vulnerability discovered?
    Go to the bug report and read the conversation to find out how this was
    originally found.
    * Answer in longform below in "answer"
    * Fill in the date in YYYY-MM-DD
    * If it's clear that the vulnerability was discovered by a contest,
      fill in the name there.
    * The "automated" flag can be true, false, or nil.
    If there is no evidence as to how this vulnerability was found, then you
    may leave the entries blank except for "answer", BUT please write down
    where you looked in "answer".
  answer: This vulnerability was discovered by the tomcat security team. They discovered it when they realized Tomcat incorrectly handled different session settings when multiple versions of the same web application was deployed
  date: 2014-06-22
  automated: false
  contest: false

subsystem:
  question: |
    What subsystems was the mistake in?
    Look at the path of the source code files code that were fixed to get
    directory names. Look at comments in the code. Look at the bug reports how
    the bug report was tagged.
    Examples: "clipboard", "gpu", "ssl", "speech", "renderer"
  answer: it lists the component in the bug report
  name:
    - catalina
    - connector

interesting_commits:
  question: |
    Are there any interesting commits between your VCC(s) and fix(es)?
    Write a brief (under 100 words) description of why you think this commit was
    interesting in light of the lessons learned from this vulnerability. Any
    emerging themes?
    If there are no interesting commits, demonstrate that you completed this
    section by explaining what happened between the VCCs and the fix.
  answer: Yes there is a revision 1667546 that implemented Tomcat authorization. It takes a user and adds roles to it. During this revision, multiple files were changed at once from the FormAuthenticator to the AuthenticatorBase. Of which, both Request.java and CoyoteAdapter were changed. In this, they recycled the authtype along with other user information. It is interesting because you would think in this large feature addition, they would add a check for ensuring the session was cleared after a new deployment began. Session and authentication go hand in hand. If the session is compromised then authentication is rendered useless.
  commits:
    - commit: 1ee6bfce5d53af47aee398a38691423608bf6b83
      note: Authenticator for adding roles to users
    - commit:
      note:

lessons:
  question: |
    Are there any common lessons we have learned from class that apply to this
    vulnerability? In other words, could this vulnerability serve as an example
    of one of those lessons?
    Leave "applies" blank or put false if you did not see that lesson (you do
    not need to put a reason). Put "true" if you feel the lesson applies and put
    a quick explanation of how it applies.
    Don't feel the need to claim that ALL of these apply, but it's pretty likely
    that one or two of them apply.
    If you think of another lesson we covered in class that applies here, feel
    free to give it a small name and add one in the same format as these.
  defense_in_depth:
    applies: true
    note: Instead of depending solely on the session id to authenticate, if the developers used defense in depth to create an additional layer of security such as two-factor authentication, then the vulnerability would be avoidable.
  least_privilege:
    applies:
    note:
  frameworks_are_optional:
    applies:
    note:
  native_wrappers:
    applies:
    note:
  distrust_input:
    applies:
    note:
  security_by_obscurity:
    applies:
    note:
  serial_killer:
    applies:
    note:
  environment_variables:
    applies:
    note:
  secure_by_default:
    applies:
    note:
  yagni:
    applies:
    note:
  complex_inputs:
    applies:
    note:

mistakes:
  question: |
    In your opinion, after all of this research, what mistakes were made that
    led to this vulnerability? Coding mistakes? Design mistakes?
    Maintainability? Requirements? Miscommunications?
    Look at the CWE entry for this vulnerability and examine the mitigations
    they have written there. Are they doing those? Does the fix look proper?
    Use those questions to inspire your answer. Don't feel obligated to answer
    every one. Write a thoughtful entry here that those ing the software
    engineering industry would find interesting.
  answer: From looking at the prior code and the fix, it seems evident that the developers were falling into the long method trap. When this happens, the code can become hard to follow and one method ends up doing multiple different things. In this case postParseRequest handled logic for cookies and sessions. When session was being cleared, multiple lines to clear the attributes of the session were written, instead of creating a helper method that focused solely on session clearing. This led them to forget to clear one attribute that opened the system up to session fixation. In the future, it is important that you write helper functions to eliminate long methods, and improve readibility to prevent errors like this.